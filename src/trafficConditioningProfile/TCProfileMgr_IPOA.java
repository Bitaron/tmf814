package trafficConditioningProfile;


/**
* trafficConditioningProfile/TCProfileMgr_IPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from trafficConditioningProfile.idl
* Wednesday, June 15, 2016 7:24:43 PM COT
*/


/**
   * <p>The TC Profile Manager is used to gain access to operations
   * that deal with Traffic Conditioning Profile.</p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager()  operation in Manager.</p>
   **/
public abstract class TCProfileMgr_IPOA extends org.omg.PortableServer.Servant
 implements trafficConditioningProfile.TCProfileMgr_IOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getAllTCProfiles", new java.lang.Integer (0));
    _methods.put ("getTCProfile", new java.lang.Integer (1));
    _methods.put ("getTCProfileAssociatedTPs", new java.lang.Integer (2));
    _methods.put ("createTCProfile", new java.lang.Integer (3));
    _methods.put ("deleteTCProfile", new java.lang.Integer (4));
    _methods.put ("modifyTCProfile", new java.lang.Integer (5));
    _methods.put ("setNativeEMSName", new java.lang.Integer (6));
    _methods.put ("setUserLabel", new java.lang.Integer (7));
    _methods.put ("setOwner", new java.lang.Integer (8));
    _methods.put ("getCapabilities", new java.lang.Integer (9));
    _methods.put ("setAdditionalInfo", new java.lang.Integer (10));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
     * <p>This allows an NMS to request all of the TC Profiles that
     * are under the control of the TCProfileMgr_I.</p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     * 
     * <br>unsigned long how_many: number of iterators to return in 
     * tcProfileList.
     * <br>trafficConditioningProfile::TCProfileList 
     * tcProfileList: the first batch of iterators.
     * <br>trafficConditioningProfile::TCProfileIterator_I 
     * tcProfileIt: the iterator used to access the remaining TC 
     * Profiles.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators
     *  that the EMS can support has been reached<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
       case 0:  // trafficConditioningProfile/TCProfileMgr_I/getAllTCProfiles
       {
         try {
           int how_many = in.read_ulong ();
           trafficConditioningProfile.TCProfileList_THolder tcProfileList = new trafficConditioningProfile.TCProfileList_THolder ();
           trafficConditioningProfile.TCProfileIterator_IHolder tcProfileIt = new trafficConditioningProfile.TCProfileIterator_IHolder ();
           this.getAllTCProfiles (how_many, tcProfileList, tcProfileIt);
           out = $rh.createReply();
           trafficConditioningProfile.TCProfileList_THelper.write (out, tcProfileList.value);
           trafficConditioningProfile.TCProfileIterator_IHelper.write (out, tcProfileIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p>This service returns the Traffic Conditioning Profile struct for the given 
     * tcProfileName. The Traffic Conditioning Profile structure contains an NVSList of 
     * traffic parameters.  The traffic parameters returned will be the parameters
     * in place on the actual Traffic Conditioning Profile.  If there are no
     * traffic parameters, then the NVSList will be empty.</p>
     * <br>globaldefs::NamingAttributes_T tcProfileName: name of the TC 
     * Profile.
     * <br>TCProfile_T tcProfile : the returned Traffic Conditioning Profile.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when tcProfileName does not reference 
     *  a TC Profile object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when tcProfileName references object which does 
     *  not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
       case 1:  // trafficConditioningProfile/TCProfileMgr_I/getTCProfile
       {
         try {
           globaldefs.NameAndStringValue_T tcProfileName[] = globaldefs.NamingAttributes_THelper.read (in);
           trafficConditioningProfile.TCProfile_THolder tcProfile = new trafficConditioningProfile.TCProfile_THolder ();
           this.getTCProfile (tcProfileName, tcProfile);
           out = $rh.createReply();
           trafficConditioningProfile.TCProfile_THelper.write (out, tcProfile.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This allows an NMS to request all of the TPs associated with the  
     * specified TC Profile. If there are no TPs which are 
     * associated with the specified TC Profile, then an empty list 
     * is returned. </p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     * 
     * <br>globaldefs::NamingAttributes_T tcProfileName: the name of 
     * the TC Profile.
     * <br>unsigned long how_many: maximum number of TPs to return in the 
     * first batch.
     * <br>terminationPoint::TerminationPointList_T tpList: first batch of 
     * TPs.
     * <br>terminationPoint::TerminationPointIterator_I tpIt: iterator to 
     * access the remaining TPs.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when tcProfileName does not 
     *  reference a Transmission Descriptor object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when tcProfileName references
     *  an object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators
     *  that the EMS can support has been reached<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
       case 2:  // trafficConditioningProfile/TCProfileMgr_I/getTCProfileAssociatedTPs
       {
         try {
           globaldefs.NameAndStringValue_T tcProfileName[] = globaldefs.NamingAttributes_THelper.read (in);
           int how_many = in.read_ulong ();
           terminationPoint.TerminationPointList_THolder tpList = new terminationPoint.TerminationPointList_THolder ();
           terminationPoint.TerminationPointIterator_IHolder tpIt = new terminationPoint.TerminationPointIterator_IHolder ();
           this.getTCProfileAssociatedTPs (tcProfileName, how_many, tpList, tpIt);
           out = $rh.createReply();
           terminationPoint.TerminationPointList_THelper.write (out, tpList.value);
           terminationPoint.TerminationPointIterator_IHelper.write (out, tpIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The createTCProfile operation is used to create
     * a new Traffic Conditioning Profile on the server. A Traffic Conditioning Profile 
     * Create Data structure, representing the new Traffic Conditioning Profile, is 
     * passed as input. The resulting Traffic Conditioning Profile is 
     * returned as a result.</p>
     *
     * <br>TCProfileCreateData_T newTCProfileCreateData: information about the TC 
     * Profile to be created.
     * <br>TCProfile_T newTCProfile: result of the 
     * creation.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support creation of TC Profiles via 
     *  this interface<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised if newTCProfileCreateData contains invalid data<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_CAPACITY_EXCEEDED - Raised when maximum number of TC 
     *  Profiles has been reached<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element 
     * involved in this operation <br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
       case 3:  // trafficConditioningProfile/TCProfileMgr_I/createTCProfile
       {
         try {
           trafficConditioningProfile.TCProfileCreateData_T newTCProfileCreateData = trafficConditioningProfile.TCProfileCreateData_THelper.read (in);
           trafficConditioningProfile.TCProfile_THolder newTCProfile = new trafficConditioningProfile.TCProfile_THolder ();
           this.createTCProfile (newTCProfileCreateData, newTCProfile);
           out = $rh.createReply();
           trafficConditioningProfile.TCProfile_THelper.write (out, newTCProfile.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The delete Traffic Conditioning Profile operation is used to 
     * delete a Traffic Conditioning Profile on the server. This operation is
     * idempotent. If the service is called with the
     * name of a non-existent Traffic Conditioning Profile, it will succeed.</p>
     *
     * <br>globaldefs::NamingAttributes_T tcProfileName: 
     *  The name of the Traffic Conditioning profile to be deleted.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support deletion of TC Profiles via 
     *  this interface<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_OBJECT_IN_USE - Raised if there are TPs that are using
     *  the Traffic Conditioning Profile<br>
     * EXCPT_INVALID_INPUT - Raised when input parameter is syntactical incorrect.
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element 
     * involved in this operation
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
    **/
       case 4:  // trafficConditioningProfile/TCProfileMgr_I/deleteTCProfile
       {
         try {
           globaldefs.NameAndStringValue_T tcProfileName[] = globaldefs.NamingAttributes_THelper.read (in);
           this.deleteTCProfile (tcProfileName);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The NMS invokes the modifyTCProfile service to request from the EMS to modify an 
     * existing Traffic Conditioning Profile as specified by the parameters passed in the method.</p>
     * A Traffic Conditioning Profile 
     * Modify Data structure, representing the data to be changed, is 
     * passed as input. The resulting Traffic Conditioning Profile is 
     * returned as a result.</p>
     *
     * <br>globaldefs::NamingAttributes_T tcProfileName: 
     *  The name of the Traffic Conditioning profile to be modified.
     *
     * <br>TCProfileCreateData_T tcProfileModifyData: TC 
     * Profile data to be changed.
     *
     * <br>TPDataList_T tpsToModify: The TPs to be modified. 
     * The modified TPs are returned.
     *
     * <br>TCProfile_T modifiedTCProfile: the modified TC Profile. <br>
     *   
     * <br>string errorReason: In case a "best effort" parameter could not be set   
     * an indication of the fault reason is provided by the EMS
     *   
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support modification of TC Profiles via 
     *  this interface<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised if tcProfileName or tcProfileModifyData contains invalid data<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when the Traffic Conditioning Profile to be modified does not exist.<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element involved in this operation.
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
       case 5:  // trafficConditioningProfile/TCProfileMgr_I/modifyTCProfile
       {
         try {
           globaldefs.NameAndStringValue_T tcProfileName[] = globaldefs.NamingAttributes_THelper.read (in);
           trafficConditioningProfile.TCProfileCreateData_T tcProfileModifyData = trafficConditioningProfile.TCProfileCreateData_THelper.read (in);
           subnetworkConnection.TPDataList_THolder tpsToModify = new subnetworkConnection.TPDataList_THolder ();
           tpsToModify.value = subnetworkConnection.TPDataList_THelper.read (in);
           trafficConditioningProfile.TCProfile_THolder modifiedTCProfile = new trafficConditioningProfile.TCProfile_THolder ();
           org.omg.CORBA.StringHolder errorReason = new org.omg.CORBA.StringHolder ();
           this.modifyTCProfile (tcProfileName, tcProfileModifyData, tpsToModify, modifiedTCProfile, errorReason);
           out = $rh.createReply();
           subnetworkConnection.TPDataList_THelper.write (out, tpsToModify.value);
           trafficConditioningProfile.TCProfile_THelper.write (out, modifiedTCProfile.value);
           out.write_string (errorReason.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The nativeEMSName is owned by the EMS.  It represents how an EMS user 
     * addresses an object on the EMS GUI.  The EMS may or may not support 
     * changing this value.</p>
     *
     * <p>When an object is created by the EMS, the EMS selects the nativeEMSName 
     * for the object.</p>
     *
     * <p>When an object is created by an NMS, the NMS specifies the userLabel for  
     * the object. If the EMS supports setting of nativeEMSNames, the 
     * nativeEMSName should be set to the same value as the userLabel.  If the EMS 
     * does not support setting of nativeEMSNames, or if the nativeEMSName has 
     * constraints that the userLabel does not satisfy, the EMS selects the 
     * nativeEMSName for the object.</p>
     *
     * <p>After an object has been created, the nativeEMSName may be changed by 
     * the NMS, if the EMS supports this functionality, using the setNativeEMSName 
     * operation.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName
     * <br> string nativeEMSName
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the nativeEMSName can not be set for 
     *  the specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is lost
     * <br>
     **/
       case 6:  // common/Common_I/setNativeEMSName
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String nativeEMSName = in.read_string ();
           this.setNativeEMSName (objectName, nativeEMSName);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The userLabel is owned by the NMSes.  It is a string assigned by an NMS 
     * to an object. The difference between the userLabel and the NamingAttributes 
     * name is that the userLabel is an attribute of the objects that 
     * may be "set" by the NMS through well defined interfaces (setUserLabel).</p>
     *
     * <p>When an object is created by an NMS, the NMS specifies the userLabel for 
     * the object.</p>
     *
     * <p>When an object is created by the EMS, the EMS sets the userLabel to the 
     * nativeEMSName.</p>
     *
     * <p>Once an object is created, the userLabel may only be changed by an NMS 
     * through the setUserLabel operation.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName: Name of the object for 
     *  which to change the userLabel.
     * <br> string userLabel: New user label to assign to the object
     * <br> boolean enforceUniqueness: Specifies whether or not userLabel should 
     * be checked for uniqueness amongst objects of the same class within the EMS.  
     * If true, then the operation will fail if userLabel is already in use.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the userLabel can not be set for the 
     *  specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * <br>
     **/
       case 7:  // common/Common_I/setUserLabel
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String userLabel = in.read_string ();
           boolean enforceUniqueness = in.read_boolean ();
           this.setUserLabel (objectName, userLabel, enforceUniqueness);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p>This service sets the owner attribute of the specified object.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName
     * <br> string owner
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the owner can not be set for the 
     *  specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 8:  // common/Common_I/setOwner
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String owner = in.read_string ();
           this.setOwner (objectName, owner);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p>This service retrieves the capabilities of the manager.
     * All non-specified capabilities are assumed to be unsupported.</p>
     *
     * <br> CapabilityList_T capabilities
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, and cannot determine the reason it could not comply, it may raise this exception. <br>
     **/
       case 9:  // common/Common_I/getCapabilities
       {
         try {
           common.CapabilityList_THolder capabilities = new common.CapabilityList_THolder ();
           this.getCapabilities (capabilities);
           out = $rh.createReply();
           common.CapabilityList_THelper.write (out, capabilities.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This service sets the additional info attribute
     * of the object identified by objectName. This operation should be used
     * to set both vendor specific attributes as well as the attributes that
     * are formally defined in this interface specification. See <a 
     * href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     * Additional Information Usage</a> for further details.</p>
     *
     * <p>As an input only the list of parameters to be changed, removed, or
     * added shall be provided.  If an entry is to be removed, "-" shall
     * be specified as a value.  If a parameter is specified that is currently
     * not part of the additionalInfo attribute of the specified object
     * that parameter is added by the EMS with the specified value.
     * The EMS may reject removal and addition requests, however.</p>
     *
     * <p> The operation is best effort (except where specified otherwise for a 
     * particular parameter).  The output specifies the
     * values which were actually set.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName: the managed object
     * whose additional info parameters are intended to get modified
     *
     * <br> globaldefs::NVSList_T additionalInfo: list of parameters
     * to be changed, added, or removed (input), updated to provide the
     * actually changed or added parameters (output)
     *
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this
     *  service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal
     *  failure (see errorReason attribute of ProcessingFailureException())<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed,
     *  raised when an input parameter is syntactical incorrect and raised when a 
     *  parameter is identified as only "settable" using a "specific operation" in 
     *  the <a href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     *  Additional Information Usage</a> document<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when the communication to the managed
     *  element containing or hosting objectName is lost<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable 
     *  to execute the request because at least one of the parameters although 
     *  valid can not be set and that parameter is identified as "not best effort" 
     *  in the <a href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     *  Additional Information Usage</a> document)<br>
     * <br>
  
     **/
       case 10:  // common/Common_I/setAdditionalInfo
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           globaldefs.NVSList_THolder additionalInfo = new globaldefs.NVSList_THolder ();
           additionalInfo.value = globaldefs.NVSList_THelper.read (in);
           this.setAdditionalInfo (objectName, additionalInfo);
           out = $rh.createReply();
           globaldefs.NVSList_THelper.write (out, additionalInfo.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:mtnm.tmforum.org/trafficConditioningProfile/TCProfileMgr_I:1.0", 
    "IDL:mtnm.tmforum.org/common/Common_I:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public TCProfileMgr_I _this() 
  {
    return TCProfileMgr_IHelper.narrow(
    super._this_object());
  }

  public TCProfileMgr_I _this(org.omg.CORBA.ORB orb) 
  {
    return TCProfileMgr_IHelper.narrow(
    super._this_object(orb));
  }


} // class TCProfileMgr_IPOA
