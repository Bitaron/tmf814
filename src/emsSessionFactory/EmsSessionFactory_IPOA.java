package emsSessionFactory;


/**
* emsSessionFactory/EmsSessionFactory_IPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from emsSessionFactory.idl
* Wednesday, June 15, 2016 7:24:35 PM COT
*/


/**
   * <p>There is a single instance of the EmsSessionFactory_I.  It is the 
   * entry point to the server/EMS.
   * This instance the object reference that the client uses to connect to the 
   * server.</p>
   *
   * <p>This interface implements the version interface and will return 
   * the server IDL version when getVersion is called on it.</p>
   **/
public abstract class EmsSessionFactory_IPOA extends org.omg.PortableServer.Servant
 implements emsSessionFactory.EmsSessionFactory_IOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getEmsSession", new java.lang.Integer (0));
    _methods.put ("getVersion", new java.lang.Integer (1));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
     * This operation allows the NMS to obtain the EmsSession_I object from
     * which all managers of the EMS can be obtained.
     *
     * <br>user: The (registered) user or application that is trying 
     * to access the server, can be empty string to indicate that no 
     * authentication mechanism is implemented by the server/EMS
     * <br>password: The password of the user, can be empty string
     * <br>client: A handle to the NmsSession_I object instantiated at the 
     * NMS, to which the returned EmsSession_I object has to be associated
     * <br>emsSessionInterface: A CORBA IOR for the EmsSession_I interface
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when client is invalid<br>
     * EXCPT_ACCESS_DENIED - Raised in case of security violation<br>
     **/
       case 0:  // emsSessionFactory/EmsSessionFactory_I/getEmsSession
       {
         try {
           String user = in.read_string ();
           String password = in.read_string ();
           nmsSession.NmsSession_I client = nmsSession.NmsSession_IHelper.read (in);
           emsSession.EmsSession_IHolder emsSessionInterface = new emsSession.EmsSession_IHolder ();
           this.getEmsSession (user, password, client, emsSessionInterface);
           out = $rh.createReply();
           emsSession.EmsSession_IHelper.write (out, emsSessionInterface.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This service returns the version of the IDL that the corresponding 
     * EMS object supports.</p>
     *
     * The format of the return string is as follows:
     * <i>Release</i>.<i>Major</i>[.<i>Minor</i>] where <i>Release</i>,
     * <i>Major</i> and <i>Minor</i> are strings 
     * that contain only digits.
     * 
     * For example, 2.1 indicates release 2 and major release 1, 
     * 1.3 indicates release 1 and major release 3, and so on.
     * Note that x.y has the same meaning as x.y.0 
     * 
     * The minor digit is used for bug fixing the major release.  
     * e.g 1.2.1 is a minor release on 1.2.   
     *
     * Any changes to any IDL files must be approved by the 
     * Specification Authority.
     *
     * For TMF 814 version 2.1, the version is "2.1".
     * For TMF 814 version 3.0, the version is "3_0" or "3.0".
     *
     * <br><b>Returns</b> string: The version of the interface 
     **/
       case 1:  // mtnmVersion/Version_I/getVersion
       {
         String $result = null;
         $result = this.getVersion ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:mtnm.tmforum.org/emsSessionFactory/EmsSessionFactory_I:1.0", 
    "IDL:mtnm.tmforum.org/mtnmVersion/Version_I:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public EmsSessionFactory_I _this() 
  {
    return EmsSessionFactory_IHelper.narrow(
    super._this_object());
  }

  public EmsSessionFactory_I _this(org.omg.CORBA.ORB orb) 
  {
    return EmsSessionFactory_IHelper.narrow(
    super._this_object(orb));
  }


} // class EmsSessionFactory_IPOA
