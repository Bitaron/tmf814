package trafficDescriptor;


/**
* trafficDescriptor/TrafficDescriptorMgr_IOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from trafficDescriptor.idl
* Wednesday, June 15, 2016 7:24:43 PM COT
*/


/**
   * <p>The trafficDescriptorManager is used to gain access to operations
   * that deal with traffic descriptors </p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager() operation in Manager.</p>
   **/
public interface TrafficDescriptorMgr_IOperations  extends common.Common_IOperations
{

  /**
     * <p>This allows an NMS to request all of the trafficDescriptors that
     * are under the control of the trafficDescriptorMgr_I.</p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     * 
     * <br>unsigned long how_many: number of iterators to return in 
     * trafficDescList.
     * <br>TrafficDescriptorList_T trafficDescList: the first
     * batch of iterators.
     * <br>trafficDescriptor::TrafficDescriptorIterator_I trafficDescIt: the 
     * iterator
     * used to access the remaining traffic descriptors.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators
     *  that the EMS can support has been reached<br>
     * <br>
     **/
  void getAllTrafficDescriptors (int how_many, trafficDescriptor.TrafficDescriptorList_THolder trafficDescList, trafficDescriptor.TrafficDescriptorIterator_IHolder trafficDescIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllTrafficDescriptors, but
     * instead of returning the entire object structures, this operation returns 
     * their names.</p>
     *
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     *
     * <br>unsigned long how_many: the number of iterators to return in 
     * nameList.
     * <br>globaldefs::NamingAttributesList_T nameList: the first batch of 
     * iterator names.
     * <br>globaldefs::NamingAttributesIterator_I nameIt: the iterator used to 
     * retrieve the remaining iterator names.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getAllTrafficDescriptors.
     **/
  void getAllTrafficDescriptorNames (int how_many, globaldefs.NamingAttributesList_THolder nameList, globaldefs.NamingAttributesIterator_IHolder nameIt) throws globaldefs.ProcessingFailureException;

  /** 
     * <p>This service returns the Traffic Descriptor struct for the given tdName. 
     * The Traffic Descriptor structure contains an NVSList of traffic 
     * parameters.  The traffic parameters returned will be the parameters
     * in place on the actual Traffic Descriptor.  If there are no
     * traffic parameters, then the NVSList will be empty.</p>
     * <br>globaldefs::NamingAttributes_T tdName: name of the traffic descriptor.
     * <br>TrafficDescriptor_T td : the returned traffic descriptor.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when tdName does not reference 
     *  traficDescriptor object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when tdName references object which does 
     *  not exist<br>
     * <br>
     **/
  void getTrafficDescriptor (globaldefs.NameAndStringValue_T[] tdName, trafficDescriptor.TrafficDescriptor_THolder td) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This allows an NMS to request all of the CTPs/FTPs associated with the  
     * specified Traffic Descriptor. If there are no CTPs/FTPs which are 
     * associated with the specified Traffic Descriptor, then an empty list is 
     * returned. </p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     * 
     * <br>globaldefs::NamingAttributes_T trafficDescriptorName: the name of the 
     * Traffic Descriptor.
     * <br>unsigned long how_many: maximum number of CTPs/FTPs to return in the 
     * first batch.
     * <br>terminationPoint::TerminationPointList_T tpList: first batch of 
     * CTPs/FTPs.
     * <br>terminationPoint::TerminationPointIterator_I tpIt: iterator to 
     * access the remaining CTPs/FTPs.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when trafficDescriptrName does not reference a
     *  Traffic Descriptor object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when trafficDescriptorName references
     *  an object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators
     *  that the EMS can support has been reached<br>
     * <br>
     **/
  void getAssociatedCTPs (globaldefs.NameAndStringValue_T[] trafficDescriptorName, int how_many, terminationPoint.TerminationPointList_THolder tpList, terminationPoint.TerminationPointIterator_IHolder tpIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>The createTrafficDescriptor operation is used to create
     * a new Traffic Descriptor on the server. A Traffic 
     * Descriptor create data representing the new Traffic Descriptor is 
     * passed as input. The resulting Traffic Descriptor is 
     * returned as a result.</p>
     *
     * <br>TDCreateData_T newTDCreateData: information about the traffic
     * descriptor to be created.
     * <br>TrafficDescriptor_T newTrafficDescriptor: result of the creation.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support creation of TDs via 
     *  this interface<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised if newTDCreateData contains invalid data<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_CAPACITY_EXCEEDED - Raised when maximum number of TDs has been 
     *  reached<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
  void createTrafficDescriptor (trafficDescriptor.TDCreateData_T newTDCreateData, trafficDescriptor.TrafficDescriptor_THolder newTrafficDescriptor) throws globaldefs.ProcessingFailureException;

  /**
     * <p>The delete Traffic Descriptor operation is used to 
     * delete a Traffic Descriptor on the server. This operation is
     * idempotent. If the service is called with the
     * name of a non-existent Traffic Descriptor, it will succeed.</p>
     *
     * <br>globaldefs::NamingAttributes_T descriptorName
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support deletion of TDs via 
     *  this interface<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_OBJECT_IN_USE - Raised if there are TPs that are using
     *  the Traffic Descriptor<br>
     * EXCPT_INVALID_INPUT - Raised when the Traffic Descriptor name is 
     *  invalid<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when the Traffic Descriptor does not 
     *  exist<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
    **/
  void deleteTrafficDescriptor (globaldefs.NameAndStringValue_T[] descriptorName) throws globaldefs.ProcessingFailureException;
} // interface TrafficDescriptorMgr_IOperations
