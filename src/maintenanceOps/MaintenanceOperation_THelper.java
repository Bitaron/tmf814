package maintenanceOps;


/**
* maintenanceOps/MaintenanceOperation_THelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from maintenanceOps.idl
* Wednesday, June 15, 2016 7:24:37 PM COT
*/


/** 
   * <p>Supported maintenance operations</p>
   *
   * Valid values are:<br>
   * "FACILITY_LOOPBACK"<br>
   * "TERMINAL_LOOPBACK"<br>
   * "FACILITY_FORCED_AIS"<br>
   * "TERMINAL_FORCED_AIS"<br>
   * "FORCE_RDI"<br>
   * "SET_AS_SEGMENT_END_POINT" (ATM)<br>
   * "END_TO_END_LOOPBACK_OAM_CELL" (ATM)<br>
   * "SEGMENT_LOOPBACK_OAM_CELL" (ATM)<br>
   * "LOCAL_LOOP_QUALIFICATION" (DSL)<br>
   * "DSL_LINE_SUPERVISION" (DSL)<br>
   * "SINGLE_ENDED_LINE_TEST" (DSL)<br>
   * "DUAL_ENDED_LINE_TEST" (DSL)<br>
   * "PAYLOAD_LOOPBACK" (PDH)<br>
   * "DUAL_LOOPBACK" (PDH)<br>
   **/
abstract public class MaintenanceOperation_THelper
{
  private static String  _id = "IDL:mtnm.tmforum.org/maintenanceOps/MaintenanceOperation_T:1.0";

  public static void insert (org.omg.CORBA.Any a, String that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static String extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_string_tc (0);
      __typeCode = org.omg.CORBA.ORB.init ().create_alias_tc (maintenanceOps.MaintenanceOperation_THelper.id (), "MaintenanceOperation_T", __typeCode);
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static String read (org.omg.CORBA.portable.InputStream istream)
  {
    String value = null;
    value = istream.read_string ();
    return value;
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, String value)
  {
    ostream.write_string (value);
  }

}
