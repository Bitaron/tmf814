package maintenanceOps;


/**
* maintenanceOps/MaintenanceMgr_IOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from maintenanceOps.idl
* Wednesday, June 15, 2016 7:24:37 PM COT
*/


/**
   * <p>The MaintenanceMgr_I is used as a handle to gain access to the
   * maintenance operation functionalities of the NML-EML interface.</p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager() operation in the managerInterface 
   * parameter when the managerName "Maintenance" is used.</p>
   **/
public interface MaintenanceMgr_IOperations  extends common.Common_IOperations
{

  /** 
     * <p>This operation allows the NMS to operate and release
     * the maintenance commands that are supported by a TP.</p>
     *  
     * <br>CurrentMaintenanceOperation_T maintenanceOperation:
     * Information on the maintenance operation to perform
     * <br>MaintenanceOperationMode_T maintenanceOperationMode:
     * Indicates whether the maintenance operation should be
     * operated or released.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactical 
     *  incorrect (e.g. tpName does not reference a TP or maintenance operation is 
     *  invalid)<br>
     * EXCPT_INVALID_INPUT - Raised when tpName does not reference an TP
     * EXCPT_ENTITY_NOT_FOUND - Raised when tpName references TP object which does
     *  not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the operation is denied by the managed 
     *  element (e.g. because of the current state of the object).
     * If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_NOT_IN_VALID_STATE - Raised when the operation cannot be performed 
     *  due to state of TP object<br>
     * <br>
     **/
  void performMaintenanceOperation (maintenanceOps.CurrentMaintenanceOperation_T maintenanceOperation, maintenanceOps.MaintenanceOperationMode_T maintenanceOperationMode) throws globaldefs.ProcessingFailureException;

  /** 
     * <p>This operation allows the NMS to query the EMS to determine if 
     * any persistent maintenance commands have been invoked. 
     * This query is supported for the PTP, FTP, CTP, and ME objects.</p>
     *
     * <br>globaldefs::NamingAttributes_T tpOrMeName:
     * The name of the PTP, FTP, CTP, or ME object<br>
     * The termination point name must be explicit (a generic endpoint
     * specification may not be used in this case). See 
     * <a href=../../../supportingDocumentation/SD1-25_objectNaming.pdf >SD1-25 
     * Object Naming</a> for further details on TP naming.
     * <br>unsigned long how_many: Maximum number of maintenance operations to
     * return in the first batch.
     * <br>MaintenanceOperationList_T currentMaintenanceOperationList:
     * First batch of maintenance operations.
     * <br>CurrentMaintenanceOperationIterator_I cmoIt: Iterator to access the
     * remaining maintenance operations.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when tpOrMeName does not reference a valid 
     *  object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when tpOrMeName references an object that 
     *  does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to the managed element is 
     *  lost<br>
     * EXCPT_NOT_IN_VALID_STATE - Raised when the operation cannot be performed 
     *  due to state of TP/ME object<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when the maximum number of iterators 
     *  that the EMS can support has been reached<br>.
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getActiveMaintenanceOperations (globaldefs.NameAndStringValue_T[] tpOrMeName, int how_many, maintenanceOps.CurrentMaintenanceOperationList_THolder currentMaintenanceOperationList, maintenanceOps.CurrentMaintenanceOperationIterator_IHolder cmoIt) throws globaldefs.ProcessingFailureException;
} // interface MaintenanceMgr_IOperations
