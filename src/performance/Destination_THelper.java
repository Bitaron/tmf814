package performance;


/**
* performance/Destination_THelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from performance.idl
* Wednesday, June 15, 2016 7:24:40 PM COT
*/


/**
   * <p>Destination specification for FTP transfer of history PM data</p>
   *
   * <p>In the request for retrieval of history PM Data requests with PM data 
   * transfer using FTP, the NMS may specify the target destination for the PM 
   * Data file (operation getHistoryPMData()). Within 
   * the destination field, the hostname of the destination machine and the full 
   * path name of the target file (including the directory name and the file 
   * name) within the destination machine are specified.
   * Hostname and full path name are separated by a colon ( : ). 
   * The '/' or '\' in path name are dependent on the destination and managed by 
   * the client.</p>
   **/
abstract public class Destination_THelper
{
  private static String  _id = "IDL:mtnm.tmforum.org/performance/Destination_T:1.0";

  public static void insert (org.omg.CORBA.Any a, String that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static String extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_string_tc (0);
      __typeCode = org.omg.CORBA.ORB.init ().create_alias_tc (performance.Destination_THelper.id (), "Destination_T", __typeCode);
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static String read (org.omg.CORBA.portable.InputStream istream)
  {
    String value = null;
    value = istream.read_string ();
    return value;
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, String value)
  {
    ostream.write_string (value);
  }

}
