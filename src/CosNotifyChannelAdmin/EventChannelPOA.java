package CosNotifyChannelAdmin;


/**
* CosNotifyChannelAdmin/EventChannelPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosNotifyChannelAdmin.idl
* Wednesday, June 15, 2016 7:24:32 PM COT
*/


/**
    * An interface for the event channel.
    */
public abstract class EventChannelPOA extends org.omg.PortableServer.Servant
 implements CosNotifyChannelAdmin.EventChannelOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_MyFactory", new java.lang.Integer (0));
    _methods.put ("_get_default_consumer_admin", new java.lang.Integer (1));
    _methods.put ("_get_default_supplier_admin", new java.lang.Integer (2));
    _methods.put ("_get_default_filter_factory", new java.lang.Integer (3));
    _methods.put ("new_for_consumers", new java.lang.Integer (4));
    _methods.put ("new_for_suppliers", new java.lang.Integer (5));
    _methods.put ("get_consumeradmin", new java.lang.Integer (6));
    _methods.put ("get_supplieradmin", new java.lang.Integer (7));
    _methods.put ("get_all_consumeradmins", new java.lang.Integer (8));
    _methods.put ("get_all_supplieradmins", new java.lang.Integer (9));
    _methods.put ("get_qos", new java.lang.Integer (10));
    _methods.put ("set_qos", new java.lang.Integer (11));
    _methods.put ("validate_qos", new java.lang.Integer (12));
    _methods.put ("get_admin", new java.lang.Integer (13));
    _methods.put ("set_admin", new java.lang.Integer (14));
    _methods.put ("for_consumers", new java.lang.Integer (15));
    _methods.put ("for_suppliers", new java.lang.Integer (16));
    _methods.put ("destroy", new java.lang.Integer (17));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
         * The factory object that created this event channel object.
         */
       case 0:  // CosNotifyChannelAdmin/EventChannel/_get_MyFactory
       {
         CosNotifyChannelAdmin.EventChannelFactory $result = null;
         $result = this.MyFactory ();
         out = $rh.createReply();
         CosNotifyChannelAdmin.EventChannelFactoryHelper.write (out, $result);
         break;
       }


  /**
         * The default consumer administration object. This object has the 
         * unique identification number zero.
         */
       case 1:  // CosNotifyChannelAdmin/EventChannel/_get_default_consumer_admin
       {
         CosNotifyChannelAdmin.ConsumerAdmin $result = null;
         $result = this.default_consumer_admin ();
         out = $rh.createReply();
         CosNotifyChannelAdmin.ConsumerAdminHelper.write (out, $result);
         break;
       }


  /**
         * The default supplier administration object. This object has the 
         * unique identification number zero.
         */
       case 2:  // CosNotifyChannelAdmin/EventChannel/_get_default_supplier_admin
       {
         CosNotifyChannelAdmin.SupplierAdmin $result = null;
         $result = this.default_supplier_admin ();
         out = $rh.createReply();
         CosNotifyChannelAdmin.SupplierAdminHelper.write (out, $result);
         break;
       }


  /**
         * The default filter factory object for this event channel.
         */
       case 3:  // CosNotifyChannelAdmin/EventChannel/_get_default_filter_factory
       {
         CosNotifyFilter.FilterFactory $result = null;
         $result = this.default_filter_factory ();
         out = $rh.createReply();
         CosNotifyFilter.FilterFactoryHelper.write (out, $result);
         break;
       }


  /**
         * Creates an administration object for event consumers.
         * @parm <code>op</code> - Indicates whether the newly created
         * administration object should use AND or OR semantics when combining
         * administration object filters and proxy filters.
         * @parm <code>id</code> - The unique identifier for the administration
         * object.
         * @returns A <code>ConsumerAdmin</code> object reference.
         */
       case 4:  // CosNotifyChannelAdmin/EventChannel/new_for_consumers
       {
         CosNotifyChannelAdmin.InterFilterGroupOperator op = CosNotifyChannelAdmin.InterFilterGroupOperatorHelper.read (in);
         org.omg.CORBA.IntHolder id = new org.omg.CORBA.IntHolder ();
         CosNotifyChannelAdmin.ConsumerAdmin $result = null;
         $result = this.new_for_consumers (op, id);
         out = $rh.createReply();
         CosNotifyChannelAdmin.ConsumerAdminHelper.write (out, $result);
         CosNotifyChannelAdmin.AdminIDHelper.write (out, id.value);
         break;
       }


  /**
         * Creates an administration object for event suppliers.
         * @parm <code>op</code> - Indicates whether the newly created
         * administration object should use AND or OR semantics when combining
         * administration object filters and proxy filters.
         * @parm <code>id</code> - The unique identifier for the administration
         * object.
         * @returns A <code>SupplierAdmin</code> object reference.
         */
       case 5:  // CosNotifyChannelAdmin/EventChannel/new_for_suppliers
       {
         CosNotifyChannelAdmin.InterFilterGroupOperator op = CosNotifyChannelAdmin.InterFilterGroupOperatorHelper.read (in);
         org.omg.CORBA.IntHolder id = new org.omg.CORBA.IntHolder ();
         CosNotifyChannelAdmin.SupplierAdmin $result = null;
         $result = this.new_for_suppliers (op, id);
         out = $rh.createReply();
         CosNotifyChannelAdmin.SupplierAdminHelper.write (out, $result);
         CosNotifyChannelAdmin.AdminIDHelper.write (out, id.value);
         break;
       }


  /**
         * Get an administration object from its ID.
         * @parm <code>id</code> - A unique identifier for the administration
         * object.
         * @returns A <code>ConsumerAdmin</code> object reference.
         * @raises AdminNotFound If no administration object with that ID
         * could be found.
         */
       case 6:  // CosNotifyChannelAdmin/EventChannel/get_consumeradmin
       {
         try {
           int id = CosNotifyChannelAdmin.AdminIDHelper.read (in);
           CosNotifyChannelAdmin.ConsumerAdmin $result = null;
           $result = this.get_consumeradmin (id);
           out = $rh.createReply();
           CosNotifyChannelAdmin.ConsumerAdminHelper.write (out, $result);
         } catch (CosNotifyChannelAdmin.AdminNotFound $ex) {
           out = $rh.createExceptionReply ();
           CosNotifyChannelAdmin.AdminNotFoundHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Get an administration object from its ID.
         * @parm <code>id</code> - A unique identifier for the administration
         * object.
         * @returns A <code>SupplierAdmin</code> object reference.
         * @raises AdminNotFound If no administration object with that ID
         * could be found.
         */
       case 7:  // CosNotifyChannelAdmin/EventChannel/get_supplieradmin
       {
         try {
           int id = CosNotifyChannelAdmin.AdminIDHelper.read (in);
           CosNotifyChannelAdmin.SupplierAdmin $result = null;
           $result = this.get_supplieradmin (id);
           out = $rh.createReply();
           CosNotifyChannelAdmin.SupplierAdminHelper.write (out, $result);
         } catch (CosNotifyChannelAdmin.AdminNotFound $ex) {
           out = $rh.createExceptionReply ();
           CosNotifyChannelAdmin.AdminNotFoundHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Get all consumer administration objects.
         * @returns A sequence of administration object unique identifiers.
         */
       case 8:  // CosNotifyChannelAdmin/EventChannel/get_all_consumeradmins
       {
         int $result[] = null;
         $result = this.get_all_consumeradmins ();
         out = $rh.createReply();
         CosNotifyChannelAdmin.AdminIDSeqHelper.write (out, $result);
         break;
       }


  /**
         * Get all supplier administration objects.
         * @returns A sequence of administration object unique identifiers.
         */
       case 9:  // CosNotifyChannelAdmin/EventChannel/get_all_supplieradmins
       {
         int $result[] = null;
         $result = this.get_all_supplieradmins ();
         out = $rh.createReply();
         CosNotifyChannelAdmin.AdminIDSeqHelper.write (out, $result);
         break;
       }


  /**
         * Returns the current quality of service settings for this object.
         * @returns A sequence of name-value pairs defining the quality of 
         * service settings.
         */
       case 10:  // CosNotification/QoSAdmin/get_qos
       {
         CosNotification.Property $result[] = null;
         $result = this.get_qos ();
         out = $rh.createReply();
         CosNotification.PropertySeqHelper.write (out, $result);
         break;
       }


  /**
         * Sets the quality of service settings for this object.
         * @parm <code>qos</code> - A sequence of name-value pairs defining
         * the desired quality of service settings.
         * @raises UnsupportedQoS If the requested settings are not supported.
         */
       case 11:  // CosNotification/QoSAdmin/set_qos
       {
         try {
           CosNotification.Property qos[] = CosNotification.QoSPropertiesHelper.read (in);
           this.set_qos (qos);
           out = $rh.createReply();
         } catch (CosNotification.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           CosNotification.UnsupportedQoSHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Validates a set of quality of service requirements.
         * @parm <code>qos</code> -  A sequence of name-value pairs defining
         * quality of service settings that are to be validated.
         * @parm <code>available_qos</code> - A sequence of all additional
         * quality of service setting supported by this object.
         * @raises UnsupportedQoS If any of the setting in the input argument
         * are not supported.
         */
       case 12:  // CosNotification/QoSAdmin/validate_qos
       {
         try {
           CosNotification.Property required_qos[] = CosNotification.QoSPropertiesHelper.read (in);
           CosNotification.NamedPropertyRangeSeqHolder available_qos = new CosNotification.NamedPropertyRangeSeqHolder ();
           this.validate_qos (required_qos, available_qos);
           out = $rh.createReply();
           CosNotification.NamedPropertyRangeSeqHelper.write (out, available_qos.value);
         } catch (CosNotification.UnsupportedQoS $ex) {
           out = $rh.createExceptionReply ();
           CosNotification.UnsupportedQoSHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Returns the current administrative settings for this object.
         * @returns A sequence of name-value pairs defining the administrative 
         * settings.
         */
       case 13:  // CosNotification/AdminPropertiesAdmin/get_admin
       {
         CosNotification.Property $result[] = null;
         $result = this.get_admin ();
         out = $rh.createReply();
         CosNotification.PropertySeqHelper.write (out, $result);
         break;
       }


  /**
         * Sets the administrative settings for this object.
         * @parm <code>admin</code> - A sequence of desired name-value pairs
         * defining the administrative settings.
         * @raises UnsupportedAdmin If any of the desired setting are not
         * available.
         */
       case 14:  // CosNotification/AdminPropertiesAdmin/set_admin
       {
         try {
           CosNotification.Property admin[] = CosNotification.AdminPropertiesHelper.read (in);
           this.set_admin (admin);
           out = $rh.createReply();
         } catch (CosNotification.UnsupportedAdmin $ex) {
           out = $rh.createExceptionReply ();
           CosNotification.UnsupportedAdminHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Gets an object reference to the administration object
         * for event consumers.
         * @returns The <code>ConsumerAdmin</code> object reference.
         */
       case 15:  // CosEventChannelAdmin/EventChannel/for_consumers
       {
         CosEventChannelAdmin.ConsumerAdmin $result = null;
         $result = this.for_consumers ();
         out = $rh.createReply();
         CosEventChannelAdmin.ConsumerAdminHelper.write (out, $result);
         break;
       }


  /**
         * Gets an object reference to the administration object
         * for event suppliers.
         * @returns The <code>SupplierAdmin</code> object reference.
         */
       case 16:  // CosEventChannelAdmin/EventChannel/for_suppliers
       {
         CosEventChannelAdmin.SupplierAdmin $result = null;
         $result = this.for_suppliers ();
         out = $rh.createReply();
         CosEventChannelAdmin.SupplierAdminHelper.write (out, $result);
         break;
       }


  /**
         * Destroys this event channel and released any storage used.
         */
       case 17:  // CosEventChannelAdmin/EventChannel/destroy
       {
         this.destroy ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0", 
    "IDL:omg.org/CosNotification/QoSAdmin:1.0", 
    "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0", 
    "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public EventChannel _this() 
  {
    return EventChannelHelper.narrow(
    super._this_object());
  }

  public EventChannel _this(org.omg.CORBA.ORB orb) 
  {
    return EventChannelHelper.narrow(
    super._this_object(orb));
  }


} // class EventChannelPOA
