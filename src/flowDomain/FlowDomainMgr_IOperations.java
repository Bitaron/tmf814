package flowDomain;


/**
* flowDomain/FlowDomainMgr_IOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from flowDomain.idl
* Wednesday, June 15, 2016 7:24:36 PM COT
*/


/**
   * <p>The FlowDomainMgr_I is used to gain access to flow domains,
   * matrix flow domains, flow domain fragments and their operations.</p>
   *

   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager() operation.</p>
   **/
public interface FlowDomainMgr_IOperations  extends common.Common_IOperations
{

  /**
     * <p>This method allows an NMS to request a list of the flow domains
     * that exist in the EMS.</p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. </p>
     *
     * unsigned long <b>how_many</b>:
     * <br>Maximum number of flow domains to return in the first batch.<br>
     *
     * FDList_T <b>flowDomains</b>:
     * <br>First batch of flow domains.<br>
     *
     * FDIterator_I <b>fdIt</b>:
     * <br>Iterator to retrieve the remaining flow domains.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * <br>
     **/
  void getAllFlowDomains (int how_many, flowDomain.FDList_THolder flowDomains, flowDomain.FDIterator_IHolder fdIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation returns the flow domain structures for the flow domains
     * whose userLabel is supplied as a parameter.<br>
     * The operation does not use an iterator, since the number of flow domains
     * returned is usually expected to be 1.
     * </p>
     *
     * string <b>userLabel</b>:
     * <br>The user label of the flow domains to retrieve.<br>
     *
     * FDList_T <b>flowDomains</b>:
     * <br>The list of identified flow domains. <br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * <br>
     **/
  void getFlowDomainsByUserLabel (String userLabel, flowDomain.FDList_THolder flowDomains) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service returns a flow domain given a flow domain name.</p>
     * 
     * globaldefs::NamingAttributes_T <b>fdName</b>:
     * <br>Name of the flow domain to retrieve.<br>
     *
     * FlowDomain_T <b>flowDomain</b>:
     * <br>Flow domain structure returned.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when fdName does not reference a 
     *  flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName references a 
     *  flow domain object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
  
     * <br>
     **/
  void getFlowDomain (globaldefs.NameAndStringValue_T[] fdName, flowDomain.FlowDomain_THolder flowDomain) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation returns the flow domain structure for the (single) flow domain
     * that the Matrix Flow Domain that is supplied as a parameter is associated to.<br>
     * </p>
     *
     * in globaldefs::NamingAttributes_T  <b>mfdName</b>:
     * <br>The name of MFD.<br>
     *
     * FlowDomain_T <b>flowDomain</b>:
     * <br>The flow domain that the Matrix Flow Domain is associated to. <br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when mfdName does not reference a 
     *  matrix flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName references a 
  
     *  matrix flow domain object that does not exist<br>
  
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAssociatingFD (globaldefs.NameAndStringValue_T[] mfdName, flowDomain.FlowDomain_THolder flowDomain) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service returns the transmission parameters of a flow domain,
     * matrix flow domain, flow domain fragment or transmission descriptor, 
     * given the name of the object.
     * A set of groups of transmission parameters to be returned may be specified.</p>
     * 
     * globaldefs::NamingAttributes_T <b>name</b>:
     * <br>Name of the flow domain, matrix flow domain, flow domain fragment or transmission 
     * descriptor for which the transmission parameters shall be retrieved.<br>
     *
     * ParameterGroupsList_T <b>filter</b>:
     * <br>This filter allows to specify a set of parameter groups. Only transmission
     * parameters that belong to one of the groups specified are returned. See the
     * supporting document <a href=../../../supportingDocumentation/SD1-16_LayeredParameters.pdf > SD1-16_LayeredParameters.pdf</a> for a set of available transmission
     * parameters and their groupings. If an empty list is specified, all transmission
     * parameters are returned.<br>
     *
     * transmissionParameters::LayeredParameterList_T <b>transmissionParams</b>:
  
     * <br>A list or requested transmission parameters. For a flow domain fragment
     * only one layer is contained by the list.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when name does not reference a 
     *   valid object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when name references an 
     *  object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getTransmissionParams (globaldefs.NameAndStringValue_T[] name, String[] filter, transmissionParameters.LayeredParameterList_THolder transmissionParams) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows the NMS to request from the EMS the creation of a
     * flow domain given the parameters passed in the method. The NMS may specify
     * matrix flow domains or flow domain edge CPTPs to be associated with
     * the created flow domain.</p>
     *
     * FDCreateData_T <b>createData</b>:
     * <br>Structure describing the flow domain structure to be created.<br>
     *
     * globaldefs::NamingAttributesList_T <b>assignedCPTPs</b>:
     * <br>Identifies the list of assigned CPTPs to be associated as flow
     * domain edge CPTPs to the flow domain. This may be an empty list.
     * Associating CPTPs to the flow domain is done on a best effort basis. 
  
     * On method return the list contains the names of the CPTPs that could
     * not be associated with the flow domain. <br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     * 
     * FlowDomain_T <b>theFD</b>:
     * <br>The new created FD. The EMS is responsible for guaranteeing
     * uniqueness of the name of the FD. The name may be specified by the
     * NMS in the createData. <br>
     *
     * string <b>errorReason</b>:
     * <br>In case a "best effort" parameter could not be set or a CPTP could
     * not be associated with the flow domain an indication of the fault reason
     * is provided by the EMS.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
     *  incorrect (e.g. field of createData is invalid).<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable to execute the
     *  request because at least one of the parameters although 
     *  valid cannot be set and that parameter is identified as 
     *  "not best effort" or when a CPTP is not assigned to one of
     *  the matrix flow domains specified in the createData or when one of the
     *  specified MFDs could not be associated. <br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when at least one of the specified CPTPs or
     *  MFDs does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_OBJECT_IN_USE - Raised if a specified matrix flow domain is already
     *  associated to an existing flow domain or if the flow domain name specified by the
     *  NMS is already assigned to an existing object.<br>
     * <br>
     **/
  void createFlowDomain (flowDomain.FDCreateData_T createData, globaldefs.NamingAttributesList_THolder assignedCPTPs, subnetworkConnection.TPDataList_THolder tpsToModify, flowDomain.FlowDomain_THolder theFD, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows an NMS to request the deletion of a flow domain from
     * the EMS.</p>
     *
     * NamingAttributes_T <b>fdName</b>:
     * <br>The name of the flow domain to be deleted.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
  
     *
     * string <b>errorReason</b>:
     * <br>Specifies the fault reason if any.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactical 
     *  incorrect, i.e. fdName does not refer to a flow domain object <br>
     * EXCPT_OBJECT_IN_USE - Raised when the flow domain contains at least one
     *  flow domain fragment <br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName references an object that does 
  
     *  not exist <br>
     * EXCPT_UNABLE_TO_COMPLY - Raised if an associated flow domain edge CPTP
     *  or matrix flow domain could not be de-associated<br> 
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * <br>
     **/
  void deleteFlowDomain (globaldefs.NameAndStringValue_T[] fdName, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>The NMS invokes the modifyFlowDomain service to request from the EMS to modify an 
     * existing flow domain as specified by the parameters passed in the method.</p>
     *
  
     * globaldefs::NamingAttributes_T <b>fdName</b>:
  
     * <br>The name of the flow domain to modify.<br>
     *
     * FDModifyData_T <b>fdModifyData</b>:
     * <br>Structure describing how the flow domain should be modified. If the
     * flow domain contains already the required information nothing is done on
     * the EMS and the method returns successfully.<br>
     *
     * string <b> failedAttributes</b> :
     * The list of attributes that could not be modified.<br>
     *
     * FlowDomain_T <b>modifiedFD</b>:
     * <br>The modified flow domain.<br>
     *
     * string <b>errorReason</b>:
     * <br>Specifies the fault reason if any.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
     *  incorrect (e.g. field of fdModifyData is invalid).<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName references an object that does 
     *  not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable 
     *  to execute the request because at least one of the parameters although 
     *  valid cannot be set. <br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation, which prevents the creation of an MFD or CPTP.<br>
     * <br>
     **/
  void modifyFlowDomain (globaldefs.NameAndStringValue_T[] fdName, flowDomain.FDModifyData_T fdModifyData, flowDomain.FlowDomain_THolder modifiedFD, org.omg.CORBA.StringHolder failedAttributes, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     *<p>This service allows an NMS to request from the EMS the association
     * of one or more matrix flow domains with a flow domain.</p>
     *
     * globaldefs::NamingAttributes_T <b>fdName</b>:
     * <br>The name of the flow domain to be modified.<br>
     *
     * globaldefs::NamingAttributesList_T <b>mfdNames</b>:
     * <br>The names of the matrix flow domains to be associated with the flow domain.
     * If the list is empty nothing is done on the EMS and the method returns
     * success.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
     * string <b>errorReason</b>:
     * <br>Specifies the fault reason if any.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactical 
     *  incorrect (e.g. fdName does not refer to a flow domain object)<br>
     * EXCPT_OBJECT_IN_USE - Raised when a matrix flow domain is already
     *  associated with another flow domain <br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName or one of the mfdNames
     *  reference an object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when a matrix flow domain could not be
     *  associated<br> 
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * <br>
     **/
  void associateMFDsWithFlowDomain (globaldefs.NameAndStringValue_T[] fdName, globaldefs.NameAndStringValue_T[][] mfdNames, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     *<p>This service allows an NMS to request from the EMS the de-association
     * of one or more matrix flow domains from a flow domain.</p>
     *
     * globaldefs::NamingAttributes_T <b>fdName</b>:
     * <br>The name of the flow domain to be modified.<br>
     *
     * globaldefs::NamingAttributesList_T <b>mfdNames</b>:
     * <br>The names of the matrix flow domains to be de-associated from the flow
     * domain. If the list is empty nothing is done on the EMS and the method returns
     * success.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
     * string <b>errorReason</b>:
     * <br>Specifies the fault reason if any.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
  
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactical 
     *  incorrect (e.g. fdName does not refer to a flow domain object)<br>
     * EXCPT_OBJECT_IN_USE - Raised when a matrix flow domain to be de-associated
     *  carries traffic<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName or one of the mfdNames
     *  reference an object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when a matrix flow domain could not be
     *  de-associated, e.g. because it is not associated with the flow domain, or if
     *  a flow domain edge CPTP contained by one of the MFDs to be de-associated could
     *  not be de-associated<br> 
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * <br>
     **/
  void deAssociateMFDsFromFlowDomain (globaldefs.NameAndStringValue_T[] fdName, globaldefs.NameAndStringValue_T[][] mfdNames, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     *<p>This service allows an NMS to request from the EMS the association
     * of one or more CPTPs with a flow domain as flow domain edge CPTPs.</p>
     *
     * globaldefs::NamingAttributes_T <b>fdName</b>:
     * <br>The name of the flow domain to be modified.<br>
     *
     * globaldefs::NamingAttributesList_T <b>cptpNames</b>:
     * <br>The names of the CPTPs to be associated with the flow domain. 
     * If the list is empty nothing is done on the EMS and the method returns
     * success.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
     * string <b>errorReason</b>:
     * <br>In case a "best effort" parameter could not be set or a CPTP could
     * not be associated with the flow domain an indication of the fault reason
     * is provided by the EMS.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically
     *  incorrect (e.g. fdName does not refer to a flow domain object)<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName or one of the tpNames
     *  references an object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when a CPTP could not be associated,
     *  e.g. because it is not assigned to one of the matrix flow domains
     *  associated with the flow domain<br> 
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed
     *  element involved in this operation<br>
     * <br>
     **/
  void associateCPTPsWithFlowDomain (globaldefs.NameAndStringValue_T[] fdName, globaldefs.NameAndStringValue_T[][] cptpNames, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     *<p>This service allows an NMS to request from the EMS the de-association
     * of one or more CPTPs from a flow domain.</p>
     *
     * globaldefs::NamingAttributes_T <b>fdName</b>:
     * <br>The name of the flow domain to be modified.<br>
     *
     * globaldefs::NamingAttributesList_T <b>cptpNames</b>:
     * <br>The names of the CPTPs to be de-associated from the flow domain. If
     * the list is empty nothing is done on the EMS and the method returns
     * success.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
     * string <b>errorReason</b>:
     * <br>In case a "best effort" parameter could not be set or a CPTP could
     * not be associated with the flow domain an indication of the fault reason
     * is provided by the EMS.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
     *  incorrect (e.g. fdName does not refer to a flow domain object)<br>
     * EXCPT_OBJECT_IN_USE - Raised when a CPTP to be de-associated carries
     *  traffic, i.e. is connected to a flow domain fragment<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName or one of the cptpNames
     *  reference an object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when a CPTP could not be
     *  de-associated, e.g. because it is not associated with the flow domain<br> 
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * <br>
     **/
  void deAssociateCPTPsFromFlowDomain (globaldefs.NameAndStringValue_T[] fdName, globaldefs.NameAndStringValue_T[][] tpNames, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows an NMS to request a list of matrix flow domains
     * that are associated
     * with a specified transmission descriptor or flow domain.</p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. </p>
     *
     * globaldefs::NamingAttributes_T <b>tmdOrFdName</b>:
     * <br>Name of the transmission descriptor
     * or flow domain.<br>
     *
     * unsigned long <b>how_many</b>:
     * <br>Maximum number of matrix flow domains to return in the first batch.<br>
     *
     * MFDList_T <b>mfds</b>:
     * <br>First batch of matrix flow domains.<br>
     *
     * MFDIterator_I <b>mfdIt</b>:
  
     * <br>Iterator to retrieve the remaining matrix flow domains.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when tmdOrFdName does not reference a 
     *  transmission descriptor or flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when tmdOrFdName references an object that 
     *  does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when the maximum number of iterators 
     *  that the EMS can support has been reached<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAllAssociatedMFDs (globaldefs.NameAndStringValue_T[] tmdOrFdName, int how_many, flowDomain.MFDList_THolder mfds, flowDomain.MFDIterator_IHolder mfdIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows an NMS to request a list of matrix flow domains
     * that are supported by a specified managed element or supported
     * with a specified equipment.</p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. </p>
     *
     * globaldefs::NamingAttributes_T <b>holderName</b>:
     * <br>Name of the managed element or equipment.<br>
     *
     * unsigned long <b>how_many</b>:
     * <br>Maximum number of matrix flow domains to return in the first batch.<br>
     *
     * MFDList_T <b>mfds</b>:
     * <br>First batch of matrix flow domains.<br>
     *
     * MFDIterator_I <b>mfdIt</b>:
     * <br>Iterator to retrieve the remaining matrix flow domains.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when holderName does not reference a 
     *  managed element or equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when holderName references an object that 
  
     *  does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when the maximum number of iterators 
     *  that the EMS can support has been reached<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAllSupportedMFDs (globaldefs.NameAndStringValue_T[] holderName, int how_many, flowDomain.MFDList_THolder mfds, flowDomain.MFDIterator_IHolder mfdIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service returns a matrix flow domain given a matrix flow domain
     * name.</p>
     * 
     * globaldefs::NamingAttributes_T <b>mfdName</b>:
     * <br>Name of the matrix flow domain to retrieve.<br>
     *
     * MatrixFlowDomain_T <b>mfd</b>:
     * <br>Matrix flow domain structure returned.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when mfdName does not reference a 
     *  matrix flow domain object<br>    
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName references a 
     *  matrix flow domain object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getMFD (globaldefs.NameAndStringValue_T[] mfdName, flowDomain.MatrixFlowDomain_THolder mfd) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service returns the matrix flow domain to which is assigned
     * a given "CPTP" termination point.</p>
     * 
     * globaldefs::NamingAttributes_T <b>cptpName</b>:
     * <br>Name of the "CPTP" termination point to which the MFD is assigned.<br>
     *
     * MatrixFlowDomain_T <b>mfd</b>:
     * <br>Matrix flow domain structure returned.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when cptpName does not reference a 
  
     *  "CPTP" termination point <br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName references a 
     *  termination point object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAssigningMFD (globaldefs.NameAndStringValue_T[] cptpName, flowDomain.MatrixFlowDomain_THolder mfd) throws globaldefs.ProcessingFailureException;

  /**
  
     * <p>Using this service the NMS requests from the EMS the creation of a
     * matrix flow domain given the parameters passed in the method. The NMS
     * must specify CPTPs to be associated with the created matrix flow domain.
     * </p>
     *
  
     * MFDCreateData_T <b>createData</b>:
     * <br>Structure describing the matrix flow domain structure to be created.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
     * MatrixFlowDomain_T <b>theMFD</b>:
     * <br>The new created matrix flow domain. The EMS is responsible for guaranteeing
     * uniqueness of the name of the matrix flow domain. The name may be specified
     * by the NMS in the createData. <br>
     *
     * string <b>errorReason</b>:
     * <br> Specifies the creation error(s) if any. <br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
     *  incorrect (e.g. field of createData is invalid).<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable to execute the
     *  request because at least one of the parameters although valid cannot be set
     *  or if an unassigned CPTP could not be assigned <br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_OBJECT_IN_USE - Raised if a specified CPTP is already associated to
     *  an existing matrix flow domain or if the name for the matrix flow domain as
     *  specified by the NMS is already assigned to an existing object.<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to the managed element
     *  that shall contain the MFD<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when one of the provided TPs  
     *  does not exist<br>
     * <br>
     **/
  void createMFD (flowDomain.MFDCreateData_T createData, subnetworkConnection.TPDataList_THolder tpsToModify, flowDomain.MatrixFlowDomain_THolder theMFD, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows an NMS to request the deletion of a matrix flow domain
     * from the EMS.</p>
     *
     * NamingAttributes_T <b>mfdName</b>:
     * <br>The name of the matrix flow domain to be deleted.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
  
     * string <b>errorReason</b>:
     * <br>In case a "best effort" parameter could not be set 
     * an indication of the fault reason
     * is provided by the EMS.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
  
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically
     *  incorrect (e.g. mfdName does not refer to a matrix flow domain object)<br>
     * EXCPT_OBJECT_IN_USE - Raised when the matrix flow domain is associated with a flow domain<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName references an object that does 
     *  not exist<br>
     * EXCPT_ACCESS_DENIED - Raised if the matrix flow domain is fixed<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to the managed element
     *  containing the MFD<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void deleteMFD (globaldefs.NameAndStringValue_T[] mfdName, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This method allows a modification of a matrix flow domain as requested by
     * the NMS.</p>
     *
     * globaldefs::NamingAttributes_T <b>mfdName</b>:
     * <br>The name of the matrix flow domain to modify.<br>
     *
     * MFDModifyData_T <b>mfdModifyData</b>:
     * <br>Structure describing how the matrix flow domain shall be modified. This
     * parameter contains the parameters that are not best effort. If the modification
     * of one of the parameters fails an exception will be thrown.<br>
     *
     * string <b> failedAttributes</b> :
     * The list of attributes that could not be modified.<br>
     *
     * MatrixFlowDomain_T <b>newMFD</b>:
     * <br>The modified matrix flow domain.<br>
     *
     * string <b>errorReason</b>:
     * <br>In case a "best effort" parameter could not be set the fault reason
     * is provided by the EMS.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
     *  incorrect (e.g. field of mfdModifyData is invalid).<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName references an object that does 
     *  not exist<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation.<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void modifyMFD (globaldefs.NameAndStringValue_T[] mfdName, flowDomain.MFDModifyData_T mfdModifyData, flowDomain.MatrixFlowDomain_THolder newMFD, org.omg.CORBA.StringHolder failedAttributes, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     *<p>This service allows an NMS to request from the EMS the assignment
     * of one or more "CPTP" TPs to a matrix flow domain.</p>
     *
     * globaldefs::NamingAttributes_T <b>mfdName</b>:
     * <br>The name of the matrix flow domain to be modified.<br>
  
     *
     * globaldefs::NamingAttributesList_T <b>tpNames</b>:
     * <br>The names of the CPTPs to be assigned to the matrix flow domain.
     * If the list is empty or all CPTPs are already assigned to the matrix flow domain
     * nothing is done on the EMS and the method returns success.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
     * string <b>errorReason</b>:
     * <br>Specifies the fault reason if any.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
     *  incorrect (e.g. mfdName does not refer to a matrix flow domain object)<br>
     * EXCPT_OBJECT_IN_USE - Raised when a CPTP is already assigned
     *  to another matrix flow domain<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName or one of the tpNames
     *  reference an object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when a CPTP could not be
     *  assigned<br> 
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to the managed element
     *  containing the MFD<br>
     * <br>
     **/
  void assignCPTPsToMFD (globaldefs.NameAndStringValue_T[] mfdName, globaldefs.NameAndStringValue_T[][] tpNames, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     *<p>This service allows an NMS to request from the EMS to unassign
     * one or more CPTPs from a matrix flow domain.</p>
     *
     * globaldefs::NamingAttributes_T <b>mfdName</b>:
     * <br>The name of the matrix flow domain to be modified.<br>
     *
     * globaldefs::NamingAttributesList_T <b>tpNames</b>:
     * <br>The names of the CPTPs to be unassigned from the matrix flow domain.
     * If no CPTP has been specified, the method returns success.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
     * string <b>errorReason</b>:
     * <br>Specifies the fault reason if any.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically
     *  incorrect (e.g. mfdName does not refer to a matrix flow domain object)<br>
     * EXCPT_OBJECT_IN_USE - Raised when a CPTP to be unassigned carries
     *  traffic or is connected to a call<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName or one of the tpNames
     *  references an object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when a CPTP could not be
     *  unassigned, e.g. because it is not assigned to the matrix flow domain<br> 
     * EXCPT_NOT_IN_VALID_STATE - Raised when at least one of the specified CPTPs
     *  is in the "unassigned" "Port TP role state"<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to the managed element
     *  that contains the matrix flow domain<br>
     * <br>
     **/
  void unassignCPTPsFromMFD (globaldefs.NameAndStringValue_T[] mfdName, globaldefs.NameAndStringValue_T[][] tpNames, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>Using this service the NMS requests from the EMS the creation of a
     * FTP given the parameters passed in the method. 
     * </p>
     *
     * FTPCreateData_T <b>createData</b>:
     * <br>Structure describing the floating termination point to be created.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: A list of TPs and parameters to apply, 
     * updated to provide the resulting parameters. 
     *
     * <br> Applying transmission parameters is best-effort (where not stated 
     * otherwise) and the resulting values of the transmission parameters are 
     * provided in the updated tpsToModify parameter. If the parameter is "not 
     * best effort" then the whole operation will be rejected and the appropriate 
     * exception thrown (see exceptions below).</p>
     *
     * <br> This parameter may be used by the NMS to determine
     * the number of server layer CTPs to create for the specified FTP.
     * An empty list means that the number of server layer CTPs 
  
     * is determined by the EMS. <br>
     * 
     *
     * TerminationPoint_T <b>theFTP</b>:
     * <br>The new floating termination point. The EMS is responsible for guaranteeing
     * uniqueness of the name of the FTP. The name may be specified
     * by the NMS in the createData. <br>
     *
     * string <b>errorReason</b>:
     * <br> Specifies the creation error(s) if any.
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
  
     *  incorrect (e.g. field of createData is invalid).<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS (or NE) does not support explicit creation 
     * of CPTPs. <br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when the specified equipment does not exist.
     * <br>
     * EXCPT_CAPACITY_EXCEEDED - Raised when The Equipment does not have the resources 
     * (e.g., not enough overall back-plane bandwidth, not enough usable timeslots, etc.)<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to the managed element
     *  that shall contain the FTP<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_OBJECT_IN_USE - Raised when the object identified in the request is
     *  currently in use<br>
     * <br>
     **/
  void createFTP (flowDomain.FTPCreateData_T createData, subnetworkConnection.TPDataList_THolder tpsToModify, terminationPoint.TerminationPoint_THolder theFTP, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows an NMS to request the deletion of a floating termination point.</p>
     *
     * NamingAttributes_T <b>tpName</b>:
     * <br>The name of the termination point to be deleted.<br>
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
     *
     * string <b>errorReason</b>:
     * <br>In case the operation completes without exception, 
     * but some error occurred or part of the request could not be filled,
     * an indication of the fault reason
     * is provided by the EMS.<br>
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactical 
     *  incorrect, i.e. tpName does not refer to a "CPTP" termination point object <br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when tpName references an object that does 
     *  not exist <br>
     * EXCPT_OBJECT_IN_USE - Raised when the CPTP is an ELL endpoint.
     *  <br>
     * EXCPT_UNABLE_TO_COMPLY - Raised if the TP is is not deleteable.
     *  <br>  
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * <br>
     **/
  void deleteFTP (globaldefs.NameAndStringValue_T[] ftpName, subnetworkConnection.TPDataList_THolder tpsToModify, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service returns the structures of all CPTPs, 
     * or all flow domain edge CPTPs, or all flow domain internal CPTPs,
        *  associated with a 
     * flow domain. </p>
     * 
     * globaldefs::NamingAttributes_T <b>fdName</b>:
     * <br>Name of the flow domain whose associated CPTPs shall be returned. <br>
     *
     * CPTP_Role_T	<b>cptpRole</b>:
        * <br> Which CPTPs to return : flow domain edge, flow domain internal, or all CPTPs.<br>
     *
     * unsigned long <b>how_many</b>:
     * <br>Maximum number of CPTPs to return in the first batch.<br>
     *
     * terminationPoint::TerminationPointList_T <b>cptpList</b>:
     * <br>First batch of CPTPs.<br>
     *
  
     * terminationPoint::TerminationPointIterator_I <b>cptpIt</b>:
     * <br>Iterator to retrieve the remaining CPTPs.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when fdName does not reference a
     *  flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName references an object that 
     *  does not exist<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAllCPTPs (globaldefs.NameAndStringValue_T[] fdName, flowDomain.CPTP_Role_T cptpRole, int how_many, terminationPoint.TerminationPointList_THolder cptpList, terminationPoint.TerminationPointIterator_IHolder cptpIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service returns the structures of all CPTPs assigned to 
     * a matrix flow domain. </p>
     * 
     * globaldefs::NamingAttributes_T <b>mfdName</b>:
     * <br>Name of the matrix flow domain whose assigned CPTPs shall be returned. <br>
     *
     * unsigned long <b>how_many</b>:
     * <br>Maximum number of CPTPs to return in the first batch.<br>
     *
     * terminationPoint::TerminationPointList_T <b>cptpList</b>:
     * <br>First batch of CPTPs.<br>
     *
     * terminationPoint::TerminationPointIterator_I <b>cptpIt</b>:
     * <br>Iterator to retrieve the remaining CPTPs.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when mfdName does not reference a
     *  matrix flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName references an object that 
     *  does not exist<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAllAssignedCPTPs (globaldefs.NameAndStringValue_T[] mfdName, int how_many, terminationPoint.TerminationPointList_THolder cptpList, terminationPoint.TerminationPointIterator_IHolder cptpIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service returns the structures of all "CPTP" TPs that are potentially 
     * able to be assigned to a matrix flow domain </p>
     * 
     * <p> Potentially means: The CPTPs are on the same equipment or same rack with 
     * backplane connectivity as the NMS specified MFD. It is irrelevant whether the CPTPs 
     * are already assigned to an MFD or not. </p>
     * 
     * globaldefs::NamingAttributes_T <b>mfdName</b>:
     * <br>Name of the matrix flow domain whose potential CPTPs shall be returned.<br>
     *
     * unsigned long <b>how_many</b>:
     * <br>Maximum number of CPTPs to return in the first batch.<br>
     *
     * terminationPoint::TerminationPointList_T <b>cptpList</b>:
     * <br>First batch of CPTPs.<br>
     *
     * terminationPoint::TerminationPointIterator_I <b>cptpIt</b>:
     * <br>Iterator to retrieve the remaining CPTPs.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
  
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when mfdName does not reference a
     *  matrix flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when mfdName references an object that 
     *  does not exist<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
  
     *  that the EMS can support has been reached<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAllAssignableCPTPs (globaldefs.NameAndStringValue_T[] mfdName, int how_many, terminationPoint.TerminationPointList_THolder cptpList, terminationPoint.TerminationPointIterator_IHolder cptpIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This allows an NMS to request a list of flow domain fragments for the
     * specified flow domain at the specified connectivityRates.
     * </p>
     *
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator.</p>
     *
     * globaldefs::NamingAttributes_T <b>fdName</b>: 
     * <br>Name of the flow domain.<br>
     *
     * transmissionParameters::LayerRateList_T <b>connectivityRateList</b>:
     * <br>List of rates of the flow domain fragments to be reported.
     * If an empty list is specified, then all flow domain fragments of all 
     * rates are to be reported.<br>
     *
     * unsigned long <b>how_many</b>:
     * <br>Maximum number of flow domai fragments to be reported in the first
     * batch.<br>
     *
     * flowDomainFragment::FDFrList_T <b>fdfrList</b>:
     * <br>First batch of flow domain fragments.<br>
     *
     * flowDomainFragment::FDFrIterator_I <b>fdfrIt</b>:
     * <br>Iterator to retrieve the remaining flow domain fragment.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when fdName does not reference a
     *  flow domain object or connectivityRateList contains undefined 
     *  values<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdName references an object that 
     *  does not exist<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached<br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAllFDFrs (globaldefs.NameAndStringValue_T[] fdName, int how_many, short[] connectivityRateList, flowDomainFragment.FDFrList_THolder fdfrList, flowDomainFragment.FDFrIterator_IHolder fdfrIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows the NMS to request from the EMS the flow domain
     * fragments that are connected to a specified flow point or CPTP. In case
     * of a flow point as input parameter not more than one flow domain fragment
     * will be returned.</p>
     *
     * globaldefs::NamingAttributes_T <b>tpName</b>:
     * <br>The name of the flow point or CPTP for which the connected flow
  
     * domain fragments shall be returned.<br>
     *
     * unsigned long <b>how_many</b>:
     * <br>Maximum number of flow domain fragments to be reported in the first
     * batch.<br>    *
     * flowDomainFragment::FDFrList_T <b>fdfrList</b>:
     * <br>First batch of flow domain fragments.<br>
     *
     * flowDomainFragment::FDFrIterator_I <b>fdfrIt</b>:
     * <br>Iterator to retrieve the remaining flow domain fragments.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when tpName does not reference a flow point
     *  or CPTP<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised tpName references an object that does not
  
     *  exist<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached<br>
  
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getFDFrsWithTP (globaldefs.NameAndStringValue_T[] cptpName, int how_many, flowDomainFragment.FDFrList_THolder fdfrList, flowDomainFragment.FDFrIterator_IHolder fdfrIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation returns the flow domain fragment structures for the
     * flow domain fragments whose userLabel is supplied as a parameter.<br>
  
     * The operation does not use an iterator, since the number of flow domain    * fragments returned is usually expected to be 1.
  
     * </p>
     *
     * in string <b>userLabel</b>:
     * <br>The user label of the flow domain fragments to retrieve.<br>
     *
     * FDFrList_T <b>fdfrs</b>:
     * <br>The list of identified flow domain fragments. <br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
    * <br>
     **/
  void getFDFrsByUserLabel (String userLabel, flowDomainFragment.FDFrList_THolder fdfrs) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation returns the flow domain fragment structure 
     * for the flow domain fragment whose name is supplied as a parameter.</p>
     *
     * globaldefs::NamingAttributes_T <b>fdfrName</b>:
     * <br>The name of the flow domain fragment to retrieve.<br>
     *
     * flowDomainFragment::FlowDomainFragment_T <b>fdfr</b>:
     * <br>The flow domain fragment structure retrieved.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     * failure<br>
     * EXCPT_INVALID_INPUT - Raised when fdfrName does not reference a 
     *  flow domain fragment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdfrName references a flow domain
     *  fragment object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
    * <br>
     **/
  void getFDFr (globaldefs.NameAndStringValue_T[] fdfrName, flowDomainFragment.FlowDomainFragment_THolder fdfr) throws globaldefs.ProcessingFailureException;

  /**
     * <p>The NMS invokes the createAndActivateFDFr service to request the EMS to create
     * and activate a flow domain fragment given the parameters passed in the method.</p>
     *
     * flowDomainFragment::FDFrCreateData_T <b>createData</b>:
     * <br>Structure describing the FDFr structure to be created. Setting of
     * connectionless parameters is best effort (except where specified otherwise 
     * for a particular parameter).<br>
     *
     * ConnectivityRequirement_T <b>connectivityRequirement</b>:
     * <br> For a "connectivity-aware" EMS, this parameter shall identify 
     * the requested operation mode in case not all FPs have potential connectivity 
     * to one another. If the EMS is not connectivity-aware, this parameter is ignored.
     * <br>
     *
     * globaldefs::NamingAttributesList_T <b>aEnd</b>:
     * <br> A list of of CPTP names that delimit the FDFr and characterize 
     * its edges (entrance and/or exit points). As a result of creating the FDFr,
     * FPs are created as clients of the FD Edge CPTPs. 
     * <br> In case of a unidirectional 
     * FDFr this attribute contains the list of <b>source</b> FD Edge CPTPs. 
     * <br> In case of a 
     * bidirectional FDFr this attribute may be combined with the zEnd TPs 
     * attribute to obtain all the FD Edge CPTPs that are associated to the 
     * FDFr. 
     * <br> (N.B. For a bidirectional point to point FDFr it is suggested, but not 
     * mandatory, to put one TP in the aEnd and one in the zEnd, as with SNCs and 
     * TLs. For a multipoint FDFr, or a point-to-point FDFr that may be expanded 
     * to multipoint, it is suggested to put all the TPs in the aEnd.) 
     * <br>
     *
     * globaldefs::NamingAttributesList_T <b>zEnd</b>:
     * <br> In case of a unidirectional FDFr this attribute contains the list of 
     * <b>sink</b> FD Edge CPTPs that delimit the FDFr and characterize its edges
     *  (exit points). 
     * <br> As a result of creating the FDFr, FPs are created as 
     * clients of the FD Edge CPTPs. 
     * <br> In case of a bidirectional FDFr this attribute 
     * may be combined with the aEnd TPs attribute to obtain all the FD Edge CPTPs 
     * that are associated to the FDFr.
     * <br>
     *
     * globaldefs::NamingAttributesList_T <b>internalTPs</b>:
     * <br>A (possibly empty) list of internal CPTP names that must be included 
     * in the route of the FDFr. As a result of creating the FDFr, 
     * FPs are created as clients of the internal CPTPs.
     * <br>
     *
     * flowDomainFragment::MatrixFlowDomainFragmentList_T <b>mfdfrs</b>:
     * <br> An optional (possibly empty) list of MFDFrs that make up the route 
     * of the FDFr. This attribute may be omitted if the FDFr is routed by the network. 
     * As a result of creating the FDFr, MFDFrs are created in the various MFDs.
     * <br>
     *
     * subnetworkConnection::TPDataList_T <b>tpsToModify</b>: 
     * <br>A list of TPs and parameters to apply. On method return the list is 
     * updated to provide the resulting parameters. The list may refer to
     * flow points that are being created during the createAndActivateFDFr request
     * or to the containing CPTPs. <br>
     * 
     * flowDomainFragment::FlowDomainFragment_T <b>theFDFr</b>:
     * <br>The new created and activated flow domain fragment. The EMS is responsible
  
     * for guaranteeing uniqueness of the name of the flow domain fragment. <br>
     *
     * globaldefs::NamingAttributesList_T <b>notConnectableCPTPList</b>:
     * <br>The list of Connectionless Port Termination Points that could not 
     * be connected. <br> 
     *
     * globaldefs::NamingAttributesList_T <b>parameterProblemsTPList</b>:
     * <br>The list of Connectionless Port Termination Points and Flow Points FPs
     * for which only best-effort transmission parameters could not be set. <br>
     *
     * string <b>errorReason</b>:
  
     * <br>In case a "best effort" parameter could not be set or a flow point could not
     * be connected an indication of the fault reason is provided by the EMS.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
     *  incorrect (e.g. field of createData is invalid).<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when one of the provided CPTPs does not exist.
     * <br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met; the specified user label is currently being used.<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable 
     *  to execute the request because of one of the following conditions:<ul> 
     * <li> at least one of the parameters although 
     *  valid cannot be set and that parameter is identified as 
     *  "not best effort"; </li>
     *  <li> the name specified by the NMS exists already in the EMS;</li>
     *  <li> The FP total connectivity constraint is not met;</li>
     * <li> Unrecognized mapping criteria;</li>
  
     * <li> Frames map to more than one FDFr;</li>
     * <li> The FDFr would have less than two FPs.</li>
     * </ul>  <br>
     * EXCPT_NE_COMM_LOSS - Raised in case of Communications failure between the EMS 
  
     * and the ME(s). 
     * <br>
     * EXCPT_NOT_IN_VALID_STATE - Raised when the state of the specified object is such 
     * that the EMS cannot perform the request.. 
     * <br>
     * EXCPT_TP_INVALID_ENDPOINT - Raised when the specified TP does not exist or cannot be created. <br>
     * <br>
     **/
  void createAndActivateFDFr (flowDomainFragment.FDFrCreateData_T createData, flowDomain.ConnectivityRequirement_T connectivityRequirement, globaldefs.NameAndStringValue_T[][] aEnd, globaldefs.NameAndStringValue_T[][] zEnd, globaldefs.NamingAttributesList_THolder internalTPs, flowDomainFragment.MatrixFlowDomainFragmentList_THolder mfdfrs, subnetworkConnection.TPDataList_THolder tpsToModify, flowDomainFragment.FlowDomainFragment_THolder theFDFr, globaldefs.NamingAttributesList_THolder notConnectableCPTPList, globaldefs.NamingAttributesList_THolder parameterProblemsTPList, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     *<p>This service allows an NMS to request the deactivation and deletion of a flow
     * domain fragment from a flow domain.</p>
     *
  
     * <br>globaldefs::NamingAttributes_T <b>fdfrName</b>:
     * <br>The name of the flow domain fragment to be deactivated and deleted.<br>
     *
  
     * <br>subnetworkConnection::TPDataList_T <b>tpsToModify</b>: 
     * <br>A list of TPs and parameters to apply. On method return the list is 
     * updated to provide the resulting parameters. The list may refer only to
     * TPs that take part in the flow domain fragment deletion process. 
     * <br>
     *
     * <br>flowDomainFragment::FlowDomainFragment_T <b>theFDFr</b>: 
     * <br>The deactivated and deleted flow domain fragment.<br>
     * 
     * string <b>errorReason</b>:
     * <br>Specifies the fault reason if any.<br>
     
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactical 
     *  incorrect (e.g. fdfrName does not refer to an FDFr object)<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdfrName references an object that does 
     *  not exist<br>
     * EXCPT_ACCESS_DENIED - Raised if the EMS does not allow the NMS to delete the
     *  flow domain fragment, e.g. if the flow domain fragment is fixed <br>
     * EXCPT_NE_COMM_LOSS - Raised when communcation is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void deactivateAndDeleteFDFr (globaldefs.NameAndStringValue_T[] fdfrName, subnetworkConnection.TPDataList_THolder tpsToModify, flowDomainFragment.FlowDomainFragment_THolder theFDFr, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p>The NMS invokes the modifyFDFr service to request the EMS to modify an 
     * existing flow domain fragment as specified by the parameters passed in the
     * method.</p>
     *
     * globaldefs::NamingAttributes_T <b>fdfrName</b>:
     * <br>The name of the flow domain fragment to modify.<br>
     *
     * flowDomainFragment::FDFrModifyData_T <b>fdfrModifyData</b>:
     * <br>Structure describing how the flow domain fragment should be modified.
     * Modification of connectionless parameters is best effort (except where 
     * specified otherwise for a particular parameter).<br>
     *
     * ConnectivityRequirement_T <b>connectivityRequirement</b>:
     * <br> For a "connectivity-aware" EMS, this parameter shall identify 
     * the requested operation mode in case not all FPs have potential connectivity 
     * to one another. 
     * <br> This parameter is only significant if the fdfrModifyData parameter
     * contains flow points to be added or removed, otherwise it shall be ignored
     * by the EMS. If the EMS is not connectivity-aware, this parameter is also ignored.
     * <br>
     *
     * subnetworkConnection::TPDataList_T <b>tpsToModify</b>: 
     * <br>A list of TPs and parameters to apply. On method return the list is 
     * updated to provide the resulting parameters. The list may refer to
     * flow points or to the containing CPTPs. <br>
     *
     * globaldefs::NamingAttributesList_T <b>failedTPList</b>:
     * <br> The list of Connectionless Port Termination Points or Flow Points
     * (requested in the fdfrModifyData parameter) 
     * that could not be added or could not be removed, 
     * whichever was requested.<br>
     *
     * globaldefs::NamingAttributesList_T <b>parameterProblemsTPList</b>:
     * <br> The list of Connectionless Port Termination Points and Flow Points FPs
     *  for which only best-effort transmission parameters could not be set. <br>
     *
     * flowDomainFragment::FlowDomainFragment_T <b>newFDFr</b>:
     * <br>The modified flow domain fragment.<br>
     *
     * string <b>errorReason</b>:
     * <br>In case a "best effort" parameter could not be set an indication of the 
     * fault reason is provided by the EMS.<br>
     *
     * <b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically 
     *  incorrect (e.g. field of fdfrModifyData is invalid).<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdfrName references an object that does 
     *  not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable 
     *  to execute the request because at least one of the parameters although 
     *  valid cannot be set and that parameter is identified as 
     *  "not best effort" or if the EMS cannot meet the GradesOfImpact requested by
     *  the NMS <br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_ACCESS_DENIED - Raised if the EMS does not allow the NMS to modify the
     *  flow domain fragment, e.g. if the flow domain fragment is fixed <br>
     * EXCPT_NOT_IN_VALID_STATE - Raised when at least one of the specified CPTPs
     *  is in the "unassigned" "Port TP role state"<br>
     * <br>
     **/
  void modifyFDFr (globaldefs.NameAndStringValue_T[] fdfrName, flowDomainFragment.FDFrModifyData_T fdfrModifyData, flowDomain.ConnectivityRequirement_T connectivityRequirement, subnetworkConnection.TPDataList_THolder tpsToModify, globaldefs.NamingAttributesList_THolder failedTPList, globaldefs.NamingAttributesList_THolder parameterProblemsTPList, flowDomainFragment.FlowDomainFragment_THolder newFDFr, org.omg.CORBA.StringHolder errorReason) throws globaldefs.ProcessingFailureException;

  /**
     * <p> 
     * This service returns a list of TopologicalLinks which are terminated at the Flow Domain whose name is 
     * passed as a parameter.  </p>
     *
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf > SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     * 
     * <p>For details on how topologicalLinks should be modelled see
     * <a href=../../../supportingDocumentation/SD1-18_layers.pdf >
     * SD1-18 Functional Modelling Concepts</a>.</p>
     * 
     * <br>globaldefs::NamingAttributes_T flowDomainName: The name of the 
     * Flow Domain.
     * <br>unsigned long how_many: Maximum number of topological links to 
     * return in the first batch.
     * <br>topologicalLink::TopologicalLinkList_T topoList: First batch of 
     * topological links.
     * <br>topologicalLink::TopologicalLinkIterator_I topoIt: Iterator to 
     * retrieve the remaining
     * topological links.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when flowDomainName does not reference a 
     *  FlowDomain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when flowDomainName references an object that 
  
     *  does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getAllTopologicalLinksOfFD (globaldefs.NameAndStringValue_T[] flowDomainName, int how_many, topologicalLink.TopologicalLinkList_THolder topoList, topologicalLink.TopologicalLinkIterator_IHolder topoIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service returns the route for the FDFr whose name is specified 
     * as a parameter. 
     * It is only used for systems where the route is provisioned by the NMS
     * (e.g., it is not useful for Ethernet networks using GVRP).</p>
     *
     * <br>globaldefs::NamingAttributes_T fdfrName: The name of the FDFr.
     * <br> flowDomainFragment::FDFrRoute_T route: The route of the FDFr.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when fdfrName does not reference a 
     *  FDFr object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when fdfrName references an FDFr object that 
     *  does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication is lost to a managed element
     *  involved in this operation<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getFDFrRoute (globaldefs.NameAndStringValue_T[] fdfrName, flowDomainFragment.FDFrRoute_THolder route) throws globaldefs.ProcessingFailureException;
} // interface FlowDomainMgr_IOperations
