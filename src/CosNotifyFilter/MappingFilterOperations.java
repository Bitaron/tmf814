package CosNotifyFilter;


/**
* CosNotifyFilter/MappingFilterOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosNotifyFilter.idl
* Wednesday, June 15, 2016 7:24:33 PM COT
*/


/**
    * Interface for a mapping filter.
    */
public interface MappingFilterOperations 
{

  /**
         * The constraint grammer used by this filter.
         */
  String constraint_grammar ();

  /**
         * The data type of the property value that this filter was designed
         * to affect.
         */
  org.omg.CORBA.TypeCode value_type ();

  /**
         * The output value for any match operation that returns true.
         */
  org.omg.CORBA.Any default_value ();

  /**
         * Associates one or more mapping constraints with this filter object.
         * @parm <code>constraint_list</code> - List of mapping constraints to
         * be associated with filter.
         * @returns A list with ID for each of the added mapping constraints.
         * @raises InvalidConstraint If any of the mapping constraints
         * are invalid.
         * @raises InvalidValue If any of the constraints have a typecode
         * that is different from the <code>value_type</code> attribute.
         */
  CosNotifyFilter.MappingConstraintInfo[] add_mapping_constraints (CosNotifyFilter.MappingConstraintPair[] pair_list) throws CosNotifyFilter.InvalidConstraint, CosNotifyFilter.InvalidValue;

  /**
         * Delete or modify mapping constraints on this filter object.
         * @parm <code>del_list</code> - List of mapping constraints to delete.
         * @parm <code>modify_list</code> - List of constraints to modify.
         * @raises InvalidConstraint If any of the constraints in the
         * modify_list input sequences are invalid.
         * @raises InvalidValue If any of the constraints have a typecode
         * that is different from the <code>value_type</code> attribute.
         * @raises ConstraintNotFound If a constraint in either
         * of the two input sequences was not found.
         */
  void modify_mapping_constraints (int[] del_list, CosNotifyFilter.MappingConstraintInfo[] modify_list) throws CosNotifyFilter.InvalidConstraint, CosNotifyFilter.InvalidValue, CosNotifyFilter.ConstraintNotFound;

  /**
         * Return a list of mapping constraints for this filter object
         * based on IDs.
         * @parm <code>id_list</code> - List of mapping constraint IDs.
         * @returns A list of mapping constraints for the IDs in the
         * input sequence.
         * @raises ConstraintNotFound If a mapping constraint was not found.
         */
  CosNotifyFilter.MappingConstraintInfo[] get_mapping_constraints (int[] id_list) throws CosNotifyFilter.ConstraintNotFound;

  /**
         * Return a list of all mapping constraints for this filter object.
         * @returns A list of all mapping constraints.
         */
  CosNotifyFilter.MappingConstraintInfo[] get_all_mapping_constraints ();

  /**
         * Removes all mapping constraints defined on this filter object.
         */
  void remove_all_mapping_constraints ();

  /**
         * Destroys this mapping filter object.
         */
  void destroy ();

  /**
         * Evaluates the input event against the filter constraints defined
         * on this filter object. If the event satisfies one of the filter
         * constraints TRUE is returned, otherwise FALSE is returned.
         * @parm <code>filterable_data</code> - The event to evaluate.
         * @parm <code>result_to_set</code> - Value of a constraint that
         * matches the event or <code>default_value</code> if the event
         * does not match any constraints.
         * @returns TRUE if event matches any constraint, FALSE otherwise.
         * raises UnsupportedFilterableData If the event specified by
         * <code>filterable_data</code> contains data that this filter is
         * not designed to handle.
         */
  boolean match (org.omg.CORBA.Any filterable_data, org.omg.CORBA.AnyHolder result_to_set) throws CosNotifyFilter.UnsupportedFilterableData;

  /**
         * Evaluates the input event against the filter constraints defined
         * on this filter object. If the event satisfies one of the filter
         * constraints TRUE is returned, otherwise FALSE is returned.
         * @parm <code>filterable_data</code> - The structured event to evaluate.
         * @parm <code>result_to_set</code> - Value of a constraint that
         * matches the event or <code>default_value</code> if the event
         * does not match any constraints.
         * @returns TRUE if event matches any constraint, FALSE otherwise.
         * raises UnsupportedFilterableData If the event specified by
         * <code>filterable_data</code> contains data that this filter is
         * not designed to handle.
         */
  boolean match_structured (CosNotification.StructuredEvent filterable_data, org.omg.CORBA.AnyHolder result_to_set) throws CosNotifyFilter.UnsupportedFilterableData;

  /**
         * Evaluates the input event against the filter constraints defined
         * on this filter object. If the event satisfies one of the filter
         * constraints TRUE is returned, otherwise FALSE is returned.
         * @parm <code>filterable_data</code> - The typed event to evaluate.
         * @parm <code>result_to_set</code> - Value of a constraint that
         * matches the event or default_value if the event does not match
         * any constraints.
         * @returns TRUE if event matches any constraint, FALSE otherwise.
         * raises UnsupportedFilterableData If the event specified by
         * <code>filterable_data</code> contains data that this filter is
         * not designed to handle.
         */
  boolean match_typed (CosNotification.Property[] filterable_data, org.omg.CORBA.AnyHolder result_to_set) throws CosNotifyFilter.UnsupportedFilterableData;
} // interface MappingFilterOperations
