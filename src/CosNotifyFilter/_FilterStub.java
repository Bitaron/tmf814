package CosNotifyFilter;


/**
* CosNotifyFilter/_FilterStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosNotifyFilter.idl
* Wednesday, June 15, 2016 7:24:33 PM COT
*/


/**
    * Interface for a filter.
    */
public class _FilterStub extends org.omg.CORBA.portable.ObjectImpl implements CosNotifyFilter.Filter
{


  /**
         * The constraint grammer used by this filter.
         */
  public String constraint_grammar ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_constraint_grammar", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return constraint_grammar (        );
            } finally {
                _releaseReply ($in);
            }
  } // constraint_grammar


  /**
         * Associates one or more constraints with this filter object.
         * @parm <code>constraint_list</code> - List of constraints to be
         * associated with filter.
         * @returns A list with ID for each of the added constraints.
         * @raises InvalidConstraint If any of the constraints are invalid.
         */
  public CosNotifyFilter.ConstraintInfo[] add_constraints (CosNotifyFilter.ConstraintExp[] constraint_list) throws CosNotifyFilter.InvalidConstraint
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("add_constraints", true);
                CosNotifyFilter.ConstraintExpSeqHelper.write ($out, constraint_list);
                $in = _invoke ($out);
                CosNotifyFilter.ConstraintInfo $result[] = CosNotifyFilter.ConstraintInfoSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))
                    throw CosNotifyFilter.InvalidConstraintHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return add_constraints (constraint_list        );
            } finally {
                _releaseReply ($in);
            }
  } // add_constraints


  /**
         * Delete or modify constraints on this filter object.
         * @parm <code>del_list</code> - List of constraints to delete.
         * @parm <code>modify_list</code> - List of constraints to modify.
         * @raises InvalidConstraint If any of the constraints in the
         * <code>modify_list</code> input sequences are invalid.
         * @raises ConstraintNotFound If a constraint in either
         * of the two input sequences was not found.
         */
  public void modify_constraints (int[] del_list, CosNotifyFilter.ConstraintInfo[] modify_list) throws CosNotifyFilter.InvalidConstraint, CosNotifyFilter.ConstraintNotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("modify_constraints", true);
                CosNotifyFilter.ConstraintIDSeqHelper.write ($out, del_list);
                CosNotifyFilter.ConstraintInfoSeqHelper.write ($out, modify_list);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))
                    throw CosNotifyFilter.InvalidConstraintHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))
                    throw CosNotifyFilter.ConstraintNotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                modify_constraints (del_list, modify_list        );
            } finally {
                _releaseReply ($in);
            }
  } // modify_constraints


  /**
         * Return a list of constraints for this filter object based on IDs.
         * @parm <code>id_list</code> - List of constraint IDs.
         * @returns A list of constraints for the IDs in the input sequence.
         * @raises ConstraintNotFound If a constraint was not found.
         */
  public CosNotifyFilter.ConstraintInfo[] get_constraints (int[] id_list) throws CosNotifyFilter.ConstraintNotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_constraints", true);
                CosNotifyFilter.ConstraintIDSeqHelper.write ($out, id_list);
                $in = _invoke ($out);
                CosNotifyFilter.ConstraintInfo $result[] = CosNotifyFilter.ConstraintInfoSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))
                    throw CosNotifyFilter.ConstraintNotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_constraints (id_list        );
            } finally {
                _releaseReply ($in);
            }
  } // get_constraints


  /**
         * Return a list of all constraints for this filter object.
         * @returns A list of all constraints.
         */
  public CosNotifyFilter.ConstraintInfo[] get_all_constraints ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_all_constraints", true);
                $in = _invoke ($out);
                CosNotifyFilter.ConstraintInfo $result[] = CosNotifyFilter.ConstraintInfoSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_all_constraints (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_all_constraints


  /**
         * Removes all constraints defined on this filter object.
         */
  public void remove_all_constraints ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("remove_all_constraints", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                remove_all_constraints (        );
            } finally {
                _releaseReply ($in);
            }
  } // remove_all_constraints


  /**
         * Destroys this filter object.
         */
  public void destroy ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("destroy", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                destroy (        );
            } finally {
                _releaseReply ($in);
            }
  } // destroy


  /**
         * Evaluates the input event against the filter constraints defined
         * on this filter object. If the event satisfies one of the filter
         * constraints TRUE is returned, otherwise FALSE is returned.
         * @parm <code>filterable_data</code> - The event to evaluate.
         * @returns TRUE if event matches any constraint, FALSE otherwise.
         * raises UnsupportedFilterableData If the event specified by
         * <code>filterable_data</code> contains data that this filter is
         * not designed to handle.
         */
  public boolean match (org.omg.CORBA.Any filterable_data) throws CosNotifyFilter.UnsupportedFilterableData
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("match", true);
                $out.write_any (filterable_data);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))
                    throw CosNotifyFilter.UnsupportedFilterableDataHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return match (filterable_data        );
            } finally {
                _releaseReply ($in);
            }
  } // match


  /**
         * Evaluates the input event against the filter constraints defined
         * on this filter object. If the event satisfies one of the filter
         * constraints TRUE is returned, otherwise FALSE is returned.
         * @parm <code>filterable_data</code> - The structured event to evaluate.
         * @returns TRUE if event matches any constraint, FALSE otherwise.
         * raises UnsupportedFilterableData If the event specified by
         * <code>filterable_data</code> contains data that this filter is
         * not designed to handle.
         */
  public boolean match_structured (CosNotification.StructuredEvent filterable_data) throws CosNotifyFilter.UnsupportedFilterableData
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("match_structured", true);
                CosNotification.StructuredEventHelper.write ($out, filterable_data);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))
                    throw CosNotifyFilter.UnsupportedFilterableDataHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return match_structured (filterable_data        );
            } finally {
                _releaseReply ($in);
            }
  } // match_structured


  /**
         * Evaluates the input event against the filter constraints defined
         * on this filter object. If the event satisfies one of the filter
         * constraints TRUE is returned, otherwise FALSE is returned.
         * @parm <code>filterable_data</code> - The typed event to evaluate.
         * @returns TRUE if event matches any constraint, FALSE otherwise.
         * raises UnsupportedFilterableData If the event specified by
         * <code>filterable_data</code> contains data that this filter is
         * not designed to handle.
         */
  public boolean match_typed (CosNotification.Property[] filterable_data) throws CosNotifyFilter.UnsupportedFilterableData
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("match_typed", true);
                CosNotification.PropertySeqHelper.write ($out, filterable_data);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))
                    throw CosNotifyFilter.UnsupportedFilterableDataHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return match_typed (filterable_data        );
            } finally {
                _releaseReply ($in);
            }
  } // match_typed


  /**
         * Attach a callback object to this filter that will be notified
         * each time the constraints on this filter are modified.
         * @parm <code>callback</code> - A callback object reference of type
         * NotifySubscribe.
         * @returns A ID which is unique for the newly attached object.
         */
  public int attach_callback (CosNotifyComm.NotifySubscribe callback)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attach_callback", true);
                CosNotifyComm.NotifySubscribeHelper.write ($out, callback);
                $in = _invoke ($out);
                int $result = CosNotifyFilter.CallbackIDHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return attach_callback (callback        );
            } finally {
                _releaseReply ($in);
            }
  } // attach_callback


  /**
         * Detach a callback object from this filter.
         * @parm <code>callback</code> - ID of the callback object to detach.
         * @raises CallbackNotFound If the ID does not correspond to any
         * attached callback object reference.
         */
  public void detach_callback (int callback) throws CosNotifyFilter.CallbackNotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("detach_callback", true);
                CosNotifyFilter.CallbackIDHelper.write ($out, callback);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosNotifyFilter/CallbackNotFound:1.0"))
                    throw CosNotifyFilter.CallbackNotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                detach_callback (callback        );
            } finally {
                _releaseReply ($in);
            }
  } // detach_callback


  /**
         * Returns a list of callback objects attached to this filter.
         * @returns List of callback object IDs.
         */
  public int[] get_callbacks ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_callbacks", true);
                $in = _invoke ($out);
                int $result[] = CosNotifyFilter.CallbackIDSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_callbacks (        );
            } finally {
                _releaseReply ($in);
            }
  } // get_callbacks

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosNotifyFilter/Filter:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _FilterStub
