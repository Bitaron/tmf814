package transmissionDescriptor;


/**
* transmissionDescriptor/TransmissionDescriptorMgr_IPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from transmissionDescriptor.idl
* Wednesday, June 15, 2016 7:24:43 PM COT
*/


/**
   * <p>The transmissionDescriptorManager is used to gain access to operations
   * that deal with Transmission Descriptor.</p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager()  operation in Manager.</p>
   **/
public abstract class TransmissionDescriptorMgr_IPOA extends org.omg.PortableServer.Servant
 implements transmissionDescriptor.TransmissionDescriptorMgr_IOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getAllTransmissionDescriptors", new java.lang.Integer (0));
    _methods.put ("getAllTransmissionDescriptorNames", new java.lang.Integer (1));
    _methods.put ("getTransmissionDescriptor", new java.lang.Integer (2));
    _methods.put ("getAssociatedTPs", new java.lang.Integer (3));
    _methods.put ("createTransmissionDescriptor", new java.lang.Integer (4));
    _methods.put ("deleteTransmissionDescriptor", new java.lang.Integer (5));
    _methods.put ("modifyTransmissionDescriptor", new java.lang.Integer (6));
    _methods.put ("validateTMDAssignmentToObject", new java.lang.Integer (7));
    _methods.put ("setTMDAssociation", new java.lang.Integer (8));
    _methods.put ("setNativeEMSName", new java.lang.Integer (9));
    _methods.put ("setUserLabel", new java.lang.Integer (10));
    _methods.put ("setOwner", new java.lang.Integer (11));
    _methods.put ("getCapabilities", new java.lang.Integer (12));
    _methods.put ("setAdditionalInfo", new java.lang.Integer (13));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
     * <p>This allows an NMS to request all of the transmissionDescriptors that
  
     * are under the control of the transmissionDescriptorMgr_I.</p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     * 
     * <br>unsigned long how_many: number of iterators to return in 
     * transmissionDescList.
     * <br>transmissionDescriptor::TransmissionDescriptorList 
     * transmissionDescList: the first batch of iterators.
     * <br>transmissionDescriptor::TransmissionDescriptorIterator_I 
     * transmissionDescIt: the iterator used to access the remaining Transmission 
     * Descriptors.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators
     *  that the EMS can support has been reached<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
    * <br>
     **/
       case 0:  // transmissionDescriptor/TransmissionDescriptorMgr_I/getAllTransmissionDescriptors
       {
         try {
           int how_many = in.read_ulong ();
           transmissionDescriptor.TransmissionDescriptorList_THolder transmissionDescList = new transmissionDescriptor.TransmissionDescriptorList_THolder ();
           transmissionDescriptor.TransmissionDescriptorIterator_IHolder transmissionDescIt = new transmissionDescriptor.TransmissionDescriptorIterator_IHolder ();
           this.getAllTransmissionDescriptors (how_many, transmissionDescList, transmissionDescIt);
           out = $rh.createReply();
           transmissionDescriptor.TransmissionDescriptorList_THelper.write (out, transmissionDescList.value);
           transmissionDescriptor.TransmissionDescriptorIterator_IHelper.write (out, transmissionDescIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllTransmissionDescriptors, but
     * instead of returning the entire object structures, this operation returns 
     * their names.</p>
     *
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     *
     * <br>unsigned long how_many: the number of iterators to return in 
     * nameList.
     * <br>globaldefs::NamingAttributesList_T nameList: the first batch of 
     * iterator names.
     * <br>globaldefs::NamingAttributesIterator_I nameIt: the iterator used to 
     * retrieve the remaining iterator names.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     *  As for getAllTransmissionDescriptors.
  
     **/
       case 1:  // transmissionDescriptor/TransmissionDescriptorMgr_I/getAllTransmissionDescriptorNames
       {
         try {
           int how_many = in.read_ulong ();
           globaldefs.NamingAttributesList_THolder nameList = new globaldefs.NamingAttributesList_THolder ();
           globaldefs.NamingAttributesIterator_IHolder nameIt = new globaldefs.NamingAttributesIterator_IHolder ();
           this.getAllTransmissionDescriptorNames (how_many, nameList, nameIt);
           out = $rh.createReply();
           globaldefs.NamingAttributesList_THelper.write (out, nameList.value);
           globaldefs.NamingAttributesIterator_IHelper.write (out, nameIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p>This service returns the Transmission Descriptor struct for the given 
     * tmdName. The Transmission Descriptor structure contains an NVSList of 
     * traffic parameters.  The traffic parameters returned will be the parameters
     * in place on the actual Transmission Descriptor.  If there are no
     * traffic parameters, then the NVSList will be empty.</p>
     * <br>globaldefs::NamingAttributes_T tmdName: name of the Transmission 
     * Descriptor.
     * <br>TransmissionDescriptor_T tmd : the returned Transmission Descriptor.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when tmdName does not reference 
     *  trasmissionDescriptor object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when tmdName references object which does 
     *  not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
       case 2:  // transmissionDescriptor/TransmissionDescriptorMgr_I/getTransmissionDescriptor
       {
         try {
           globaldefs.NameAndStringValue_T tmdName[] = globaldefs.NamingAttributes_THelper.read (in);
           transmissionDescriptor.TransmissionDescriptor_THolder tmd = new transmissionDescriptor.TransmissionDescriptor_THolder ();
           this.getTransmissionDescriptor (tmdName, tmd);
           out = $rh.createReply();
           transmissionDescriptor.TransmissionDescriptor_THelper.write (out, tmd.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This allows an NMS to request all of the TPs associated with the  
     * specified Transmission Descriptor. If there are no TPs which are 
     * associated with the specified Transmission Descriptor, then an empty list 
     * is returned. </p>
  
     * 
     * <p>In order to allow the NMS to deal with a large number of objects
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     * 
     * <br>globaldefs::NamingAttributes_T transmissionDescriptorName: the name of 
     * the Transmission Descriptor.
     * <br>unsigned long how_many: maximum number of TPs to return in the 
     * first batch.
     * <br>terminationPoint::TerminationPointList_T tpList: first batch of 
     * TPs.
     * <br>terminationPoint::TerminationPointIterator_I tpIt: iterator to 
     * access the remaining TPs.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when transmissionDescriptrName does not 
     *  reference a Transmission Descriptor object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when transmissionDescriptorName references
     *  an object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators
     *  that the EMS can support has been reached<br>
     * <br>
     **/
       case 3:  // transmissionDescriptor/TransmissionDescriptorMgr_I/getAssociatedTPs
       {
         try {
           globaldefs.NameAndStringValue_T transmissionDescriptorName[] = globaldefs.NamingAttributes_THelper.read (in);
           int how_many = in.read_ulong ();
           terminationPoint.TerminationPointList_THolder tpList = new terminationPoint.TerminationPointList_THolder ();
           terminationPoint.TerminationPointIterator_IHolder tpIt = new terminationPoint.TerminationPointIterator_IHolder ();
           this.getAssociatedTPs (transmissionDescriptorName, how_many, tpList, tpIt);
           out = $rh.createReply();
           terminationPoint.TerminationPointList_THelper.write (out, tpList.value);
           terminationPoint.TerminationPointIterator_IHelper.write (out, tpIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The createTransmissionDescriptor operation is used to create
     * a new Transmission Descriptor on the server. A Transmission Descriptor 
     * Create Data structure, representing the new Transmission Descriptor, is 
     * passed as input. The resulting Transmission Descriptor is 
     * returned as a result.</p>
     *
     * <br>TMDCreateData_T newTMDCreateData: information about the Transmission 
     * Descriptor to be created.
     * <br>TransmissionDescriptor_T newTransmissionDescriptor: result of the 
     * creation.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support creation of TMDs via 
     *  this interface<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised if newTMDCreateData contains invalid data<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_CAPACITY_EXCEEDED - Raised when maximum number of Transmission 
     *  Descriptors has been reached<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
       case 4:  // transmissionDescriptor/TransmissionDescriptorMgr_I/createTransmissionDescriptor
       {
         try {
           transmissionDescriptor.TMDCreateData_T newTMDCreateData = transmissionDescriptor.TMDCreateData_THelper.read (in);
           transmissionDescriptor.TransmissionDescriptor_THolder newTransmissionDescriptor = new transmissionDescriptor.TransmissionDescriptor_THolder ();
           this.createTransmissionDescriptor (newTMDCreateData, newTransmissionDescriptor);
           out = $rh.createReply();
           transmissionDescriptor.TransmissionDescriptor_THelper.write (out, newTransmissionDescriptor.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The delete Transmission Descriptor operation is used to 
     * delete a Transmission Descriptor on the server. This operation is
     * idempotent. If the service is called with the
     * name of a non-existent Transmission Descriptor, it will succeed.</p>
     *
     * <br>globaldefs::NamingAttributes_T transmissionDescriptorName:
     * The name of the TransmissionDescriptor to be deleted.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support deletion of TMDs via 
     *  this interface<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_OBJECT_IN_USE - Raised if there are TPs or Matrix Flow Domains 
     *  that are using the Transmission Descriptor<br>
     * EXCPT_INVALID_INPUT - Raised when input parameter is syntactical incorrect.
     * EXCPT_ENTITY_NOT_FOUND - Raised when the Transmission Descriptor to be 
     *  deleted does not exist.
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
    **/
       case 5:  // transmissionDescriptor/TransmissionDescriptorMgr_I/deleteTransmissionDescriptor
       {
         try {
           globaldefs.NameAndStringValue_T transmissionDescriptorName[] = globaldefs.NamingAttributes_THelper.read (in);
           this.deleteTransmissionDescriptor (transmissionDescriptorName);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The modifyTransmissionDescriptor operation is used to modify a
     * Transmission Descriptor (TMD) in the EMS.
     *. The resulting Transmission Descriptor is 
     * returned as a result.</p>
     *
     * <p> When transmission parameters are modified, this will automatically 
     * modify the corresponding parameters in all associated TPs/MFDs on a best 
     * effort basis. TPs/MFDs whose parameters could not be modified shall be 
     * returned by the EMS. </p>
     *
     * <p> Note: Only the modified parameters will be updated in the TPs/MFDs;
     * i.e., the TMD parameter/value list may be inconsistent with the corresponding 
     * parameter/value list of the associated TPs/MFDs. </p>
     *
     * <br>globaldefs::NamingAttributes_T tmdName: The name of the Transmission 
     * Descriptor to be modified.
     *
     * <br>TMDModifyData_T tmdModifyData: Information about the Transmission 
     * Descriptor to be modified.
     *
     * TPDataList_T <b>tpsToModify</b>: in: The list of TPs with associated 
     * parameters to be applied. out: The list of TPs with associated 
     * applied parameters. <br>
  
     * <br>TransmissionDescriptor_T modifiedTransmissionDescriptor: result of the 
     * modification.
     *
     * <br> globaldefs::NamingAttributesList_T failedMEList: the names of all
     * TMD associated MEs that could not be reached by the EMS. 
     *
     * <br> globaldefs::NamingAttributesList_T failedTPsMFDsList: the names of all
     * TPs and MFDs that could not be changed to the new parameter values due to
     * some error reasons.
     *
     * <br>string errorReason: In case a "best effort" parameter could not be set 
     * an indication of the fault reason is provided by the EMS. 
     *
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support modification of TMDs via 
     *  this interface<br>
  
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised if tmdModifyData contains invalid data<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when tmdName references object which does 
     *  not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
       case 6:  // transmissionDescriptor/TransmissionDescriptorMgr_I/modifyTransmissionDescriptor
       {
         try {
           globaldefs.NameAndStringValue_T tmdName[] = globaldefs.NamingAttributes_THelper.read (in);
           transmissionDescriptor.TMDModifyData_T tmdModifyData = transmissionDescriptor.TMDModifyData_THelper.read (in);
           subnetworkConnection.TPDataList_THolder tpsToModify = new subnetworkConnection.TPDataList_THolder ();
           tpsToModify.value = subnetworkConnection.TPDataList_THelper.read (in);
           transmissionDescriptor.TransmissionDescriptor_THolder modifiedTransmissionDescriptor = new transmissionDescriptor.TransmissionDescriptor_THolder ();
           modifiedTransmissionDescriptor.value = transmissionDescriptor.TransmissionDescriptor_THelper.read (in);
           globaldefs.NamingAttributesList_THolder failedMEList = new globaldefs.NamingAttributesList_THolder ();
           globaldefs.NamingAttributesList_THolder failedTPsMFDsList = new globaldefs.NamingAttributesList_THolder ();
           org.omg.CORBA.StringHolder errorReason = new org.omg.CORBA.StringHolder ();
           this.modifyTransmissionDescriptor (tmdName, tmdModifyData, tpsToModify, modifiedTransmissionDescriptor, failedMEList, failedTPsMFDsList, errorReason);
           out = $rh.createReply();
           subnetworkConnection.TPDataList_THelper.write (out, tpsToModify.value);
           transmissionDescriptor.TransmissionDescriptor_THelper.write (out, modifiedTransmissionDescriptor.value);
           globaldefs.NamingAttributesList_THelper.write (out, failedMEList.value);
           globaldefs.NamingAttributesList_THelper.write (out, failedTPsMFDsList.value);
           out.write_string (errorReason.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This service validates the TMD state
     * of the specified TP, MFD or FDFr object identified by ObjectName.</p>
     *
     * <p>It first verifies the existence of the assigned TMD
  
     * and then compares the transmission parameters of the TMD and object,
     * and the "additional TP info" parameters of the TMD with the additional
     * info parameters of the object.</p>
     *
     * <p>If a TMD parameter is not present as an object parameter or is present 
     * but with a different value, this is called a "parameter mismatch", and the 
     * TMD state will take the value "mismatch".  The service returns the current
     * TMD state and all mismatched transmission or "additional TP info"
     * parameters of the TMD (which should mostly be none) as its output.</p>
     *
     * <br>globaldefs::NamingAttributes_T objectName:
     * the TP, MFD or FDFr object whose TMD assignment shall be verified
     *
     * <br>string tmdAssignmentState: the TMD state (s) of the object
     * as determined by the verification procedure;
     *
     * <br>transmissionParameters::LayeredParameterList_T transmissionParams:
     * a "delta" list of mismatched TMD transmission parameters, or empty. See
     * <a href=../../../supportingDocumentation/SD1-16_LayeredParameters.pdf > 
     * SD1-16_LayeredParameters.pdf</a>
     * Layered Transmission Parameters</a> for more details.
     *
     * <br>globaldefs::NVSList_T additionalTPInfo: a "delta" list
     * of mismatched "additional TP info" parameters, or empty
  
     *
  
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the entire request is not supported 
     * by the EMS or the request with the specified input parameters 
     * is not supported. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal
     *  failure (see errorReason attribute of ProcessingFailureException())<br>
  
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed <br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when the communication to the managed
     *  element containing objectName is lost<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable to 
     *  execute the request<br>
     * <br>
     **/
       case 7:  // transmissionDescriptor/TransmissionDescriptorMgr_I/validateTMDAssignmentToObject
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           org.omg.CORBA.StringHolder objectAssignmentState = new org.omg.CORBA.StringHolder ();
           transmissionParameters.LayeredParameterList_THolder transmissionParams = new transmissionParameters.LayeredParameterList_THolder ();
           globaldefs.NVSList_THolder additionalTPInfo = new globaldefs.NVSList_THolder ();
           this.validateTMDAssignmentToObject (objectName, objectAssignmentState, transmissionParams, additionalTPInfo);
           out = $rh.createReply();
           out.write_string (objectAssignmentState.value);
           transmissionParameters.LayeredParameterList_THelper.write (out, transmissionParams.value);
           globaldefs.NVSList_THelper.write (out, additionalTPInfo.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This service associates/un-associates a TransmissionDescriptor (TMD) 
     * to/from a TP or MFD object. </p>
     * 
     * <br>The association of a TMD to an an object
     * by this operation amounts to a forced overwriting of the layered 
     * transmission parameters of the object by the layered transmission 
     * parameters of the TMD and to a forced overwriting of the additional info 
     * parameters of the object by the additional TP info parameters of the TMD. 
     * 
     * <br> When parameters of the TMD are already present as parameters of the 
     * object, the current object parameter values are overwritten by the TMD 
     * parameter values. When current parameters of the object are not present as 
     * parameters of the TMD, the current parameters are left unchanged. 
     * 
     * <br> An associated TMD is 
     * un-associated when no name is provided for the transmissionDescriptorName 
     * input parameter. The un-association of a TMD from an object has no effect 
     * on the other parameters of the object, i.e. the other layered transmission
     *  parameters and additional info parameters of the object remain 
     * unchanged. 
     * 
     * <br> Consistency rules:<ol> 
     * <li> When a TMD is assigned to an object this assignment is called
     *  consistent if whenever a TMD transmission parameter is also present as an 
     * object transmission parameter or a TMD additional TP info parameter is also 
     * present as an object additional info parameter, the common parameters 
     * of the TMD and object have the same values. </li>
     * <li> The degree of consistency of a TMD assignment to an object 
     * is determined by the TMD state of the object. </li>
     * </ol> <br>
     * 
     * globaldefs::NamingAttributes_T <b>tmdName</b>:
     * The name of the TransmissionDescriptor to associate to the object. 
     * NULL means that an associated TransmissionDescriptor has to be 
     * un-associated from the object. <br>
     * 
     * TPorMFDorFDFr_T <b>tPorMFDorFDFr</b>:The TP, MFD or FDFr object.
     * 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised when EMS does not support  
     * this operation. <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS  
     * internal failure. <br>
     * EXCPT_INVALID_INPUT - Raised when any input parameter is syntactically  
     * incorrect. <br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when the TransmissionDescriptor  
     * to be assigned does not exist. <br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when transmission parameter values  
     * could not be configured in the MFD. <br>
     * EXCPT_NE_COMM_LOSS - Raised when communication to managed element 
     * is lost. <br>
     * <br>
     **/
       case 8:  // transmissionDescriptor/TransmissionDescriptorMgr_I/setTMDAssociation
       {
         try {
           globaldefs.NameAndStringValue_T tmdName[] = globaldefs.NamingAttributes_THelper.read (in);
           transmissionDescriptor.TPorMFDorFDFr_THolder tPorMFDorFDFr = new transmissionDescriptor.TPorMFDorFDFr_THolder ();
           tPorMFDorFDFr.value = transmissionDescriptor.TPorMFDorFDFr_THelper.read (in);
           this.setTMDAssociation (tmdName, tPorMFDorFDFr);
           out = $rh.createReply();
           transmissionDescriptor.TPorMFDorFDFr_THelper.write (out, tPorMFDorFDFr.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The nativeEMSName is owned by the EMS.  It represents how an EMS user 
     * addresses an object on the EMS GUI.  The EMS may or may not support 
     * changing this value.</p>
     *
     * <p>When an object is created by the EMS, the EMS selects the nativeEMSName 
     * for the object.</p>
     *
     * <p>When an object is created by an NMS, the NMS specifies the userLabel for  
     * the object. If the EMS supports setting of nativeEMSNames, the 
     * nativeEMSName should be set to the same value as the userLabel.  If the EMS 
     * does not support setting of nativeEMSNames, or if the nativeEMSName has 
     * constraints that the userLabel does not satisfy, the EMS selects the 
     * nativeEMSName for the object.</p>
     *
     * <p>After an object has been created, the nativeEMSName may be changed by 
     * the NMS, if the EMS supports this functionality, using the setNativeEMSName 
     * operation.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName
     * <br> string nativeEMSName
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the nativeEMSName can not be set for 
     *  the specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is lost
     * <br>
     **/
       case 9:  // common/Common_I/setNativeEMSName
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String nativeEMSName = in.read_string ();
           this.setNativeEMSName (objectName, nativeEMSName);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The userLabel is owned by the NMSes.  It is a string assigned by an NMS 
     * to an object. The difference between the userLabel and the NamingAttributes 
     * name is that the userLabel is an attribute of the objects that 
     * may be "set" by the NMS through well defined interfaces (setUserLabel).</p>
     *
     * <p>When an object is created by an NMS, the NMS specifies the userLabel for 
     * the object.</p>
     *
     * <p>When an object is created by the EMS, the EMS sets the userLabel to the 
     * nativeEMSName.</p>
     *
     * <p>Once an object is created, the userLabel may only be changed by an NMS 
     * through the setUserLabel operation.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName: Name of the object for 
     *  which to change the userLabel.
     * <br> string userLabel: New user label to assign to the object
     * <br> boolean enforceUniqueness: Specifies whether or not userLabel should 
     * be checked for uniqueness amongst objects of the same class within the EMS.  
     * If true, then the operation will fail if userLabel is already in use.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the userLabel can not be set for the 
     *  specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * <br>
     **/
       case 10:  // common/Common_I/setUserLabel
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String userLabel = in.read_string ();
           boolean enforceUniqueness = in.read_boolean ();
           this.setUserLabel (objectName, userLabel, enforceUniqueness);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p>This service sets the owner attribute of the specified object.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName
     * <br> string owner
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the owner can not be set for the 
     *  specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 11:  // common/Common_I/setOwner
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String owner = in.read_string ();
           this.setOwner (objectName, owner);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p>This service retrieves the capabilities of the manager.
     * All non-specified capabilities are assumed to be unsupported.</p>
     *
     * <br> CapabilityList_T capabilities
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, and cannot determine the reason it could not comply, it may raise this exception. <br>
     **/
       case 12:  // common/Common_I/getCapabilities
       {
         try {
           common.CapabilityList_THolder capabilities = new common.CapabilityList_THolder ();
           this.getCapabilities (capabilities);
           out = $rh.createReply();
           common.CapabilityList_THelper.write (out, capabilities.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This service sets the additional info attribute
     * of the object identified by objectName. This operation should be used
     * to set both vendor specific attributes as well as the attributes that
     * are formally defined in this interface specification. See <a 
     * href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     * Additional Information Usage</a> for further details.</p>
     *
     * <p>As an input only the list of parameters to be changed, removed, or
     * added shall be provided.  If an entry is to be removed, "-" shall
     * be specified as a value.  If a parameter is specified that is currently
     * not part of the additionalInfo attribute of the specified object
     * that parameter is added by the EMS with the specified value.
     * The EMS may reject removal and addition requests, however.</p>
     *
     * <p> The operation is best effort (except where specified otherwise for a 
     * particular parameter).  The output specifies the
     * values which were actually set.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName: the managed object
     * whose additional info parameters are intended to get modified
     *
     * <br> globaldefs::NVSList_T additionalInfo: list of parameters
     * to be changed, added, or removed (input), updated to provide the
     * actually changed or added parameters (output)
     *
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this
     *  service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal
     *  failure (see errorReason attribute of ProcessingFailureException())<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed,
     *  raised when an input parameter is syntactical incorrect and raised when a 
     *  parameter is identified as only "settable" using a "specific operation" in 
     *  the <a href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     *  Additional Information Usage</a> document<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when the communication to the managed
     *  element containing or hosting objectName is lost<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable 
     *  to execute the request because at least one of the parameters although 
     *  valid can not be set and that parameter is identified as "not best effort" 
     *  in the <a href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     *  Additional Information Usage</a> document)<br>
     * <br>
  
     **/
       case 13:  // common/Common_I/setAdditionalInfo
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           globaldefs.NVSList_THolder additionalInfo = new globaldefs.NVSList_THolder ();
           additionalInfo.value = globaldefs.NVSList_THelper.read (in);
           this.setAdditionalInfo (objectName, additionalInfo);
           out = $rh.createReply();
           globaldefs.NVSList_THelper.write (out, additionalInfo.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:mtnm.tmforum.org/transmissionDescriptor/TransmissionDescriptorMgr_I:1.0", 
    "IDL:mtnm.tmforum.org/common/Common_I:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public TransmissionDescriptorMgr_I _this() 
  {
    return TransmissionDescriptorMgr_IHelper.narrow(
    super._this_object());
  }

  public TransmissionDescriptorMgr_I _this(org.omg.CORBA.ORB orb) 
  {
    return TransmissionDescriptorMgr_IHelper.narrow(
    super._this_object(orb));
  }


} // class TransmissionDescriptorMgr_IPOA
