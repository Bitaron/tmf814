package guiCutThrough;


/**
* guiCutThrough/GuiCutThroughMgr_IOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from guiCutThrough.idl
* Wednesday, June 15, 2016 7:24:37 PM COT
*/


/**
   * <p>The GuiCutThroughMgr_I is used to access the GUI Cut-Through data
   * available at the EMS and launch an NMS display of the EMS GUI.</p>
   *
   * <p>A handle to this interface is gained via the
   * emsSession::EmsSession_I::getManager() operation in the managerInterface 
   * parameter when the managerName "GuiCutThrough" is used.</p>
   **/
public interface GuiCutThroughMgr_IOperations  extends common.Common_IOperations
{

  /**
     * <p>This allows an NMS to request the GUI Cut-Through
     * information from the EMS.</p>
     *
     * <p>The interface will include two different operation modes, client 
     * launch and server launch.</p> 
     *
     * <p>EMS support of the client launch is mandatory and the client launch 
     * itself is handled outside this interface.
     * The EMS should, to the best of its abilities, provide sufficient 
     * information in the response to enable the NMS to launch a 
     * GUI Cut-Through.</p>
     *
     * <p>EMS support for server launch is optional and the server launch is 
     * invoked through the interface.</p>
     *
     * <p>Note that it is not required for the NMS to reobtain the GCT profile
     * before every launchGCT request and therefore the EMS cannot change the
     * GCTProfileInfo_T unless the session is closed.</p>
     *
     * <br>GTCProfileInfo_T gtcProfileInfo: The EMS will fill this list to 
     * contain data on all supported GCT window types.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void getGCTProfileInfo (guiCutThrough.GCTProfileInfo_THolder gctProfileInfo) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service invokes the EMS server launch of the GCT.</p>
     *
     * <br>globaldefs::NamingAttributes_T objectName: The object which should
     * be displayed, if possible, upon creation of the GCT window. If not
     * possible, the EMS will select the closest superior object available.<br>
     * <br>string gctContext: The window context (see GuiCutThroughData_T)<br>
     * <br>globaldefs::NVSList_T userInfo: Identifies the GCT user. The
     * contents of this parameter is subject to bilateral agreements.<br>
     * <br>string displayAddress: The IP address or hostname of the display
     * for the window<br>
     * <br>globaldefs::NVSList_T additionalInputInfo:
     * Additional input info provided to the EMS. The contents of this
     * parameter is subject to bilateral agreements.<br>
     * <br>boolean closingEnabled: Indicates to the NMS whether or not
     * destroyGCT() will be supported for this window.<br>
     * <br>globaldefs::NVSList_T additionalOutputInfo:
     * Additional output info provided to the NMS.  The contents of this
     * parameter is subject to bilateral agreements.<br>
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised in case when EMS does not support this
     *  operation, i.e. only supports client launch<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised in case the EMS is unable to
     *  complete the launch<br>
     * EXCPT_INVALID_INPUT - Raised when one of the input parameters is
     *  invalid<br>
     * EXCPT_CAPACITY_EXCEEDED - Raised in case the maximum number of
     *  active GCTs supported by the EMS has been reached<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal
     *  failure<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when the object referenced does not
     *  exist<br>
     * <br>
     **/
  void launchGCT (globaldefs.NameAndStringValue_T[] objectName, String gctContext, globaldefs.NameAndStringValue_T[] userInfo, String displayAddress, globaldefs.NameAndStringValue_T[] additionalInputInfo, org.omg.CORBA.BooleanHolder closingEnabled, globaldefs.NVSList_THolder additionalOutputInfo) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service closes all the GCT windows opened by launchGCT() 
     * at the given displayAddress; it also removes all 
     * related records from the EMS/GCT window manager.</p>
     *
     * <br>string displayAddress: the IP address or hostname of the display
     * from which all GCT windows are to be closed.<br>
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised in case when EMS does not support this 
     *  operation<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised in case input data is invalid<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when there are no GCT windows that are 
     *  managed by the EMS and open at the given display Address<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * <br>
     **/
  void destroyGCT (String displayAddress) throws globaldefs.ProcessingFailureException;
} // interface GuiCutThroughMgr_IOperations
