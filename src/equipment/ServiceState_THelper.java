package equipment;


/**
* equipment/ServiceState_THelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from equipment.idl
* Wednesday, June 15, 2016 7:24:35 PM COT
*/


/**
   * <p>Basic administration state equipment objects.</p>
   * <p>It has the following values:<br>
   * IN_SERVICE means the entity has been put into operation and is operating as 
   * provisioned (completely or partially).<br>
   * OUT_OF_SERVICE means the entity is entirely not capable of performing its 
   * provisioned functions and is not restricted by administrative actions.<br>
   * OUT_OF_SERVICE_BY_MAINTENANCE means that the entity has been taken 
   * intentionally out of service by a management action.<br>
   * SERV_NA means that the service state is not applicable.<br></p>
   **/
abstract public class ServiceState_THelper
{
  private static String  _id = "IDL:mtnm.tmforum.org/equipment/ServiceState_T:1.0";

  public static void insert (org.omg.CORBA.Any a, equipment.ServiceState_T that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static equipment.ServiceState_T extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_enum_tc (equipment.ServiceState_THelper.id (), "ServiceState_T", new String[] { "IN_SERVICE", "OUT_OF_SERVICE", "OUT_OF_SERVICE_BY_MAINTENANCE", "SERV_NA"} );
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static equipment.ServiceState_T read (org.omg.CORBA.portable.InputStream istream)
  {
    return equipment.ServiceState_T.from_int (istream.read_long ());
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, equipment.ServiceState_T value)
  {
    ostream.write_long (value.value ());
  }

}
