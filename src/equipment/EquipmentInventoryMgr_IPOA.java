package equipment;


/**
* equipment/EquipmentInventoryMgr_IPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from equipment.idl
* Wednesday, June 15, 2016 7:24:35 PM COT
*/


/**
   * <p>The EquipmentInventoryMgr_I is used to gain access to operations
   * which deal with equipment</p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager() operation in Manager.</p>
   **/
public abstract class EquipmentInventoryMgr_IPOA extends org.omg.PortableServer.Servant
 implements equipment.EquipmentInventoryMgr_IOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("provisionEquipment", new java.lang.Integer (0));
    _methods.put ("unprovisionEquipment", new java.lang.Integer (1));
    _methods.put ("setAlarmReportingOn", new java.lang.Integer (2));
    _methods.put ("setAlarmReportingOff", new java.lang.Integer (3));
    _methods.put ("getContainedEquipment", new java.lang.Integer (4));
    _methods.put ("getEquipment", new java.lang.Integer (5));
    _methods.put ("getAllEquipment", new java.lang.Integer (6));
    _methods.put ("getAllEquipmentNames", new java.lang.Integer (7));
    _methods.put ("getAllSupportedPTPs", new java.lang.Integer (8));
    _methods.put ("getAllSupportedPTPNames", new java.lang.Integer (9));
    _methods.put ("getAllSupportingEquipment", new java.lang.Integer (10));
    _methods.put ("getAllSupportingEquipmentNames", new java.lang.Integer (11));
    _methods.put ("getSupportingEquipment", new java.lang.Integer (12));
    _methods.put ("getSupportingEquipmentNames", new java.lang.Integer (13));
    _methods.put ("getSupportedEquipment", new java.lang.Integer (14));
    _methods.put ("getSupportedEquipmentNames", new java.lang.Integer (15));
    _methods.put ("setNativeEMSName", new java.lang.Integer (16));
    _methods.put ("setUserLabel", new java.lang.Integer (17));
    _methods.put ("setOwner", new java.lang.Integer (18));
    _methods.put ("getCapabilities", new java.lang.Integer (19));
    _methods.put ("setAdditionalInfo", new java.lang.Integer (20));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
     * <p> This operation allows the NMS to permanently provision an equipment in
     * an equipment holder in a Managed Element. 
     * The successful result of this operation is the creation or update of the 
     * equipment object and the creation of all its related objects such as 
     * Termination Points. The resulting object will be returned. </p>
     *
     * <p>The equipment holder that will contain the equipment must exist.
     * The equipment object may already exist, but the equipment holder must not 
     * have an expected equipment already provisioned.
     * See <a href=../../../supportingDocumentation/SD1-10_EquipmentModel.pdf >SD1-10 Equipment 
     * Model</a>.</p>
     *
     * <br>EQTCreateData_T equipmentCreateData: data that describes the 
     * equipment to create.
     * <br>Equipment_T createEquipment: the resulting created equipment.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS can not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_OBJECT_IN_USE - Raised when the equipment holder already has an 
     *  expected equipment<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentHolder does not reference an 
     *  equipmentHolder object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentHolder references object that 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the equipment can not be created at 
     *  the NE. Raised when the EMS is unable to execute the request because at 
     *  least one of the parameters although valid can not be set and that 
     *  parameter is identified as "not best effort" in the
     *  <a href=../../../supportingDocumentation/SD1-1_additionalInfoUsage.pdf >SD1-1 SD1-1 
     *  Additional Information Usage</a> document. If the EMS cannot determine the 
     *  reason it could not comply, it is also allowed to throw 
     *  EXCPT_UNABLE_TO_COMPLY<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 0:  // equipment/EquipmentInventoryMgr_I/provisionEquipment
       {
         try {
           equipment.EQTCreateData_T equipmentCreateData = equipment.EQTCreateData_THelper.read (in);
           equipment.Equipment_THolder createdEquipment = new equipment.Equipment_THolder ();
           this.provisionEquipment (equipmentCreateData, createdEquipment);
           out = $rh.createReply();
           equipment.Equipment_THelper.write (out, createdEquipment.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p> This operation allows the NMS to permanently unprovision an equipment
     * from the Managed Element. The successful result of this operation is the 
     * deletion of the equipment object and the deletion of all its 
     * related objects such as Termination Points.</p>
     *
     * <p>The EMS should attempt to set the equipment to 
     * OUT_OF_SERVICE_BY_MAINTENANCE before it unprovisions it.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of equipment 
     * to be unprovisioned.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_OBJECT_IN_USE - Deletion is rejected because equipment resources are 
     *  in use<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when the equipment can not be 
     *  unprovisioned at the NE.<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 1:  // equipment/EquipmentInventoryMgr_I/unprovisionEquipment
       {
         try {
           globaldefs.NameAndStringValue_T equipmentName[] = globaldefs.NamingAttributes_THelper.read (in);
           this.unprovisionEquipment (equipmentName);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This operation enables (activates, or turns on) alarm reporting 
     * on an equipment or equipment holder. Only alarms from the equipment or 
     * equipment holder (not TP alarms) are turned on.</p>
     *
     * <p>The EMS sends an attribute value change notification in case of 
     * success.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: the equipment 
     * or holder on which to activate alarm reporting.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment or holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when alarm reporting can not be enabled 
     *  for the equipment or holder<br>
  
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 2:  // equipment/EquipmentInventoryMgr_I/setAlarmReportingOn
       {
         try {
           globaldefs.NameAndStringValue_T equipmentOrHolderName[] = globaldefs.NamingAttributes_THelper.read (in);
           this.setAlarmReportingOn (equipmentOrHolderName);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p> This operation disables (deactivates, or turns off) alarm reporting on 
     * an equipment or equipment holder.  Only alarms from the equipment or holder 
     * (not TP alarms) are turned off.</p>
     *
     * <p>The EMS sends an attribute value change notification in case of 
     * success.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: name of the 
     * equipment or holder on which to deactivate alarm reporting.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment or holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when alarm reporting can not be disabled 
     *  for the equipment or holder<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 3:  // equipment/EquipmentInventoryMgr_I/setAlarmReportingOff
       {
         try {
           globaldefs.NameAndStringValue_T equipmentOrHolderName[] = globaldefs.NamingAttributes_THelper.read (in);
           this.setAlarmReportingOff (equipmentOrHolderName);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p> This service returns the equipments and equipment holders directly 
     * contained by a specific equipment holder.  This method differs from 
     * getAllEquipment in that it only looks at the next level of the containment 
     * hierarchy.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentHolderName: name of the 
     * equipment holder for which to retrieve the directly contained equipment and 
     * equipment holders.
     * <br>EquipmentOrHolderList_T equipmentOrHolderList: the directly 
     * contained equipments and equipment holders.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentHolderName does not reference an 
     *  equipment holder object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentHolderName references an 
     *  equipment holder that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 4:  // equipment/EquipmentInventoryMgr_I/getContainedEquipment
       {
         try {
           globaldefs.NameAndStringValue_T equipmentHolderName[] = globaldefs.NamingAttributes_THelper.read (in);
           equipment.EquipmentOrHolderList_THolder equipmentOrHolderList = new equipment.EquipmentOrHolderList_THolder ();
           this.getContainedEquipment (equipmentHolderName, equipmentOrHolderList);
           out = $rh.createReply();
           equipment.EquipmentOrHolderList_THelper.write (out, equipmentOrHolderList.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p> This service returns the equipment or equipment holder for the given 
     * equipment or equipment holder name.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: name of the 
     * equipment or equipment holder to retrieve.
     * <br>EquipmentOrHolder_T equip: the returned equipment or equipment 
     * holder.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment nor an equipment holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  equipment or equipment holder that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 5:  // equipment/EquipmentInventoryMgr_I/getEquipment
       {
         try {
           globaldefs.NameAndStringValue_T equipmentOrHolderName[] = globaldefs.NamingAttributes_THelper.read (in);
           equipment.EquipmentOrHolder_THolder equip = new equipment.EquipmentOrHolder_THolder ();
           this.getEquipment (equipmentOrHolderName, equip);
           out = $rh.createReply();
           equipment.EquipmentOrHolder_THelper.write (out, equip.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** <p> This allows an NMS to request all of the equipments and equipment 
     * holders that are contained in a managed element or equipment holder.</p>
     *
     * <br>globaldefs::NamingAttributes_T meOrHolderName: the name of the ME or 
     * equipment holder for which to retrieve contained equipments and equipment 
     * holders.
     * <br>unsigned long how_many: maximum number of EquipmentOrHolder_Ts to 
     * return in the first batch.
     * <br>EquipmentOrHolderList_T eqList: the first batch of 
     * EquipmentOrHolder_T s.
     * <br>EquipmentOrHolderIterator_I eqIt: the iterator used to retrieve the 
     * remaining EquipmentOrHolder_T s.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when managedElementOrEquipmentName does not 
     *  reference a managed element or an equipment holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when managedElementOrEquipmentName 
     *  references object which does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached.<br>
     * <br>
     **/
       case 6:  // equipment/EquipmentInventoryMgr_I/getAllEquipment
       {
         try {
           globaldefs.NameAndStringValue_T meOrHolderName[] = globaldefs.NamingAttributes_THelper.read (in);
           int how_many = in.read_ulong ();
           equipment.EquipmentOrHolderList_THolder eqList = new equipment.EquipmentOrHolderList_THolder ();
           equipment.EquipmentOrHolderIterator_IHolder eqIt = new equipment.EquipmentOrHolderIterator_IHolder ();
           this.getAllEquipment (meOrHolderName, how_many, eqList, eqIt);
           out = $rh.createReply();
           equipment.EquipmentOrHolderList_THelper.write (out, eqList.value);
           equipment.EquipmentOrHolderIterator_IHelper.write (out, eqIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllEquipment(), but 
     * returns the object names instead of returning the 
     * entire objects.</p> 
     * 
  
     * <br>globaldefs::NamingAttributes_T meOrHolderName: the name of the ME or 
     * equipment holder for which to retrieve contained equipment and equipment 
     * holder names.
     * <br>unsigned long how_many: maximum number of names to return in the 
  
     * first batch.
     * <br>globaldefs::NamingAttributesList_T nameList: the first batch of 
     * names.
     * <br>globaldefs::NamingAttributesListIterator_I nameIt: the iterator to 
     * retrieve the remaining names.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getAllEquipment().
     * <br>
     **/
       case 7:  // equipment/EquipmentInventoryMgr_I/getAllEquipmentNames
       {
         try {
           globaldefs.NameAndStringValue_T meOrHolderName[] = globaldefs.NamingAttributes_THelper.read (in);
           int how_many = in.read_ulong ();
           globaldefs.NamingAttributesList_THolder nameList = new globaldefs.NamingAttributesList_THolder ();
           globaldefs.NamingAttributesIterator_IHolder nameIt = new globaldefs.NamingAttributesIterator_IHolder ();
           this.getAllEquipmentNames (meOrHolderName, how_many, nameList, nameIt);
           out = $rh.createReply();
           globaldefs.NamingAttributesList_THelper.write (out, nameList.value);
           globaldefs.NamingAttributesIterator_IHelper.write (out, nameIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p> This service allows an NMS to request the PTPs/FTPs that are
     * directly supported by a given equipment. The PTPs that are returned
     * are those that share their physical layer with the primary equipment (i.e. 
     * that represent a port on the equipment or are connected by a fibre, wire, 
     * etc.). The FTPs that are returned are those which are implemented by the 
     * physical circuitry supported by the equipment and will include FTPs that 
     * are named from the specified equipment (the FTPs will depend upon the 
     * presence of that equipment for their most basic operation). </p>
     *
     * <p>When there is equipment protection, this operation reports PTPs/FTPs for 
     * the primary equipment only.  That is, when called on a protecting equipment 
     * (as opposed to the primary equipment), this operation returns an empty 
     * list, irrespective of the current switch status.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve supported PTPs/FTPs.
     * <br>unsigned long how_many: the maximum number of PTPs/FTPs to be 
     * reported in the first batch.
     * <br>terminationPoint::TerminationPointList_T tpList: the first batch of 
     * PTPs/FTPs.
     * <br>terminationPoint::TerminationPointIterator_I tpIt: the iterator to 
     * retrieve the remaining PTPs/FTPs.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references object that 
     *  does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached.<br>
     * <br>
     **/
       case 8:  // equipment/EquipmentInventoryMgr_I/getAllSupportedPTPs
       {
         try {
           globaldefs.NameAndStringValue_T equipmentName[] = globaldefs.NamingAttributes_THelper.read (in);
           int how_many = in.read_ulong ();
           terminationPoint.TerminationPointList_THolder tpList = new terminationPoint.TerminationPointList_THolder ();
           terminationPoint.TerminationPointIterator_IHolder tpIt = new terminationPoint.TerminationPointIterator_IHolder ();
           this.getAllSupportedPTPs (equipmentName, how_many, tpList, tpIt);
           out = $rh.createReply();
           terminationPoint.TerminationPointList_THelper.write (out, tpList.value);
           terminationPoint.TerminationPointIterator_IHelper.write (out, tpIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllSupportedPTPs(), but 
     * returns the object names instead of returning the 
     * entire objects.</p> 
     * 
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve supported PTPs/FTPs.
     * <br>unsigned long how_many: the maximum number of PTP/FTP names to be 
     * reported in the first batch.
     * <br>globaldefs::NamingAttributesList_T nameList: the first batch of 
     * PTP/FTP names.
     * <br>globaldefs::NamingAttributesListIterator_I nameIt: the iterator to 
     * retrieve the remaining PTP/FTP names.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getAllSupportedPTPs() .
     * <br>
     **/
       case 9:  // equipment/EquipmentInventoryMgr_I/getAllSupportedPTPNames
       {
         try {
           globaldefs.NameAndStringValue_T equipmentName[] = globaldefs.NamingAttributes_THelper.read (in);
           int how_many = in.read_ulong ();
           globaldefs.NamingAttributesList_THolder nameList = new globaldefs.NamingAttributesList_THolder ();
           globaldefs.NamingAttributesIterator_IHolder nameIt = new globaldefs.NamingAttributesIterator_IHolder ();
           this.getAllSupportedPTPNames (equipmentName, how_many, nameList, nameIt);
           out = $rh.createReply();
           globaldefs.NamingAttributesList_THelper.write (out, nameList.value);
           globaldefs.NamingAttributesIterator_IHelper.write (out, nameIt.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p> This service allows an NMS to request all of the equipment 
     * which implement a PTP/FTP or a Matrix Flow Domain.
        *  For a PTP, the equipments that are returned
     * are those which support the physical layer of the PTP (i.e. have the
     * port on them or are connected by a fibre, wire, etc.). For an FTP, the 
     * equipments returned are those which support the physical circuitry 
     * implementing the FTP and will include the equipment from which the 
     * FTP is named (the FTPs will depend upon the presence of that equipment for 
     * their most basic operation). For a particular PTP/FTP
     * the Tx port/function and Rx port/function may be on different cards and in 
     * this case both should be returned.
     * Equipment that are used by the PTPs/FTPs, but that do not support them 
     * directly (such as a shared DEMUX card) are not reported.</p>
     *
     * <p>When there is equipment protection, this operation reports the primary 
     * equipment only.  The protecting equipment will not be returned by this 
     * operation.</p>
     *
     * <br>globaldefs::NamingAttributes_T ptpOrMfdName: The name of 
        *  the PTP/FTP or MFD for 
     * which to retrieve the supporting equipments. The termination point 
        * or matrix flow domain name 
     * must be explicit (a generic endpoint specification may not be used in this 
     * case). See <a href=../../../supportingDocumentation/SD1-25_objectNaming.pdf >SD1-25 SD1-25 
     * Object Naming</a> for further detail on FTP naming.
     *
  
     * <br>EquipmentOrHolderList_T eqList: The list of equipments (not 
     *  equipment holders) directly implementing the PTP/FTP or matrix flow domain.
     *
  
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when ptpOrMfdName does not reference a PTP/FTP 
     *  or matrix flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when ptpOrMfdName references a PTP/FTP object 
     *  or matrix flow domain that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is lost
     * <br>
     **/
       case 10:  // equipment/EquipmentInventoryMgr_I/getAllSupportingEquipment
       {
         try {
           globaldefs.NameAndStringValue_T ptpOrMfdName[] = globaldefs.NamingAttributes_THelper.read (in);
           equipment.EquipmentOrHolderList_THolder eqList = new equipment.EquipmentOrHolderList_THolder ();
           this.getAllSupportingEquipment (ptpOrMfdName, eqList);
           out = $rh.createReply();
           equipment.EquipmentOrHolderList_THelper.write (out, eqList.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllSupportingEquipment(),
     * but returns the object names instead of returning the 
     * entire objects.</p> 
     * 
     * <br>globaldefs::NamingAttributes_T ptpOrMfdName: The name of the PTP/FTP
        * or Matrix Flow Domain for 
     * which to retrieve the supporting equipments. The termination point or 
        * matrix flow domain name 
     * must be explicit (a generic endpoint specification may not be used in this 
     * case). See <a href=../../../supportingDocumentation/SD1-25_objectNaming.pdf >SD1-25 SD1-25 
     * Object Naming</a> for further detail on FTP naming.
     *
  
     * <br>globaldefs::NamingAttributesList_T nameList: The list of equipment 
     *  names (not equipment holder names) directly implementing the PTP/FTP.
     *
  
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br> 
     * As for getAllSupportingEquipment().
     * <br>
     **/
       case 11:  // equipment/EquipmentInventoryMgr_I/getAllSupportingEquipmentNames
       {
         try {
           globaldefs.NameAndStringValue_T ptpOrMfdName[] = globaldefs.NamingAttributes_THelper.read (in);
           globaldefs.NamingAttributesList_THolder nameList = new globaldefs.NamingAttributesList_THolder ();
           this.getAllSupportingEquipmentNames (ptpOrMfdName, nameList);
           out = $rh.createReply();
           globaldefs.NamingAttributesList_THelper.write (out, nameList.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This service allows an NMS to request all of the equipment that supports
     * a given piece of equipment, e.g., the power pack and synchronization card 
     * that support a given piece of equipment.</p> 
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supporting equipments.
     * <br>EquipmentOrHolderList_T eqList: the list of equipment (not equipment 
     * holders) that support the given equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references an equipment 
     *  object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     **/
       case 12:  // equipment/EquipmentInventoryMgr_I/getSupportingEquipment
       {
         try {
           globaldefs.NameAndStringValue_T equipmentName[] = globaldefs.NamingAttributes_THelper.read (in);
           equipment.EquipmentOrHolderList_THolder eqList = new equipment.EquipmentOrHolderList_THolder ();
           this.getSupportingEquipment (equipmentName, eqList);
           out = $rh.createReply();
           equipment.EquipmentOrHolderList_THelper.write (out, eqList.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This operation has exactly the same behaviour as 
     * getSupportingEquipment(),
     * but returns the object names instead of returning the entire objects</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supporting equipments.
  
     * <br>globaldefs::NamingAttributesList_T nameList: the list of equipment
     * names (not equipment holders) that support the given equipment.. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getSupportingEquipment().
  
     * <br>
     **/
       case 13:  // equipment/EquipmentInventoryMgr_I/getSupportingEquipmentNames
       {
         try {
           globaldefs.NameAndStringValue_T equipmentName[] = globaldefs.NamingAttributes_THelper.read (in);
           globaldefs.NamingAttributesList_THolder nameList = new globaldefs.NamingAttributesList_THolder ();
           this.getSupportingEquipmentNames (equipmentName, nameList);
           out = $rh.createReply();
           globaldefs.NamingAttributesList_THelper.write (out, nameList.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This service allows an NMS to request all of the pieces of equipment 
     * supported by a given piece of equipment, e.g., a power pack might support 
     * many circuit packs.</p> 
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supported equipment list.
     * <br>EquipmentOrHolderList_T eqList: the list of equipment (not equipment 
     * holders) supported by the given piece of equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references an equipment 
     *  object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     **/
       case 14:  // equipment/EquipmentInventoryMgr_I/getSupportedEquipment
       {
         try {
           globaldefs.NameAndStringValue_T equipmentName[] = globaldefs.NamingAttributes_THelper.read (in);
           equipment.EquipmentOrHolderList_THolder eqList = new equipment.EquipmentOrHolderList_THolder ();
           this.getSupportedEquipment (equipmentName, eqList);
           out = $rh.createReply();
           equipment.EquipmentOrHolderList_THelper.write (out, eqList.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This operation has exactly the same behaviour as 
     * getSupportedEquipment(),
     * but returns the object names instead of returning the entire objects</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supported equipment list.
     * <br>globaldefs::NamingAttributesList_T nameList: the list of equipment
     * names (not equipment holders) that are support by a given piece of 
     * equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getSupportedEquipment().
     * <br>
     **/
       case 15:  // equipment/EquipmentInventoryMgr_I/getSupportedEquipmentNames
       {
         try {
           globaldefs.NameAndStringValue_T equipmentName[] = globaldefs.NamingAttributes_THelper.read (in);
           globaldefs.NamingAttributesList_THolder nameList = new globaldefs.NamingAttributesList_THolder ();
           this.getSupportedEquipmentNames (equipmentName, nameList);
           out = $rh.createReply();
           globaldefs.NamingAttributesList_THelper.write (out, nameList.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The nativeEMSName is owned by the EMS.  It represents how an EMS user 
     * addresses an object on the EMS GUI.  The EMS may or may not support 
     * changing this value.</p>
     *
     * <p>When an object is created by the EMS, the EMS selects the nativeEMSName 
     * for the object.</p>
     *
     * <p>When an object is created by an NMS, the NMS specifies the userLabel for  
     * the object. If the EMS supports setting of nativeEMSNames, the 
     * nativeEMSName should be set to the same value as the userLabel.  If the EMS 
     * does not support setting of nativeEMSNames, or if the nativeEMSName has 
     * constraints that the userLabel does not satisfy, the EMS selects the 
     * nativeEMSName for the object.</p>
     *
     * <p>After an object has been created, the nativeEMSName may be changed by 
     * the NMS, if the EMS supports this functionality, using the setNativeEMSName 
     * operation.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName
     * <br> string nativeEMSName
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the nativeEMSName can not be set for 
     *  the specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is lost
     * <br>
     **/
       case 16:  // common/Common_I/setNativeEMSName
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String nativeEMSName = in.read_string ();
           this.setNativeEMSName (objectName, nativeEMSName);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>The userLabel is owned by the NMSes.  It is a string assigned by an NMS 
     * to an object. The difference between the userLabel and the NamingAttributes 
     * name is that the userLabel is an attribute of the objects that 
     * may be "set" by the NMS through well defined interfaces (setUserLabel).</p>
     *
     * <p>When an object is created by an NMS, the NMS specifies the userLabel for 
     * the object.</p>
     *
     * <p>When an object is created by the EMS, the EMS sets the userLabel to the 
     * nativeEMSName.</p>
     *
     * <p>Once an object is created, the userLabel may only be changed by an NMS 
     * through the setUserLabel operation.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName: Name of the object for 
     *  which to change the userLabel.
     * <br> string userLabel: New user label to assign to the object
     * <br> boolean enforceUniqueness: Specifies whether or not userLabel should 
     * be checked for uniqueness amongst objects of the same class within the EMS.  
     * If true, then the operation will fail if userLabel is already in use.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the userLabel can not be set for the 
     *  specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * <br>
     **/
       case 17:  // common/Common_I/setUserLabel
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String userLabel = in.read_string ();
           boolean enforceUniqueness = in.read_boolean ();
           this.setUserLabel (objectName, userLabel, enforceUniqueness);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p>This service sets the owner attribute of the specified object.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName
     * <br> string owner
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the owner can not be set for the 
     *  specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
       case 18:  // common/Common_I/setOwner
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           String owner = in.read_string ();
           this.setOwner (objectName, owner);
           out = $rh.createReply();
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** 
     * <p>This service retrieves the capabilities of the manager.
     * All non-specified capabilities are assumed to be unsupported.</p>
     *
     * <br> CapabilityList_T capabilities
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, and cannot determine the reason it could not comply, it may raise this exception. <br>
     **/
       case 19:  // common/Common_I/getCapabilities
       {
         try {
           common.CapabilityList_THolder capabilities = new common.CapabilityList_THolder ();
           this.getCapabilities (capabilities);
           out = $rh.createReply();
           common.CapabilityList_THelper.write (out, capabilities.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
     * <p>This service sets the additional info attribute
     * of the object identified by objectName. This operation should be used
     * to set both vendor specific attributes as well as the attributes that
     * are formally defined in this interface specification. See <a 
     * href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     * Additional Information Usage</a> for further details.</p>
     *
     * <p>As an input only the list of parameters to be changed, removed, or
     * added shall be provided.  If an entry is to be removed, "-" shall
     * be specified as a value.  If a parameter is specified that is currently
     * not part of the additionalInfo attribute of the specified object
     * that parameter is added by the EMS with the specified value.
     * The EMS may reject removal and addition requests, however.</p>
     *
     * <p> The operation is best effort (except where specified otherwise for a 
     * particular parameter).  The output specifies the
     * values which were actually set.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName: the managed object
     * whose additional info parameters are intended to get modified
     *
     * <br> globaldefs::NVSList_T additionalInfo: list of parameters
     * to be changed, added, or removed (input), updated to provide the
     * actually changed or added parameters (output)
     *
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this
     *  service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal
     *  failure (see errorReason attribute of ProcessingFailureException())<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed,
     *  raised when an input parameter is syntactical incorrect and raised when a 
     *  parameter is identified as only "settable" using a "specific operation" in 
     *  the <a href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     *  Additional Information Usage</a> document<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when the communication to the managed
     *  element containing or hosting objectName is lost<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable 
     *  to execute the request because at least one of the parameters although 
     *  valid can not be set and that parameter is identified as "not best effort" 
     *  in the <a href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     *  Additional Information Usage</a> document)<br>
     * <br>
  
     **/
       case 20:  // common/Common_I/setAdditionalInfo
       {
         try {
           globaldefs.NameAndStringValue_T objectName[] = globaldefs.NamingAttributes_THelper.read (in);
           globaldefs.NVSList_THolder additionalInfo = new globaldefs.NVSList_THolder ();
           additionalInfo.value = globaldefs.NVSList_THelper.read (in);
           this.setAdditionalInfo (objectName, additionalInfo);
           out = $rh.createReply();
           globaldefs.NVSList_THelper.write (out, additionalInfo.value);
         } catch (globaldefs.ProcessingFailureException $ex) {
           out = $rh.createExceptionReply ();
           globaldefs.ProcessingFailureExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:mtnm.tmforum.org/equipment/EquipmentInventoryMgr_I:1.0", 
    "IDL:mtnm.tmforum.org/common/Common_I:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public EquipmentInventoryMgr_I _this() 
  {
    return EquipmentInventoryMgr_IHelper.narrow(
    super._this_object());
  }

  public EquipmentInventoryMgr_I _this(org.omg.CORBA.ORB orb) 
  {
    return EquipmentInventoryMgr_IHelper.narrow(
    super._this_object(orb));
  }


} // class EquipmentInventoryMgr_IPOA
