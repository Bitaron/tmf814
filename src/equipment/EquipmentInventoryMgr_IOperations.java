package equipment;


/**
* equipment/EquipmentInventoryMgr_IOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from equipment.idl
* Wednesday, June 15, 2016 7:24:35 PM COT
*/


/**
   * <p>The EquipmentInventoryMgr_I is used to gain access to operations
   * which deal with equipment</p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager() operation in Manager.</p>
   **/
public interface EquipmentInventoryMgr_IOperations  extends common.Common_IOperations
{

  /**
     * <p> This operation allows the NMS to permanently provision an equipment in
     * an equipment holder in a Managed Element. 
     * The successful result of this operation is the creation or update of the 
     * equipment object and the creation of all its related objects such as 
     * Termination Points. The resulting object will be returned. </p>
     *
     * <p>The equipment holder that will contain the equipment must exist.
     * The equipment object may already exist, but the equipment holder must not 
     * have an expected equipment already provisioned.
     * See <a href=../../../supportingDocumentation/SD1-10_EquipmentModel.pdf >SD1-10 Equipment 
     * Model</a>.</p>
     *
     * <br>EQTCreateData_T equipmentCreateData: data that describes the 
     * equipment to create.
     * <br>Equipment_T createEquipment: the resulting created equipment.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS can not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_OBJECT_IN_USE - Raised when the equipment holder already has an 
     *  expected equipment<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentHolder does not reference an 
     *  equipmentHolder object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentHolder references object that 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the equipment can not be created at 
     *  the NE. Raised when the EMS is unable to execute the request because at 
     *  least one of the parameters although valid can not be set and that 
     *  parameter is identified as "not best effort" in the
     *  <a href=../../../supportingDocumentation/SD1-1_additionalInfoUsage.pdf >SD1-1 SD1-1 
     *  Additional Information Usage</a> document. If the EMS cannot determine the 
     *  reason it could not comply, it is also allowed to throw 
     *  EXCPT_UNABLE_TO_COMPLY<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  void provisionEquipment (equipment.EQTCreateData_T equipmentCreateData, equipment.Equipment_THolder createdEquipment) throws globaldefs.ProcessingFailureException;

  /**
     * <p> This operation allows the NMS to permanently unprovision an equipment
     * from the Managed Element. The successful result of this operation is the 
     * deletion of the equipment object and the deletion of all its 
     * related objects such as Termination Points.</p>
     *
     * <p>The EMS should attempt to set the equipment to 
     * OUT_OF_SERVICE_BY_MAINTENANCE before it unprovisions it.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of equipment 
     * to be unprovisioned.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_OBJECT_IN_USE - Deletion is rejected because equipment resources are 
     *  in use<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when the equipment can not be 
     *  unprovisioned at the NE.<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  void unprovisionEquipment (globaldefs.NameAndStringValue_T[] equipmentName) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation enables (activates, or turns on) alarm reporting 
     * on an equipment or equipment holder. Only alarms from the equipment or 
     * equipment holder (not TP alarms) are turned on.</p>
     *
     * <p>The EMS sends an attribute value change notification in case of 
     * success.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: the equipment 
     * or holder on which to activate alarm reporting.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment or holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when alarm reporting can not be enabled 
     *  for the equipment or holder<br>
  
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  void setAlarmReportingOn (globaldefs.NameAndStringValue_T[] equipmentOrHolderName) throws globaldefs.ProcessingFailureException;

  /**
     * <p> This operation disables (deactivates, or turns off) alarm reporting on 
     * an equipment or equipment holder.  Only alarms from the equipment or holder 
     * (not TP alarms) are turned off.</p>
     *
     * <p>The EMS sends an attribute value change notification in case of 
     * success.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: name of the 
     * equipment or holder on which to deactivate alarm reporting.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment or holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when alarm reporting can not be disabled 
     *  for the equipment or holder<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  void setAlarmReportingOff (globaldefs.NameAndStringValue_T[] equipmentOrHolderName) throws globaldefs.ProcessingFailureException;

  /**
     * <p> This service returns the equipments and equipment holders directly 
     * contained by a specific equipment holder.  This method differs from 
     * getAllEquipment in that it only looks at the next level of the containment 
     * hierarchy.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentHolderName: name of the 
     * equipment holder for which to retrieve the directly contained equipment and 
     * equipment holders.
     * <br>EquipmentOrHolderList_T equipmentOrHolderList: the directly 
     * contained equipments and equipment holders.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentHolderName does not reference an 
     *  equipment holder object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentHolderName references an 
     *  equipment holder that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  void getContainedEquipment (globaldefs.NameAndStringValue_T[] equipmentHolderName, equipment.EquipmentOrHolderList_THolder equipmentOrHolderList) throws globaldefs.ProcessingFailureException;

  /**
     * <p> This service returns the equipment or equipment holder for the given 
     * equipment or equipment holder name.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: name of the 
     * equipment or equipment holder to retrieve.
     * <br>EquipmentOrHolder_T equip: the returned equipment or equipment 
     * holder.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment nor an equipment holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  equipment or equipment holder that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  void getEquipment (globaldefs.NameAndStringValue_T[] equipmentOrHolderName, equipment.EquipmentOrHolder_THolder equip) throws globaldefs.ProcessingFailureException;

  /** <p> This allows an NMS to request all of the equipments and equipment 
     * holders that are contained in a managed element or equipment holder.</p>
     *
     * <br>globaldefs::NamingAttributes_T meOrHolderName: the name of the ME or 
     * equipment holder for which to retrieve contained equipments and equipment 
     * holders.
     * <br>unsigned long how_many: maximum number of EquipmentOrHolder_Ts to 
     * return in the first batch.
     * <br>EquipmentOrHolderList_T eqList: the first batch of 
     * EquipmentOrHolder_T s.
     * <br>EquipmentOrHolderIterator_I eqIt: the iterator used to retrieve the 
     * remaining EquipmentOrHolder_T s.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when managedElementOrEquipmentName does not 
     *  reference a managed element or an equipment holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when managedElementOrEquipmentName 
     *  references object which does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached.<br>
     * <br>
     **/
  void getAllEquipment (globaldefs.NameAndStringValue_T[] meOrHolderName, int how_many, equipment.EquipmentOrHolderList_THolder eqList, equipment.EquipmentOrHolderIterator_IHolder eqIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllEquipment(), but 
     * returns the object names instead of returning the 
     * entire objects.</p> 
     * 
  
     * <br>globaldefs::NamingAttributes_T meOrHolderName: the name of the ME or 
     * equipment holder for which to retrieve contained equipment and equipment 
     * holder names.
     * <br>unsigned long how_many: maximum number of names to return in the 
  
     * first batch.
     * <br>globaldefs::NamingAttributesList_T nameList: the first batch of 
     * names.
     * <br>globaldefs::NamingAttributesListIterator_I nameIt: the iterator to 
     * retrieve the remaining names.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getAllEquipment().
     * <br>
     **/
  void getAllEquipmentNames (globaldefs.NameAndStringValue_T[] meOrHolderName, int how_many, globaldefs.NamingAttributesList_THolder nameList, globaldefs.NamingAttributesIterator_IHolder nameIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p> This service allows an NMS to request the PTPs/FTPs that are
     * directly supported by a given equipment. The PTPs that are returned
     * are those that share their physical layer with the primary equipment (i.e. 
     * that represent a port on the equipment or are connected by a fibre, wire, 
     * etc.). The FTPs that are returned are those which are implemented by the 
     * physical circuitry supported by the equipment and will include FTPs that 
     * are named from the specified equipment (the FTPs will depend upon the 
     * presence of that equipment for their most basic operation). </p>
     *
     * <p>When there is equipment protection, this operation reports PTPs/FTPs for 
     * the primary equipment only.  That is, when called on a protecting equipment 
     * (as opposed to the primary equipment), this operation returns an empty 
     * list, irrespective of the current switch status.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve supported PTPs/FTPs.
     * <br>unsigned long how_many: the maximum number of PTPs/FTPs to be 
     * reported in the first batch.
     * <br>terminationPoint::TerminationPointList_T tpList: the first batch of 
     * PTPs/FTPs.
     * <br>terminationPoint::TerminationPointIterator_I tpIt: the iterator to 
     * retrieve the remaining PTPs/FTPs.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references object that 
     *  does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached.<br>
     * <br>
     **/
  void getAllSupportedPTPs (globaldefs.NameAndStringValue_T[] equipmentName, int how_many, terminationPoint.TerminationPointList_THolder tpList, terminationPoint.TerminationPointIterator_IHolder tpIt) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllSupportedPTPs(), but 
     * returns the object names instead of returning the 
     * entire objects.</p> 
     * 
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve supported PTPs/FTPs.
     * <br>unsigned long how_many: the maximum number of PTP/FTP names to be 
     * reported in the first batch.
     * <br>globaldefs::NamingAttributesList_T nameList: the first batch of 
     * PTP/FTP names.
     * <br>globaldefs::NamingAttributesListIterator_I nameIt: the iterator to 
     * retrieve the remaining PTP/FTP names.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getAllSupportedPTPs() .
     * <br>
     **/
  void getAllSupportedPTPNames (globaldefs.NameAndStringValue_T[] equipmentName, int how_many, globaldefs.NamingAttributesList_THolder nameList, globaldefs.NamingAttributesIterator_IHolder nameIt) throws globaldefs.ProcessingFailureException;

  /** 
     * <p> This service allows an NMS to request all of the equipment 
     * which implement a PTP/FTP or a Matrix Flow Domain.
        *  For a PTP, the equipments that are returned
     * are those which support the physical layer of the PTP (i.e. have the
     * port on them or are connected by a fibre, wire, etc.). For an FTP, the 
     * equipments returned are those which support the physical circuitry 
     * implementing the FTP and will include the equipment from which the 
     * FTP is named (the FTPs will depend upon the presence of that equipment for 
     * their most basic operation). For a particular PTP/FTP
     * the Tx port/function and Rx port/function may be on different cards and in 
     * this case both should be returned.
     * Equipment that are used by the PTPs/FTPs, but that do not support them 
     * directly (such as a shared DEMUX card) are not reported.</p>
     *
     * <p>When there is equipment protection, this operation reports the primary 
     * equipment only.  The protecting equipment will not be returned by this 
     * operation.</p>
     *
     * <br>globaldefs::NamingAttributes_T ptpOrMfdName: The name of 
        *  the PTP/FTP or MFD for 
     * which to retrieve the supporting equipments. The termination point 
        * or matrix flow domain name 
     * must be explicit (a generic endpoint specification may not be used in this 
     * case). See <a href=../../../supportingDocumentation/SD1-25_objectNaming.pdf >SD1-25 SD1-25 
     * Object Naming</a> for further detail on FTP naming.
     *
  
     * <br>EquipmentOrHolderList_T eqList: The list of equipments (not 
     *  equipment holders) directly implementing the PTP/FTP or matrix flow domain.
     *
  
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when ptpOrMfdName does not reference a PTP/FTP 
     *  or matrix flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when ptpOrMfdName references a PTP/FTP object 
     *  or matrix flow domain that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is lost
     * <br>
     **/
  void getAllSupportingEquipment (globaldefs.NameAndStringValue_T[] ptpOrMfdName, equipment.EquipmentOrHolderList_THolder eqList) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllSupportingEquipment(),
     * but returns the object names instead of returning the 
     * entire objects.</p> 
     * 
     * <br>globaldefs::NamingAttributes_T ptpOrMfdName: The name of the PTP/FTP
        * or Matrix Flow Domain for 
     * which to retrieve the supporting equipments. The termination point or 
        * matrix flow domain name 
     * must be explicit (a generic endpoint specification may not be used in this 
     * case). See <a href=../../../supportingDocumentation/SD1-25_objectNaming.pdf >SD1-25 SD1-25 
     * Object Naming</a> for further detail on FTP naming.
     *
  
     * <br>globaldefs::NamingAttributesList_T nameList: The list of equipment 
     *  names (not equipment holder names) directly implementing the PTP/FTP.
     *
  
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br> 
     * As for getAllSupportingEquipment().
     * <br>
     **/
  void getAllSupportingEquipmentNames (globaldefs.NameAndStringValue_T[] ptpOrMfdName, globaldefs.NamingAttributesList_THolder nameList) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows an NMS to request all of the equipment that supports
     * a given piece of equipment, e.g., the power pack and synchronization card 
     * that support a given piece of equipment.</p> 
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supporting equipments.
     * <br>EquipmentOrHolderList_T eqList: the list of equipment (not equipment 
     * holders) that support the given equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references an equipment 
     *  object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     **/
  void getSupportingEquipment (globaldefs.NameAndStringValue_T[] equipmentName, equipment.EquipmentOrHolderList_THolder eqList) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation has exactly the same behaviour as 
     * getSupportingEquipment(),
     * but returns the object names instead of returning the entire objects</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supporting equipments.
  
     * <br>globaldefs::NamingAttributesList_T nameList: the list of equipment
     * names (not equipment holders) that support the given equipment.. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getSupportingEquipment().
  
     * <br>
     **/
  void getSupportingEquipmentNames (globaldefs.NameAndStringValue_T[] equipmentName, globaldefs.NamingAttributesList_THolder nameList) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This service allows an NMS to request all of the pieces of equipment 
     * supported by a given piece of equipment, e.g., a power pack might support 
     * many circuit packs.</p> 
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supported equipment list.
     * <br>EquipmentOrHolderList_T eqList: the list of equipment (not equipment 
     * holders) supported by the given piece of equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references an equipment 
     *  object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     **/
  void getSupportedEquipment (globaldefs.NameAndStringValue_T[] equipmentName, equipment.EquipmentOrHolderList_THolder eqList) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This operation has exactly the same behaviour as 
     * getSupportedEquipment(),
     * but returns the object names instead of returning the entire objects</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supported equipment list.
     * <br>globaldefs::NamingAttributesList_T nameList: the list of equipment
     * names (not equipment holders) that are support by a given piece of 
     * equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getSupportedEquipment().
     * <br>
     **/
  void getSupportedEquipmentNames (globaldefs.NameAndStringValue_T[] equipmentName, globaldefs.NamingAttributesList_THolder nameList) throws globaldefs.ProcessingFailureException;
} // interface EquipmentInventoryMgr_IOperations
