package equipment;


/**
* equipment/_EquipmentInventoryMgr_IStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from equipment.idl
* Wednesday, June 15, 2016 7:24:35 PM COT
*/


/**
   * <p>The EquipmentInventoryMgr_I is used to gain access to operations
   * which deal with equipment</p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager() operation in Manager.</p>
   **/
public class _EquipmentInventoryMgr_IStub extends org.omg.CORBA.portable.ObjectImpl implements equipment.EquipmentInventoryMgr_I
{


  /**
     * <p> This operation allows the NMS to permanently provision an equipment in
     * an equipment holder in a Managed Element. 
     * The successful result of this operation is the creation or update of the 
     * equipment object and the creation of all its related objects such as 
     * Termination Points. The resulting object will be returned. </p>
     *
     * <p>The equipment holder that will contain the equipment must exist.
     * The equipment object may already exist, but the equipment holder must not 
     * have an expected equipment already provisioned.
     * See <a href=../../../supportingDocumentation/SD1-10_EquipmentModel.pdf >SD1-10 Equipment 
     * Model</a>.</p>
     *
     * <br>EQTCreateData_T equipmentCreateData: data that describes the 
     * equipment to create.
     * <br>Equipment_T createEquipment: the resulting created equipment.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS can not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_OBJECT_IN_USE - Raised when the equipment holder already has an 
     *  expected equipment<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentHolder does not reference an 
     *  equipmentHolder object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentHolder references object that 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the equipment can not be created at 
     *  the NE. Raised when the EMS is unable to execute the request because at 
     *  least one of the parameters although valid can not be set and that 
     *  parameter is identified as "not best effort" in the
     *  <a href=../../../supportingDocumentation/SD1-1_additionalInfoUsage.pdf >SD1-1 SD1-1 
     *  Additional Information Usage</a> document. If the EMS cannot determine the 
     *  reason it could not comply, it is also allowed to throw 
     *  EXCPT_UNABLE_TO_COMPLY<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  public void provisionEquipment (equipment.EQTCreateData_T equipmentCreateData, equipment.Equipment_THolder createdEquipment) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("provisionEquipment", true);
                equipment.EQTCreateData_THelper.write ($out, equipmentCreateData);
                $in = _invoke ($out);
                createdEquipment.value = equipment.Equipment_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                provisionEquipment (equipmentCreateData, createdEquipment        );
            } finally {
                _releaseReply ($in);
            }
  } // provisionEquipment


  /**
     * <p> This operation allows the NMS to permanently unprovision an equipment
     * from the Managed Element. The successful result of this operation is the 
     * deletion of the equipment object and the deletion of all its 
     * related objects such as Termination Points.</p>
     *
     * <p>The EMS should attempt to set the equipment to 
     * OUT_OF_SERVICE_BY_MAINTENANCE before it unprovisions it.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of equipment 
     * to be unprovisioned.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_OBJECT_IN_USE - Deletion is rejected because equipment resources are 
     *  in use<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when the equipment can not be 
     *  unprovisioned at the NE.<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  public void unprovisionEquipment (globaldefs.NameAndStringValue_T[] equipmentName) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unprovisionEquipment", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unprovisionEquipment (equipmentName        );
            } finally {
                _releaseReply ($in);
            }
  } // unprovisionEquipment


  /**
     * <p>This operation enables (activates, or turns on) alarm reporting 
     * on an equipment or equipment holder. Only alarms from the equipment or 
     * equipment holder (not TP alarms) are turned on.</p>
     *
     * <p>The EMS sends an attribute value change notification in case of 
     * success.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: the equipment 
     * or holder on which to activate alarm reporting.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment or holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when alarm reporting can not be enabled 
     *  for the equipment or holder<br>
  
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  public void setAlarmReportingOn (globaldefs.NameAndStringValue_T[] equipmentOrHolderName) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setAlarmReportingOn", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentOrHolderName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setAlarmReportingOn (equipmentOrHolderName        );
            } finally {
                _releaseReply ($in);
            }
  } // setAlarmReportingOn


  /**
     * <p> This operation disables (deactivates, or turns off) alarm reporting on 
     * an equipment or equipment holder.  Only alarms from the equipment or holder 
     * (not TP alarms) are turned off.</p>
     *
     * <p>The EMS sends an attribute value change notification in case of 
     * success.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: name of the 
     * equipment or holder on which to deactivate alarm reporting.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment or holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  object that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY -  Raised when alarm reporting can not be disabled 
     *  for the equipment or holder<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  public void setAlarmReportingOff (globaldefs.NameAndStringValue_T[] equipmentOrHolderName) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setAlarmReportingOff", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentOrHolderName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setAlarmReportingOff (equipmentOrHolderName        );
            } finally {
                _releaseReply ($in);
            }
  } // setAlarmReportingOff


  /**
     * <p> This service returns the equipments and equipment holders directly 
     * contained by a specific equipment holder.  This method differs from 
     * getAllEquipment in that it only looks at the next level of the containment 
     * hierarchy.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentHolderName: name of the 
     * equipment holder for which to retrieve the directly contained equipment and 
     * equipment holders.
     * <br>EquipmentOrHolderList_T equipmentOrHolderList: the directly 
     * contained equipments and equipment holders.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentHolderName does not reference an 
     *  equipment holder object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentHolderName references an 
     *  equipment holder that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  public void getContainedEquipment (globaldefs.NameAndStringValue_T[] equipmentHolderName, equipment.EquipmentOrHolderList_THolder equipmentOrHolderList) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getContainedEquipment", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentHolderName);
                $in = _invoke ($out);
                equipmentOrHolderList.value = equipment.EquipmentOrHolderList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getContainedEquipment (equipmentHolderName, equipmentOrHolderList        );
            } finally {
                _releaseReply ($in);
            }
  } // getContainedEquipment


  /**
     * <p> This service returns the equipment or equipment holder for the given 
     * equipment or equipment holder name.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentOrHolderName: name of the 
     * equipment or equipment holder to retrieve.
     * <br>EquipmentOrHolder_T equip: the returned equipment or equipment 
     * holder.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentOrHolderName does not reference 
     *  an equipment nor an equipment holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentOrHolderName references an 
     *  equipment or equipment holder that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  public void getEquipment (globaldefs.NameAndStringValue_T[] equipmentOrHolderName, equipment.EquipmentOrHolder_THolder equip) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getEquipment", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentOrHolderName);
                $in = _invoke ($out);
                equip.value = equipment.EquipmentOrHolder_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getEquipment (equipmentOrHolderName, equip        );
            } finally {
                _releaseReply ($in);
            }
  } // getEquipment


  /** <p> This allows an NMS to request all of the equipments and equipment 
     * holders that are contained in a managed element or equipment holder.</p>
     *
     * <br>globaldefs::NamingAttributes_T meOrHolderName: the name of the ME or 
     * equipment holder for which to retrieve contained equipments and equipment 
     * holders.
     * <br>unsigned long how_many: maximum number of EquipmentOrHolder_Ts to 
     * return in the first batch.
     * <br>EquipmentOrHolderList_T eqList: the first batch of 
     * EquipmentOrHolder_T s.
     * <br>EquipmentOrHolderIterator_I eqIt: the iterator used to retrieve the 
     * remaining EquipmentOrHolder_T s.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when managedElementOrEquipmentName does not 
     *  reference a managed element or an equipment holder<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when managedElementOrEquipmentName 
     *  references object which does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached.<br>
     * <br>
     **/
  public void getAllEquipment (globaldefs.NameAndStringValue_T[] meOrHolderName, int how_many, equipment.EquipmentOrHolderList_THolder eqList, equipment.EquipmentOrHolderIterator_IHolder eqIt) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllEquipment", true);
                globaldefs.NamingAttributes_THelper.write ($out, meOrHolderName);
                $out.write_ulong (how_many);
                $in = _invoke ($out);
                eqList.value = equipment.EquipmentOrHolderList_THelper.read ($in);
                eqIt.value = equipment.EquipmentOrHolderIterator_IHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getAllEquipment (meOrHolderName, how_many, eqList, eqIt        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllEquipment


  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllEquipment(), but 
     * returns the object names instead of returning the 
     * entire objects.</p> 
     * 
  
     * <br>globaldefs::NamingAttributes_T meOrHolderName: the name of the ME or 
     * equipment holder for which to retrieve contained equipment and equipment 
     * holder names.
     * <br>unsigned long how_many: maximum number of names to return in the 
  
     * first batch.
     * <br>globaldefs::NamingAttributesList_T nameList: the first batch of 
     * names.
     * <br>globaldefs::NamingAttributesListIterator_I nameIt: the iterator to 
     * retrieve the remaining names.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getAllEquipment().
     * <br>
     **/
  public void getAllEquipmentNames (globaldefs.NameAndStringValue_T[] meOrHolderName, int how_many, globaldefs.NamingAttributesList_THolder nameList, globaldefs.NamingAttributesIterator_IHolder nameIt) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllEquipmentNames", true);
                globaldefs.NamingAttributes_THelper.write ($out, meOrHolderName);
                $out.write_ulong (how_many);
                $in = _invoke ($out);
                nameList.value = globaldefs.NamingAttributesList_THelper.read ($in);
                nameIt.value = globaldefs.NamingAttributesIterator_IHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getAllEquipmentNames (meOrHolderName, how_many, nameList, nameIt        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllEquipmentNames


  /**
     * <p> This service allows an NMS to request the PTPs/FTPs that are
     * directly supported by a given equipment. The PTPs that are returned
     * are those that share their physical layer with the primary equipment (i.e. 
     * that represent a port on the equipment or are connected by a fibre, wire, 
     * etc.). The FTPs that are returned are those which are implemented by the 
     * physical circuitry supported by the equipment and will include FTPs that 
     * are named from the specified equipment (the FTPs will depend upon the 
     * presence of that equipment for their most basic operation). </p>
     *
     * <p>When there is equipment protection, this operation reports PTPs/FTPs for 
     * the primary equipment only.  That is, when called on a protecting equipment 
     * (as opposed to the primary equipment), this operation returns an empty 
     * list, irrespective of the current switch status.</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve supported PTPs/FTPs.
     * <br>unsigned long how_many: the maximum number of PTPs/FTPs to be 
     * reported in the first batch.
     * <br>terminationPoint::TerminationPointList_T tpList: the first batch of 
     * PTPs/FTPs.
     * <br>terminationPoint::TerminationPointIterator_I tpIt: the iterator to 
     * retrieve the remaining PTPs/FTPs.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references object that 
     *  does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached.<br>
     * <br>
     **/
  public void getAllSupportedPTPs (globaldefs.NameAndStringValue_T[] equipmentName, int how_many, terminationPoint.TerminationPointList_THolder tpList, terminationPoint.TerminationPointIterator_IHolder tpIt) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllSupportedPTPs", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentName);
                $out.write_ulong (how_many);
                $in = _invoke ($out);
                tpList.value = terminationPoint.TerminationPointList_THelper.read ($in);
                tpIt.value = terminationPoint.TerminationPointIterator_IHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getAllSupportedPTPs (equipmentName, how_many, tpList, tpIt        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllSupportedPTPs


  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllSupportedPTPs(), but 
     * returns the object names instead of returning the 
     * entire objects.</p> 
     * 
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve supported PTPs/FTPs.
     * <br>unsigned long how_many: the maximum number of PTP/FTP names to be 
     * reported in the first batch.
     * <br>globaldefs::NamingAttributesList_T nameList: the first batch of 
     * PTP/FTP names.
     * <br>globaldefs::NamingAttributesListIterator_I nameIt: the iterator to 
     * retrieve the remaining PTP/FTP names.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getAllSupportedPTPs() .
     * <br>
     **/
  public void getAllSupportedPTPNames (globaldefs.NameAndStringValue_T[] equipmentName, int how_many, globaldefs.NamingAttributesList_THolder nameList, globaldefs.NamingAttributesIterator_IHolder nameIt) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllSupportedPTPNames", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentName);
                $out.write_ulong (how_many);
                $in = _invoke ($out);
                nameList.value = globaldefs.NamingAttributesList_THelper.read ($in);
                nameIt.value = globaldefs.NamingAttributesIterator_IHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getAllSupportedPTPNames (equipmentName, how_many, nameList, nameIt        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllSupportedPTPNames


  /** 
     * <p> This service allows an NMS to request all of the equipment 
     * which implement a PTP/FTP or a Matrix Flow Domain.
        *  For a PTP, the equipments that are returned
     * are those which support the physical layer of the PTP (i.e. have the
     * port on them or are connected by a fibre, wire, etc.). For an FTP, the 
     * equipments returned are those which support the physical circuitry 
     * implementing the FTP and will include the equipment from which the 
     * FTP is named (the FTPs will depend upon the presence of that equipment for 
     * their most basic operation). For a particular PTP/FTP
     * the Tx port/function and Rx port/function may be on different cards and in 
     * this case both should be returned.
     * Equipment that are used by the PTPs/FTPs, but that do not support them 
     * directly (such as a shared DEMUX card) are not reported.</p>
     *
     * <p>When there is equipment protection, this operation reports the primary 
     * equipment only.  The protecting equipment will not be returned by this 
     * operation.</p>
     *
     * <br>globaldefs::NamingAttributes_T ptpOrMfdName: The name of 
        *  the PTP/FTP or MFD for 
     * which to retrieve the supporting equipments. The termination point 
        * or matrix flow domain name 
     * must be explicit (a generic endpoint specification may not be used in this 
     * case). See <a href=../../../supportingDocumentation/SD1-25_objectNaming.pdf >SD1-25 SD1-25 
     * Object Naming</a> for further detail on FTP naming.
     *
  
     * <br>EquipmentOrHolderList_T eqList: The list of equipments (not 
     *  equipment holders) directly implementing the PTP/FTP or matrix flow domain.
     *
  
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when ptpOrMfdName does not reference a PTP/FTP 
     *  or matrix flow domain object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when ptpOrMfdName references a PTP/FTP object 
     *  or matrix flow domain that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is lost
     * <br>
     **/
  public void getAllSupportingEquipment (globaldefs.NameAndStringValue_T[] ptpOrMfdName, equipment.EquipmentOrHolderList_THolder eqList) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllSupportingEquipment", true);
                globaldefs.NamingAttributes_THelper.write ($out, ptpOrMfdName);
                $in = _invoke ($out);
                eqList.value = equipment.EquipmentOrHolderList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getAllSupportingEquipment (ptpOrMfdName, eqList        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllSupportingEquipment


  /**
     * <p>This operation has exactly the same behaviour as 
     * getAllSupportingEquipment(),
     * but returns the object names instead of returning the 
     * entire objects.</p> 
     * 
     * <br>globaldefs::NamingAttributes_T ptpOrMfdName: The name of the PTP/FTP
        * or Matrix Flow Domain for 
     * which to retrieve the supporting equipments. The termination point or 
        * matrix flow domain name 
     * must be explicit (a generic endpoint specification may not be used in this 
     * case). See <a href=../../../supportingDocumentation/SD1-25_objectNaming.pdf >SD1-25 SD1-25 
     * Object Naming</a> for further detail on FTP naming.
     *
  
     * <br>globaldefs::NamingAttributesList_T nameList: The list of equipment 
     *  names (not equipment holder names) directly implementing the PTP/FTP.
     *
  
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br> 
     * As for getAllSupportingEquipment().
     * <br>
     **/
  public void getAllSupportingEquipmentNames (globaldefs.NameAndStringValue_T[] ptpOrMfdName, globaldefs.NamingAttributesList_THolder nameList) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllSupportingEquipmentNames", true);
                globaldefs.NamingAttributes_THelper.write ($out, ptpOrMfdName);
                $in = _invoke ($out);
                nameList.value = globaldefs.NamingAttributesList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getAllSupportingEquipmentNames (ptpOrMfdName, nameList        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllSupportingEquipmentNames


  /**
     * <p>This service allows an NMS to request all of the equipment that supports
     * a given piece of equipment, e.g., the power pack and synchronization card 
     * that support a given piece of equipment.</p> 
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supporting equipments.
     * <br>EquipmentOrHolderList_T eqList: the list of equipment (not equipment 
     * holders) that support the given equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references an equipment 
     *  object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     **/
  public void getSupportingEquipment (globaldefs.NameAndStringValue_T[] equipmentName, equipment.EquipmentOrHolderList_THolder eqList) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSupportingEquipment", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentName);
                $in = _invoke ($out);
                eqList.value = equipment.EquipmentOrHolderList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getSupportingEquipment (equipmentName, eqList        );
            } finally {
                _releaseReply ($in);
            }
  } // getSupportingEquipment


  /**
     * <p>This operation has exactly the same behaviour as 
     * getSupportingEquipment(),
     * but returns the object names instead of returning the entire objects</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supporting equipments.
  
     * <br>globaldefs::NamingAttributesList_T nameList: the list of equipment
     * names (not equipment holders) that support the given equipment.. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getSupportingEquipment().
  
     * <br>
     **/
  public void getSupportingEquipmentNames (globaldefs.NameAndStringValue_T[] equipmentName, globaldefs.NamingAttributesList_THolder nameList) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSupportingEquipmentNames", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentName);
                $in = _invoke ($out);
                nameList.value = globaldefs.NamingAttributesList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getSupportingEquipmentNames (equipmentName, nameList        );
            } finally {
                _releaseReply ($in);
            }
  } // getSupportingEquipmentNames


  /**
     * <p>This service allows an NMS to request all of the pieces of equipment 
     * supported by a given piece of equipment, e.g., a power pack might support 
     * many circuit packs.</p> 
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supported equipment list.
     * <br>EquipmentOrHolderList_T eqList: the list of equipment (not equipment 
     * holders) supported by the given piece of equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, 
     * and cannot determine the reason it could not comply, 
     * it may raise this exception. <br>
     * EXCPT_INVALID_INPUT - Raised when equipmentName does not reference an 
     *  equipment object<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when equipmentName references an equipment 
     *  object that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     **/
  public void getSupportedEquipment (globaldefs.NameAndStringValue_T[] equipmentName, equipment.EquipmentOrHolderList_THolder eqList) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSupportedEquipment", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentName);
                $in = _invoke ($out);
                eqList.value = equipment.EquipmentOrHolderList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getSupportedEquipment (equipmentName, eqList        );
            } finally {
                _releaseReply ($in);
            }
  } // getSupportedEquipment


  /**
     * <p>This operation has exactly the same behaviour as 
     * getSupportedEquipment(),
     * but returns the object names instead of returning the entire objects</p>
     *
     * <br>globaldefs::NamingAttributes_T equipmentName: the name of the 
     * equipment for which to retrieve the supported equipment list.
     * <br>globaldefs::NamingAttributesList_T nameList: the list of equipment
     * names (not equipment holders) that are support by a given piece of 
     * equipment. 
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * As for getSupportedEquipment().
     * <br>
     **/
  public void getSupportedEquipmentNames (globaldefs.NameAndStringValue_T[] equipmentName, globaldefs.NamingAttributesList_THolder nameList) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSupportedEquipmentNames", true);
                globaldefs.NamingAttributes_THelper.write ($out, equipmentName);
                $in = _invoke ($out);
                nameList.value = globaldefs.NamingAttributesList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getSupportedEquipmentNames (equipmentName, nameList        );
            } finally {
                _releaseReply ($in);
            }
  } // getSupportedEquipmentNames


  /**
     * <p>The nativeEMSName is owned by the EMS.  It represents how an EMS user 
     * addresses an object on the EMS GUI.  The EMS may or may not support 
     * changing this value.</p>
     *
     * <p>When an object is created by the EMS, the EMS selects the nativeEMSName 
     * for the object.</p>
     *
     * <p>When an object is created by an NMS, the NMS specifies the userLabel for  
     * the object. If the EMS supports setting of nativeEMSNames, the 
     * nativeEMSName should be set to the same value as the userLabel.  If the EMS 
     * does not support setting of nativeEMSNames, or if the nativeEMSName has 
     * constraints that the userLabel does not satisfy, the EMS selects the 
     * nativeEMSName for the object.</p>
     *
     * <p>After an object has been created, the nativeEMSName may be changed by 
     * the NMS, if the EMS supports this functionality, using the setNativeEMSName 
     * operation.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName
     * <br> string nativeEMSName
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the nativeEMSName can not be set for 
     *  the specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is lost
     * <br>
     **/
  public void setNativeEMSName (globaldefs.NameAndStringValue_T[] objectName, String nativeEMSName) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNativeEMSName", true);
                globaldefs.NamingAttributes_THelper.write ($out, objectName);
                $out.write_string (nativeEMSName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNativeEMSName (objectName, nativeEMSName        );
            } finally {
                _releaseReply ($in);
            }
  } // setNativeEMSName


  /**
     * <p>The userLabel is owned by the NMSes.  It is a string assigned by an NMS 
     * to an object. The difference between the userLabel and the NamingAttributes 
     * name is that the userLabel is an attribute of the objects that 
     * may be "set" by the NMS through well defined interfaces (setUserLabel).</p>
     *
     * <p>When an object is created by an NMS, the NMS specifies the userLabel for 
     * the object.</p>
     *
     * <p>When an object is created by the EMS, the EMS sets the userLabel to the 
     * nativeEMSName.</p>
     *
     * <p>Once an object is created, the userLabel may only be changed by an NMS 
     * through the setUserLabel operation.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName: Name of the object for 
     *  which to change the userLabel.
     * <br> string userLabel: New user label to assign to the object
     * <br> boolean enforceUniqueness: Specifies whether or not userLabel should 
     * be checked for uniqueness amongst objects of the same class within the EMS.  
     * If true, then the operation will fail if userLabel is already in use.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references object which 
     *  does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the userLabel can not be set for the 
     *  specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * EXCPT_USERLABEL_IN_USE - Raised when the userLabel uniqueness constraint is 
     *  not met<br>
     * <br>
     **/
  public void setUserLabel (globaldefs.NameAndStringValue_T[] objectName, String userLabel, boolean enforceUniqueness) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setUserLabel", true);
                globaldefs.NamingAttributes_THelper.write ($out, objectName);
                $out.write_string (userLabel);
                $out.write_boolean (enforceUniqueness);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setUserLabel (objectName, userLabel, enforceUniqueness        );
            } finally {
                _releaseReply ($in);
            }
  } // setUserLabel


  /** 
     * <p>This service sets the owner attribute of the specified object.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName
     * <br> string owner
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - If EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the owner can not be set for the 
     *  specified object<br>
     * EXCPT_NE_COMM_LOSS - Raised when communications to managedElement is 
     *  lost<br>
     * <br>
     **/
  public void setOwner (globaldefs.NameAndStringValue_T[] objectName, String owner) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setOwner", true);
                globaldefs.NamingAttributes_THelper.write ($out, objectName);
                $out.write_string (owner);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setOwner (objectName, owner        );
            } finally {
                _releaseReply ($in);
            }
  } // setOwner


  /** 
     * <p>This service retrieves the capabilities of the manager.
     * All non-specified capabilities are assumed to be unsupported.</p>
     *
     * <br> CapabilityList_T capabilities
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of a non-specific EMS internal 
     *  failure<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request, and cannot determine the reason it could not comply, it may raise this exception. <br>
     **/
  public void getCapabilities (common.CapabilityList_THolder capabilities) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCapabilities", true);
                $in = _invoke ($out);
                capabilities.value = common.CapabilityList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getCapabilities (capabilities        );
            } finally {
                _releaseReply ($in);
            }
  } // getCapabilities


  /**
     * <p>This service sets the additional info attribute
     * of the object identified by objectName. This operation should be used
     * to set both vendor specific attributes as well as the attributes that
     * are formally defined in this interface specification. See <a 
     * href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     * Additional Information Usage</a> for further details.</p>
     *
     * <p>As an input only the list of parameters to be changed, removed, or
     * added shall be provided.  If an entry is to be removed, "-" shall
     * be specified as a value.  If a parameter is specified that is currently
     * not part of the additionalInfo attribute of the specified object
     * that parameter is added by the EMS with the specified value.
     * The EMS may reject removal and addition requests, however.</p>
     *
     * <p> The operation is best effort (except where specified otherwise for a 
     * particular parameter).  The output specifies the
     * values which were actually set.</p>
     *
     * <br> globaldefs::NamingAttributes_T objectName: the managed object
     * whose additional info parameters are intended to get modified
     *
     * <br> globaldefs::NVSList_T additionalInfo: list of parameters
     * to be changed, added, or removed (input), updated to provide the
     * actually changed or added parameters (output)
     *
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this
     *  service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal
     *  failure (see errorReason attribute of ProcessingFailureException())<br>
     * EXCPT_INVALID_INPUT - Raised when objectName is incorrectly formed,
     *  raised when an input parameter is syntactical incorrect and raised when a 
     *  parameter is identified as only "settable" using a "specific operation" in 
     *  the <a href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     *  Additional Information Usage</a> document<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when objectName references an object
     *  that does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when the communication to the managed
     *  element containing or hosting objectName is lost<br>
     * EXCPT_UNABLE_TO_COMPLY - Raised when the EMS is unable 
     *  to execute the request because at least one of the parameters although 
     *  valid can not be set and that parameter is identified as "not best effort" 
     *  in the <a href=../../../supportingDocumentation/SD1-1_AdditionalInfoUsage.pdf >SD1-1 
     *  Additional Information Usage</a> document)<br>
     * <br>
  
     **/
  public void setAdditionalInfo (globaldefs.NameAndStringValue_T[] objectName, globaldefs.NVSList_THolder additionalInfo) throws globaldefs.ProcessingFailureException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setAdditionalInfo", true);
                globaldefs.NamingAttributes_THelper.write ($out, objectName);
                globaldefs.NVSList_THelper.write ($out, additionalInfo.value);
                $in = _invoke ($out);
                additionalInfo.value = globaldefs.NVSList_THelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:mtnm.tmforum.org/globaldefs/ProcessingFailureException:1.0"))
                    throw globaldefs.ProcessingFailureExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setAdditionalInfo (objectName, additionalInfo        );
            } finally {
                _releaseReply ($in);
            }
  } // setAdditionalInfo

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:mtnm.tmforum.org/equipment/EquipmentInventoryMgr_I:1.0", 
    "IDL:mtnm.tmforum.org/common/Common_I:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _EquipmentInventoryMgr_IStub
