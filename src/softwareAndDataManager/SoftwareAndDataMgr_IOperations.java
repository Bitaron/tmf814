package softwareAndDataManager;


/**
* softwareAndDataManager/SoftwareAndDataMgr_IOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from softwareAndDataManager.idl
* Wednesday, June 15, 2016 7:24:41 PM COT
*/


/**
   * <p>Managed Elements store configuration data and maintain this on a real 
   * time basis (the ME configuration data). This configuration data include 
   * service data, related to ports, facilities, cross connects etc. The format 
   * and structure of this data is proprietary in nature.</p>
   *
   * <p>Most service providers consider it important to take backup of this data 
   * periodically. This backup data can be archived outside of the ME and if 
   * necessary can be restored back onto the ME.</p>
   *
   * <p> The MTNM interface supports database backup on demand from the NMS. The 
   * storage of these backups is a local matter of the EMS and backup is not 
   * transferred across this interface to the NMS. The EMS may store more than 
   * one backup for each ME. How many backups are stored for each ME is a local 
   * matter of EMS (potentially configurable within the EMS). A new backup may 
   * override the oldest backup existing in the EMS.</p> 
   *
   * <p>To give an example, if an EMS is configured to store only 2 backups for 
   * each ME, the third backup will over-write the first backup (oldest).</p> 
   *
   * <p>Each backup is identified by the Managed Element Name and the Date and 
   * Time when the backup was taken by the EMS.</p>
   *
   * <p>The softwareAndDataManager is used to gain access to operations related 
   * to backing up ME configuration data.</p>
   *
   * <p>A handle to an instance of this interface is gained via the
   * emsSession::EmsSession_I::getManager() operation in Manager.</p>
   **/
public interface SoftwareAndDataMgr_IOperations  extends common.Common_IOperations
{

  /**
     * <p>This method will initiate a backup request on the specified ME. This is 
     * an asynchronous operation. The EMS will send the results of the backup 
     * operation for the Managed Element via the Notification Service. The NMS 
     * can get the status of any backup operation on-demand (see 
     * getMEBackupStatus() ).</p>
     * 
     * <br>  globaldefs::NamingAttributes_T managedElementName: The name of the 
     * ME for which a backup of configuration data is required.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when input parameter are syntactical 
     *  incorrect<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when the ME does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication to the ME is lost<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
  void backupME (globaldefs.NameAndStringValue_T[] managedElementName) throws globaldefs.ProcessingFailureException;

  /**
     * <p>This method can be used by the NMS to get the current backup status of 
     * an individual ME.</p>
     * 
     * <br> globaldefs::NamingAttributes_T managedElementName: The name of the 
     * ME for which a status of the backup of configuration data is required.
     * <br> BackupStatus_T  backupStatus: The status of the backup of 
     * configuration data.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INVALID_INPUT - Raised when input parameter are syntactical 
     *  incorrect<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when the ME does not exist<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
  void getMEBackupStatus (globaldefs.NameAndStringValue_T[] managedElementName, softwareAndDataManager.BackupStatus_THolder backupStatus) throws globaldefs.ProcessingFailureException;

  /**
     * <p> This method will abort a backup of ME configuration data that is 
     * pending or in progress. If there is no backup of configuration data of the ME 
     * pending or in progress an exception will be thrown.</p>
     * 
     * <br>  globaldefs::NamingAttributes_T managedElementName: The name of the 
     * ME for which the backup of configuration data is to be aborted.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INVALID_INPUT - Raised when input parameter are syntactical 
     *  incorrect<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when the ME does not exist<br>
     * EXCPT_NE_COMM_LOSS - Raised when communication to the ME is lost<br>
     * EXCPT_NOT_IN_VALID_STATE - Raised when there is no pending/in progress 
     *  backup of configuration data on the named ME.<BR>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
  void abortMEBackup (globaldefs.NameAndStringValue_T[] managedElementName) throws globaldefs.ProcessingFailureException;

  /**
     * <p>The NMS will invoke this method to determine what configuration data 
     * backups exist in the EMS for a specified list of MEs.</p>
     *
     * <p>This method will return the list of the ids of all configuration data 
     * backups for specified MEs. If the list of MEs in the request is empty, the 
     * ids of all configuration data backups will be returned for all MEs.</p>
     * 
     * <p>In order to allow the NMS to deal with a large number of objects,
     * this operation uses an iterator. See
     * <a href=../../../supportingDocumentation/SD1-15_iterators.pdf >SD1-15 iterator overview</a>
     * for information on how iterators are used in this interface.</p>
     * 
     * <br>  globaldefs::NamingAttributesList_T managedElementNameList: The list 
     * of names of the MEs for which the ids of the conconfiguration data should 
     * be returned. If one or more of the MEs do not exist the operation will be 
     * aborted.
     * <br>  unsigned long how_many: Maximum number of configuration data backup 
     * ids to report in the first batch.
     * <br>  BackupIdList_T backupList: First batch of configuration data backup 
     * ids.
     * <br>  BackupIdIterator_I backupIt: Iterator to retrieve the remaining 
     * configuration data backup ids.
     * <br><b>Raises</b> globaldefs::ProcessingFailureException <br>
     * EXCPT_NOT_IMPLEMENTED - Raised if the EMS does not support this service<br>
     * EXCPT_INTERNAL_ERROR - Raised in case of non-specific EMS internal 
     *  failure<br>
     * EXCPT_INVALID_INPUT - Raised when input parameter are syntactical 
     *  incorrect<br>
     * EXCPT_ENTITY_NOT_FOUND - Raised when one or more MEs in the list do not 
     *  exist<br>
     * EXCPT_TOO_MANY_OPEN_ITERATORS - Raised when maximum number of iterators 
     *  that the EMS can support has been reached.<br>
     * EXCPT_UNABLE_TO_COMPLY - If the EMS cannot comply with the request,
     *  and cannot determine the reason it could not comply,
     *  it may raise this exception. <br>
     * <br>
     **/
  void getBackupList (globaldefs.NameAndStringValue_T[][] managedElementNameList, int how_many, softwareAndDataManager.BackupIdList_THolder backupList, softwareAndDataManager.BackupIdIterator_IHolder backupIt) throws globaldefs.ProcessingFailureException;
} // interface SoftwareAndDataMgr_IOperations
