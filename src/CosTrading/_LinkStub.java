package CosTrading;


/**
* CosTrading/_LinkStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosTrading.idl
* Wednesday, June 15, 2016 7:24:33 PM COT
*/


/** This interface is used to federate traders
 * together and manage the links between them.
 */
public class _LinkStub extends org.omg.CORBA.portable.ObjectImpl implements CosTrading.Link
{


  /** This operation links a federated trader.
   *
   * @param name - The name of the linked trader. 
   * @param target - The Lookup interface to link.
   * @param def_pass_on_follow_rule - The default lookup policy to propagate 
   *                                  if none was specified in the query.
   * @param limiting_follow_rule - The most permissive link policy that can
   *                               be applied to the link. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises DuplicateLinkName - If a link with the same name already exists.
   * @raises InvalidLookupRef - If the specified target reference is nil.
   * @raises DefaultFollowTooPermissive - If the default lookup policy for the
   *                                      link is more premissive than the limiting
   *                                      lookup policy for the link.
   * @raises LimitingFollowTooPermissive - If the link default lookup policy is
   *                                       more permissive that the corresponding
   *                                       trader maximum allowed value.
   */
  public void add_link (String name, CosTrading.Lookup target, CosTrading.FollowOption def_pass_on_follow_rule, CosTrading.FollowOption limiting_follow_rule) throws CosTrading.LinkPackage.IllegalLinkName, CosTrading.LinkPackage.DuplicateLinkName, CosTrading.InvalidLookupRef, CosTrading.LinkPackage.DefaultFollowTooPermissive, CosTrading.LinkPackage.LimitingFollowTooPermissive
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("add_link", true);
                CosTrading.LinkNameHelper.write ($out, name);
                CosTrading.LookupHelper.write ($out, target);
                CosTrading.FollowOptionHelper.write ($out, def_pass_on_follow_rule);
                CosTrading.FollowOptionHelper.write ($out, limiting_follow_rule);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/Link/IllegalLinkName:1.0"))
                    throw CosTrading.LinkPackage.IllegalLinkNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Link/DuplicateLinkName:1.0"))
                    throw CosTrading.LinkPackage.DuplicateLinkNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/InvalidLookupRef:1.0"))
                    throw CosTrading.InvalidLookupRefHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Link/DefaultFollowTooPermissive:1.0"))
                    throw CosTrading.LinkPackage.DefaultFollowTooPermissiveHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Link/LimitingFollowTooPermissive:1.0"))
                    throw CosTrading.LinkPackage.LimitingFollowTooPermissiveHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                add_link (name, target, def_pass_on_follow_rule, limiting_follow_rule        );
            } finally {
                _releaseReply ($in);
            }
  } // add_link


  /** This operation removes a link to a federated trader. 
   *
   * @param name - The name of the linked trader. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   */
  public void remove_link (String name) throws CosTrading.LinkPackage.IllegalLinkName, CosTrading.LinkPackage.UnknownLinkName
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("remove_link", true);
                CosTrading.LinkNameHelper.write ($out, name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/Link/IllegalLinkName:1.0"))
                    throw CosTrading.LinkPackage.IllegalLinkNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Link/UnknownLinkName:1.0"))
                    throw CosTrading.LinkPackage.UnknownLinkNameHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                remove_link (name        );
            } finally {
                _releaseReply ($in);
            }
  } // remove_link


  /** This operation describes a link to a federated trader,
   * returning a structure containing the link description.
   *
   * @returns - A link infromation structure.
   * @param name - The name of the linked trader. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   */
  public CosTrading.LinkPackage.LinkInfo describe_link (String name) throws CosTrading.LinkPackage.IllegalLinkName, CosTrading.LinkPackage.UnknownLinkName
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("describe_link", true);
                CosTrading.LinkNameHelper.write ($out, name);
                $in = _invoke ($out);
                CosTrading.LinkPackage.LinkInfo $result = CosTrading.LinkPackage.LinkInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/Link/IllegalLinkName:1.0"))
                    throw CosTrading.LinkPackage.IllegalLinkNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Link/UnknownLinkName:1.0"))
                    throw CosTrading.LinkPackage.UnknownLinkNameHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return describe_link (name        );
            } finally {
                _releaseReply ($in);
            }
  } // describe_link


  /** This operation returns a sequence of links. */
  public String[] list_links ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("list_links", true);
                $in = _invoke ($out);
                String $result[] = CosTrading.LinkNameSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return list_links (        );
            } finally {
                _releaseReply ($in);
            }
  } // list_links


  /** This operation modifies a link to a federated trader,
   * changing the follow options that are applied to the link.
   *
   * @param name - The name of the linked trader. 
   * @param def_pass_on_follow_rule - The default lookup policy to propagate 
   *                                  if none was specified in the query.
   * @param limiting_follow_rule - The most permissive link policy that can
   *                               be applied to the link. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   * @raises DefaultFollowTooPermissive - If the default lookup policy for the
   *                                      link is more premissive than the limiting
   *                                      lookup policy for the link.
   * @raises LimitingFollowTooPermissive - If the link default lookup policy is
   *                                       more permissive that the corresponding
   *                                       trader maximum allowed value.
   */
  public void modify_link (String name, CosTrading.FollowOption def_pass_on_follow_rule, CosTrading.FollowOption limiting_follow_rule) throws CosTrading.LinkPackage.IllegalLinkName, CosTrading.LinkPackage.UnknownLinkName, CosTrading.LinkPackage.DefaultFollowTooPermissive, CosTrading.LinkPackage.LimitingFollowTooPermissive
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("modify_link", true);
                CosTrading.LinkNameHelper.write ($out, name);
                CosTrading.FollowOptionHelper.write ($out, def_pass_on_follow_rule);
                CosTrading.FollowOptionHelper.write ($out, limiting_follow_rule);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/Link/IllegalLinkName:1.0"))
                    throw CosTrading.LinkPackage.IllegalLinkNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Link/UnknownLinkName:1.0"))
                    throw CosTrading.LinkPackage.UnknownLinkNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Link/DefaultFollowTooPermissive:1.0"))
                    throw CosTrading.LinkPackage.DefaultFollowTooPermissiveHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Link/LimitingFollowTooPermissive:1.0"))
                    throw CosTrading.LinkPackage.LimitingFollowTooPermissiveHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                modify_link (name, def_pass_on_follow_rule, limiting_follow_rule        );
            } finally {
                _releaseReply ($in);
            }
  } // modify_link

  public CosTrading.Lookup lookup_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_lookup_if", true);
                $in = _invoke ($out);
                CosTrading.Lookup $result = CosTrading.LookupHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return lookup_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // lookup_if

  public CosTrading.Register register_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_register_if", true);
                $in = _invoke ($out);
                CosTrading.Register $result = CosTrading.RegisterHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return register_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // register_if

  public CosTrading.Link link_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_link_if", true);
                $in = _invoke ($out);
                CosTrading.Link $result = CosTrading.LinkHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return link_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // link_if

  public CosTrading.Proxy proxy_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_proxy_if", true);
                $in = _invoke ($out);
                CosTrading.Proxy $result = CosTrading.ProxyHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return proxy_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // proxy_if

  public CosTrading.Admin admin_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_admin_if", true);
                $in = _invoke ($out);
                CosTrading.Admin $result = CosTrading.AdminHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return admin_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // admin_if

  public boolean supports_modifiable_properties ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_modifiable_properties", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_modifiable_properties (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_modifiable_properties

  public boolean supports_dynamic_properties ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_dynamic_properties", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_dynamic_properties (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_dynamic_properties

  public boolean supports_proxy_offers ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_proxy_offers", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_proxy_offers (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_proxy_offers

  public org.omg.CORBA.Object type_repos ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_type_repos", true);
                $in = _invoke ($out);
                org.omg.CORBA.Object $result = CosTrading.TypeRepositoryHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return type_repos (        );
            } finally {
                _releaseReply ($in);
            }
  } // type_repos

  public CosTrading.FollowOption max_link_follow_policy ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_max_link_follow_policy", true);
                $in = _invoke ($out);
                CosTrading.FollowOption $result = CosTrading.FollowOptionHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return max_link_follow_policy (        );
            } finally {
                _releaseReply ($in);
            }
  } // max_link_follow_policy

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/Link:1.0", 
    "IDL:omg.org/CosTrading/TraderComponents:1.0", 
    "IDL:omg.org/CosTrading/SupportAttributes:1.0", 
    "IDL:omg.org/CosTrading/LinkAttributes:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _LinkStub
