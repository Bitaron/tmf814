package CosTrading;


/**
* CosTrading/LinkPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosTrading.idl
* Wednesday, June 15, 2016 7:24:33 PM COT
*/


/** This interface is used to federate traders
 * together and manage the links between them.
 */
public abstract class LinkPOA extends org.omg.PortableServer.Servant
 implements CosTrading.LinkOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("add_link", new java.lang.Integer (0));
    _methods.put ("remove_link", new java.lang.Integer (1));
    _methods.put ("describe_link", new java.lang.Integer (2));
    _methods.put ("list_links", new java.lang.Integer (3));
    _methods.put ("modify_link", new java.lang.Integer (4));
    _methods.put ("_get_lookup_if", new java.lang.Integer (5));
    _methods.put ("_get_register_if", new java.lang.Integer (6));
    _methods.put ("_get_link_if", new java.lang.Integer (7));
    _methods.put ("_get_proxy_if", new java.lang.Integer (8));
    _methods.put ("_get_admin_if", new java.lang.Integer (9));
    _methods.put ("_get_supports_modifiable_properties", new java.lang.Integer (10));
    _methods.put ("_get_supports_dynamic_properties", new java.lang.Integer (11));
    _methods.put ("_get_supports_proxy_offers", new java.lang.Integer (12));
    _methods.put ("_get_type_repos", new java.lang.Integer (13));
    _methods.put ("_get_max_link_follow_policy", new java.lang.Integer (14));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /** This operation links a federated trader.
   *
   * @param name - The name of the linked trader. 
   * @param target - The Lookup interface to link.
   * @param def_pass_on_follow_rule - The default lookup policy to propagate 
   *                                  if none was specified in the query.
   * @param limiting_follow_rule - The most permissive link policy that can
   *                               be applied to the link. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises DuplicateLinkName - If a link with the same name already exists.
   * @raises InvalidLookupRef - If the specified target reference is nil.
   * @raises DefaultFollowTooPermissive - If the default lookup policy for the
   *                                      link is more premissive than the limiting
   *                                      lookup policy for the link.
   * @raises LimitingFollowTooPermissive - If the link default lookup policy is
   *                                       more permissive that the corresponding
   *                                       trader maximum allowed value.
   */
       case 0:  // CosTrading/Link/add_link
       {
         try {
           String name = CosTrading.LinkNameHelper.read (in);
           CosTrading.Lookup target = CosTrading.LookupHelper.read (in);
           CosTrading.FollowOption def_pass_on_follow_rule = CosTrading.FollowOptionHelper.read (in);
           CosTrading.FollowOption limiting_follow_rule = CosTrading.FollowOptionHelper.read (in);
           this.add_link (name, target, def_pass_on_follow_rule, limiting_follow_rule);
           out = $rh.createReply();
         } catch (CosTrading.LinkPackage.IllegalLinkName $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.IllegalLinkNameHelper.write (out, $ex);
         } catch (CosTrading.LinkPackage.DuplicateLinkName $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.DuplicateLinkNameHelper.write (out, $ex);
         } catch (CosTrading.InvalidLookupRef $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.InvalidLookupRefHelper.write (out, $ex);
         } catch (CosTrading.LinkPackage.DefaultFollowTooPermissive $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.DefaultFollowTooPermissiveHelper.write (out, $ex);
         } catch (CosTrading.LinkPackage.LimitingFollowTooPermissive $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.LimitingFollowTooPermissiveHelper.write (out, $ex);
         }
         break;
       }


  /** This operation removes a link to a federated trader. 
   *
   * @param name - The name of the linked trader. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   */
       case 1:  // CosTrading/Link/remove_link
       {
         try {
           String name = CosTrading.LinkNameHelper.read (in);
           this.remove_link (name);
           out = $rh.createReply();
         } catch (CosTrading.LinkPackage.IllegalLinkName $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.IllegalLinkNameHelper.write (out, $ex);
         } catch (CosTrading.LinkPackage.UnknownLinkName $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.UnknownLinkNameHelper.write (out, $ex);
         }
         break;
       }


  /** This operation describes a link to a federated trader,
   * returning a structure containing the link description.
   *
   * @returns - A link infromation structure.
   * @param name - The name of the linked trader. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   */
       case 2:  // CosTrading/Link/describe_link
       {
         try {
           String name = CosTrading.LinkNameHelper.read (in);
           CosTrading.LinkPackage.LinkInfo $result = null;
           $result = this.describe_link (name);
           out = $rh.createReply();
           CosTrading.LinkPackage.LinkInfoHelper.write (out, $result);
         } catch (CosTrading.LinkPackage.IllegalLinkName $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.IllegalLinkNameHelper.write (out, $ex);
         } catch (CosTrading.LinkPackage.UnknownLinkName $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.UnknownLinkNameHelper.write (out, $ex);
         }
         break;
       }


  /** This operation returns a sequence of links. */
       case 3:  // CosTrading/Link/list_links
       {
         String $result[] = null;
         $result = this.list_links ();
         out = $rh.createReply();
         CosTrading.LinkNameSeqHelper.write (out, $result);
         break;
       }


  /** This operation modifies a link to a federated trader,
   * changing the follow options that are applied to the link.
   *
   * @param name - The name of the linked trader. 
   * @param def_pass_on_follow_rule - The default lookup policy to propagate 
   *                                  if none was specified in the query.
   * @param limiting_follow_rule - The most permissive link policy that can
   *                               be applied to the link. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   * @raises DefaultFollowTooPermissive - If the default lookup policy for the
   *                                      link is more premissive than the limiting
   *                                      lookup policy for the link.
   * @raises LimitingFollowTooPermissive - If the link default lookup policy is
   *                                       more permissive that the corresponding
   *                                       trader maximum allowed value.
   */
       case 4:  // CosTrading/Link/modify_link
       {
         try {
           String name = CosTrading.LinkNameHelper.read (in);
           CosTrading.FollowOption def_pass_on_follow_rule = CosTrading.FollowOptionHelper.read (in);
           CosTrading.FollowOption limiting_follow_rule = CosTrading.FollowOptionHelper.read (in);
           this.modify_link (name, def_pass_on_follow_rule, limiting_follow_rule);
           out = $rh.createReply();
         } catch (CosTrading.LinkPackage.IllegalLinkName $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.IllegalLinkNameHelper.write (out, $ex);
         } catch (CosTrading.LinkPackage.UnknownLinkName $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.UnknownLinkNameHelper.write (out, $ex);
         } catch (CosTrading.LinkPackage.DefaultFollowTooPermissive $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.DefaultFollowTooPermissiveHelper.write (out, $ex);
         } catch (CosTrading.LinkPackage.LimitingFollowTooPermissive $ex) {
           out = $rh.createExceptionReply ();
           CosTrading.LinkPackage.LimitingFollowTooPermissiveHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // CosTrading/TraderComponents/_get_lookup_if
       {
         CosTrading.Lookup $result = null;
         $result = this.lookup_if ();
         out = $rh.createReply();
         CosTrading.LookupHelper.write (out, $result);
         break;
       }

       case 6:  // CosTrading/TraderComponents/_get_register_if
       {
         CosTrading.Register $result = null;
         $result = this.register_if ();
         out = $rh.createReply();
         CosTrading.RegisterHelper.write (out, $result);
         break;
       }

       case 7:  // CosTrading/TraderComponents/_get_link_if
       {
         CosTrading.Link $result = null;
         $result = this.link_if ();
         out = $rh.createReply();
         CosTrading.LinkHelper.write (out, $result);
         break;
       }

       case 8:  // CosTrading/TraderComponents/_get_proxy_if
       {
         CosTrading.Proxy $result = null;
         $result = this.proxy_if ();
         out = $rh.createReply();
         CosTrading.ProxyHelper.write (out, $result);
         break;
       }

       case 9:  // CosTrading/TraderComponents/_get_admin_if
       {
         CosTrading.Admin $result = null;
         $result = this.admin_if ();
         out = $rh.createReply();
         CosTrading.AdminHelper.write (out, $result);
         break;
       }

       case 10:  // CosTrading/SupportAttributes/_get_supports_modifiable_properties
       {
         boolean $result = false;
         $result = this.supports_modifiable_properties ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 11:  // CosTrading/SupportAttributes/_get_supports_dynamic_properties
       {
         boolean $result = false;
         $result = this.supports_dynamic_properties ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 12:  // CosTrading/SupportAttributes/_get_supports_proxy_offers
       {
         boolean $result = false;
         $result = this.supports_proxy_offers ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 13:  // CosTrading/SupportAttributes/_get_type_repos
       {
         org.omg.CORBA.Object $result = null;
         $result = this.type_repos ();
         out = $rh.createReply();
         org.omg.CORBA.ObjectHelper.write (out, $result);
         break;
       }

       case 14:  // CosTrading/LinkAttributes/_get_max_link_follow_policy
       {
         CosTrading.FollowOption $result = null;
         $result = this.max_link_follow_policy ();
         out = $rh.createReply();
         CosTrading.FollowOptionHelper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/Link:1.0", 
    "IDL:omg.org/CosTrading/TraderComponents:1.0", 
    "IDL:omg.org/CosTrading/SupportAttributes:1.0", 
    "IDL:omg.org/CosTrading/LinkAttributes:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Link _this() 
  {
    return LinkHelper.narrow(
    super._this_object());
  }

  public Link _this(org.omg.CORBA.ORB orb) 
  {
    return LinkHelper.narrow(
    super._this_object(orb));
  }


} // class LinkPOA
