package CosTrading;


/**
* CosTrading/_ProxyStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosTrading.idl
* Wednesday, June 15, 2016 7:24:33 PM COT
*/


/** This interface supports proxy offers.
 * It is not yet supported.
 */
public class _ProxyStub extends org.omg.CORBA.portable.ObjectImpl implements CosTrading.Proxy
{


  /* doc: 51 */
  public String export_proxy (CosTrading.Lookup target, String type, CosTrading.Property[] properties, boolean if_match_all, String recipe, CosTrading.Policy[] policies_to_pass_on) throws CosTrading.IllegalServiceType, CosTrading.UnknownServiceType, CosTrading.InvalidLookupRef, CosTrading.IllegalPropertyName, CosTrading.PropertyTypeMismatch, CosTrading.ReadonlyDynamicProperty, CosTrading.MissingMandatoryProperty, CosTrading.ProxyPackage.IllegalRecipe, CosTrading.DuplicatePropertyName, CosTrading.DuplicatePolicyName
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("export_proxy", true);
                CosTrading.LookupHelper.write ($out, target);
                CosTrading.ServiceTypeNameHelper.write ($out, type);
                CosTrading.PropertySeqHelper.write ($out, properties);
                $out.write_boolean (if_match_all);
                CosTrading.ProxyPackage.ConstraintRecipeHelper.write ($out, recipe);
                CosTrading.PolicySeqHelper.write ($out, policies_to_pass_on);
                $in = _invoke ($out);
                String $result = CosTrading.OfferIdHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/IllegalServiceType:1.0"))
                    throw CosTrading.IllegalServiceTypeHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/UnknownServiceType:1.0"))
                    throw CosTrading.UnknownServiceTypeHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/InvalidLookupRef:1.0"))
                    throw CosTrading.InvalidLookupRefHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/IllegalPropertyName:1.0"))
                    throw CosTrading.IllegalPropertyNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/PropertyTypeMismatch:1.0"))
                    throw CosTrading.PropertyTypeMismatchHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/ReadonlyDynamicProperty:1.0"))
                    throw CosTrading.ReadonlyDynamicPropertyHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/MissingMandatoryProperty:1.0"))
                    throw CosTrading.MissingMandatoryPropertyHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Proxy/IllegalRecipe:1.0"))
                    throw CosTrading.ProxyPackage.IllegalRecipeHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/DuplicatePropertyName:1.0"))
                    throw CosTrading.DuplicatePropertyNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/DuplicatePolicyName:1.0"))
                    throw CosTrading.DuplicatePolicyNameHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return export_proxy (target, type, properties, if_match_all, recipe, policies_to_pass_on        );
            } finally {
                _releaseReply ($in);
            }
  } // export_proxy


  /* enddoc */
  public void withdraw_proxy (String id) throws CosTrading.IllegalOfferId, CosTrading.UnknownOfferId, CosTrading.ProxyPackage.NotProxyOfferId
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("withdraw_proxy", true);
                CosTrading.OfferIdHelper.write ($out, id);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/IllegalOfferId:1.0"))
                    throw CosTrading.IllegalOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/UnknownOfferId:1.0"))
                    throw CosTrading.UnknownOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Proxy/NotProxyOfferId:1.0"))
                    throw CosTrading.ProxyPackage.NotProxyOfferIdHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                withdraw_proxy (id        );
            } finally {
                _releaseReply ($in);
            }
  } // withdraw_proxy

  public CosTrading.ProxyPackage.ProxyInfo describe_proxy (String id) throws CosTrading.IllegalOfferId, CosTrading.UnknownOfferId, CosTrading.ProxyPackage.NotProxyOfferId
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("describe_proxy", true);
                CosTrading.OfferIdHelper.write ($out, id);
                $in = _invoke ($out);
                CosTrading.ProxyPackage.ProxyInfo $result = CosTrading.ProxyPackage.ProxyInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/IllegalOfferId:1.0"))
                    throw CosTrading.IllegalOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/UnknownOfferId:1.0"))
                    throw CosTrading.UnknownOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Proxy/NotProxyOfferId:1.0"))
                    throw CosTrading.ProxyPackage.NotProxyOfferIdHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return describe_proxy (id        );
            } finally {
                _releaseReply ($in);
            }
  } // describe_proxy

  public CosTrading.Lookup lookup_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_lookup_if", true);
                $in = _invoke ($out);
                CosTrading.Lookup $result = CosTrading.LookupHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return lookup_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // lookup_if

  public CosTrading.Register register_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_register_if", true);
                $in = _invoke ($out);
                CosTrading.Register $result = CosTrading.RegisterHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return register_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // register_if

  public CosTrading.Link link_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_link_if", true);
                $in = _invoke ($out);
                CosTrading.Link $result = CosTrading.LinkHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return link_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // link_if

  public CosTrading.Proxy proxy_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_proxy_if", true);
                $in = _invoke ($out);
                CosTrading.Proxy $result = CosTrading.ProxyHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return proxy_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // proxy_if

  public CosTrading.Admin admin_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_admin_if", true);
                $in = _invoke ($out);
                CosTrading.Admin $result = CosTrading.AdminHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return admin_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // admin_if

  public boolean supports_modifiable_properties ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_modifiable_properties", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_modifiable_properties (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_modifiable_properties

  public boolean supports_dynamic_properties ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_dynamic_properties", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_dynamic_properties (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_dynamic_properties

  public boolean supports_proxy_offers ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_proxy_offers", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_proxy_offers (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_proxy_offers

  public org.omg.CORBA.Object type_repos ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_type_repos", true);
                $in = _invoke ($out);
                org.omg.CORBA.Object $result = CosTrading.TypeRepositoryHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return type_repos (        );
            } finally {
                _releaseReply ($in);
            }
  } // type_repos

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/Proxy:1.0", 
    "IDL:omg.org/CosTrading/TraderComponents:1.0", 
    "IDL:omg.org/CosTrading/SupportAttributes:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _ProxyStub
