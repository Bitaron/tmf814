package CosTrading;


/**
* CosTrading/_OfferIdIteratorStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosTrading.idl
* Wednesday, June 15, 2016 7:24:33 PM COT
*/


/** This interface supports operations to iterate through
 * lists of OfferIds returned by the CosTrading::Admin
 * interface.
 */
public class _OfferIdIteratorStub extends org.omg.CORBA.portable.ObjectImpl implements CosTrading.OfferIdIterator
{


  /** This operation returns the number of remaining
   * OfferIds contained within the iterator.
   *
   * @returns - The number of remaining OfferIds.
   * @raises UnknownMaxLeft - If the number of remaining OfferIds
   *                          cannot be determined. 
   */
  public int max_left () throws CosTrading.UnknownMaxLeft
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("max_left", true);
                $in = _invoke ($out);
                int $result = $in.read_ulong ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/UnknownMaxLeft:1.0"))
                    throw CosTrading.UnknownMaxLeftHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return max_left (        );
            } finally {
                _releaseReply ($in);
            }
  } // max_left


  /** This operation returns up to a specified number
   * of remaining OfferIDs.
   *
   * @param n - The number of OfferIds to return.
   * @param ids - The sequence of returned OfferIds.
   * @returns - TRUE if there are more OfferIds to retrieve.
   */
  public boolean next_n (int n, CosTrading.OfferIdSeqHolder ids)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("next_n", true);
                $out.write_ulong (n);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                ids.value = CosTrading.OfferIdSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return next_n (n, ids        );
            } finally {
                _releaseReply ($in);
            }
  } // next_n


  /** This operation destroys the OfferIDIterator and
   * and any OfferIds it contains. This should be called
   * after a client has finished with the iterator.
   */
  public void destroy ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("destroy", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                destroy (        );
            } finally {
                _releaseReply ($in);
            }
  } // destroy

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/OfferIdIterator:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _OfferIdIteratorStub
