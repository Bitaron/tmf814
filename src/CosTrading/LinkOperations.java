package CosTrading;


/**
* CosTrading/LinkOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosTrading.idl
* Wednesday, June 15, 2016 7:24:33 PM COT
*/


/** This interface is used to federate traders
 * together and manage the links between them.
 */
public interface LinkOperations  extends CosTrading.TraderComponentsOperations, CosTrading.SupportAttributesOperations, CosTrading.LinkAttributesOperations
{

  /** This operation links a federated trader.
   *
   * @param name - The name of the linked trader. 
   * @param target - The Lookup interface to link.
   * @param def_pass_on_follow_rule - The default lookup policy to propagate 
   *                                  if none was specified in the query.
   * @param limiting_follow_rule - The most permissive link policy that can
   *                               be applied to the link. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises DuplicateLinkName - If a link with the same name already exists.
   * @raises InvalidLookupRef - If the specified target reference is nil.
   * @raises DefaultFollowTooPermissive - If the default lookup policy for the
   *                                      link is more premissive than the limiting
   *                                      lookup policy for the link.
   * @raises LimitingFollowTooPermissive - If the link default lookup policy is
   *                                       more permissive that the corresponding
   *                                       trader maximum allowed value.
   */
  void add_link (String name, CosTrading.Lookup target, CosTrading.FollowOption def_pass_on_follow_rule, CosTrading.FollowOption limiting_follow_rule) throws CosTrading.LinkPackage.IllegalLinkName, CosTrading.LinkPackage.DuplicateLinkName, CosTrading.InvalidLookupRef, CosTrading.LinkPackage.DefaultFollowTooPermissive, CosTrading.LinkPackage.LimitingFollowTooPermissive;

  /** This operation removes a link to a federated trader. 
   *
   * @param name - The name of the linked trader. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   */
  void remove_link (String name) throws CosTrading.LinkPackage.IllegalLinkName, CosTrading.LinkPackage.UnknownLinkName;

  /** This operation describes a link to a federated trader,
   * returning a structure containing the link description.
   *
   * @returns - A link infromation structure.
   * @param name - The name of the linked trader. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   */
  CosTrading.LinkPackage.LinkInfo describe_link (String name) throws CosTrading.LinkPackage.IllegalLinkName, CosTrading.LinkPackage.UnknownLinkName;

  /** This operation returns a sequence of links. */
  String[] list_links ();

  /** This operation modifies a link to a federated trader,
   * changing the follow options that are applied to the link.
   *
   * @param name - The name of the linked trader. 
   * @param def_pass_on_follow_rule - The default lookup policy to propagate 
   *                                  if none was specified in the query.
   * @param limiting_follow_rule - The most permissive link policy that can
   *                               be applied to the link. 
   *
   * @raises IllegalLinkName - If the specified link name has invalid syntax.
   * @raises UnknownLinkName - If the specified link cannot be found.
   * @raises DefaultFollowTooPermissive - If the default lookup policy for the
   *                                      link is more premissive than the limiting
   *                                      lookup policy for the link.
   * @raises LimitingFollowTooPermissive - If the link default lookup policy is
   *                                       more permissive that the corresponding
   *                                       trader maximum allowed value.
   */
  void modify_link (String name, CosTrading.FollowOption def_pass_on_follow_rule, CosTrading.FollowOption limiting_follow_rule) throws CosTrading.LinkPackage.IllegalLinkName, CosTrading.LinkPackage.UnknownLinkName, CosTrading.LinkPackage.DefaultFollowTooPermissive, CosTrading.LinkPackage.LimitingFollowTooPermissive;
} // interface LinkOperations
