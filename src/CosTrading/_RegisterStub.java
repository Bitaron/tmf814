package CosTrading;


/**
* CosTrading/_RegisterStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CosTrading.idl
* Wednesday, June 15, 2016 7:24:33 PM COT
*/


/** This interface is used export offers of service to
 * the trader and manage these offers.
 */
public class _RegisterStub extends org.omg.CORBA.portable.ObjectImpl implements CosTrading.Register
{


  /* doc: 37 */
  public String export (org.omg.CORBA.Object reference, String type, CosTrading.Property[] properties) throws CosTrading.RegisterPackage.InvalidObjectRef, CosTrading.IllegalServiceType, CosTrading.UnknownServiceType, CosTrading.RegisterPackage.InterfaceTypeMismatch, CosTrading.IllegalPropertyName, CosTrading.PropertyTypeMismatch, CosTrading.ReadonlyDynamicProperty, CosTrading.MissingMandatoryProperty, CosTrading.DuplicatePropertyName
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("export", true);
                org.omg.CORBA.ObjectHelper.write ($out, reference);
                CosTrading.ServiceTypeNameHelper.write ($out, type);
                CosTrading.PropertySeqHelper.write ($out, properties);
                $in = _invoke ($out);
                String $result = CosTrading.OfferIdHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/Register/InvalidObjectRef:1.0"))
                    throw CosTrading.RegisterPackage.InvalidObjectRefHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/IllegalServiceType:1.0"))
                    throw CosTrading.IllegalServiceTypeHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/UnknownServiceType:1.0"))
                    throw CosTrading.UnknownServiceTypeHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/InterfaceTypeMismatch:1.0"))
                    throw CosTrading.RegisterPackage.InterfaceTypeMismatchHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/IllegalPropertyName:1.0"))
                    throw CosTrading.IllegalPropertyNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/PropertyTypeMismatch:1.0"))
                    throw CosTrading.PropertyTypeMismatchHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/ReadonlyDynamicProperty:1.0"))
                    throw CosTrading.ReadonlyDynamicPropertyHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/MissingMandatoryProperty:1.0"))
                    throw CosTrading.MissingMandatoryPropertyHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/DuplicatePropertyName:1.0"))
                    throw CosTrading.DuplicatePropertyNameHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return export (reference, type, properties        );
            } finally {
                _releaseReply ($in);
            }
  } // export


  /* doc: 35 */
  public void withdraw (String id) throws CosTrading.IllegalOfferId, CosTrading.UnknownOfferId, CosTrading.RegisterPackage.ProxyOfferId
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("withdraw", true);
                CosTrading.OfferIdHelper.write ($out, id);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/IllegalOfferId:1.0"))
                    throw CosTrading.IllegalOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/UnknownOfferId:1.0"))
                    throw CosTrading.UnknownOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/ProxyOfferId:1.0"))
                    throw CosTrading.RegisterPackage.ProxyOfferIdHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                withdraw (id        );
            } finally {
                _releaseReply ($in);
            }
  } // withdraw


  /* doc: 31 */
  public CosTrading.RegisterPackage.OfferInfo describe (String id) throws CosTrading.IllegalOfferId, CosTrading.UnknownOfferId, CosTrading.RegisterPackage.ProxyOfferId
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("describe", true);
                CosTrading.OfferIdHelper.write ($out, id);
                $in = _invoke ($out);
                CosTrading.RegisterPackage.OfferInfo $result = CosTrading.RegisterPackage.OfferInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/IllegalOfferId:1.0"))
                    throw CosTrading.IllegalOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/UnknownOfferId:1.0"))
                    throw CosTrading.UnknownOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/ProxyOfferId:1.0"))
                    throw CosTrading.RegisterPackage.ProxyOfferIdHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return describe (id        );
            } finally {
                _releaseReply ($in);
            }
  } // describe


  /** This operation modifies the properties supported
   * by a traded offer of service. Properties that are read-only
   * or mandatory may not be deleted and properties that are
   * read-only may not be modified.
   *
   * @param id - The identifier of the offer to be modified.
   * @param del_list - The list of properties to be deleted.
   * @param modify_list - The list of properties to be added or modified.
   *
   * @raises NotImplemented - If this operation is not implemented by the trader.
   * @raises IllegalOfferId - If the format of the offer identifier is invalid.
   * @raises UnknownOfferId - If the trader knows nothing of the identified offer.
   * @raises ProxyOfferId - The trader cannot withdraw the proxy offer.
   * @raises IllegalPropertyName - If a property name is illegal.
   * @raises UnknownPropertyName - If the offer does not support the named property.
   * @raises PropertyTypeMismatch - If the type of a property does not match
   *                                the type specified in the service definition.
   * @raises ReadonlyDynamicProperty - If an attempt has been made to assign a dynamic
   *                                   property value to a mandatory property.
   * @raises MandatoryProperty - If an attemp has been made to delete a mandatory property
   * @raises ReadonlyProperty - If an attemp has been made to modify a read-only property
   * @raises DuplicatePropertyName - If duplicate property names are specified.
   */
  public void modify (String id, String[] del_list, CosTrading.Property[] modify_list) throws CosTrading.NotImplemented, CosTrading.IllegalOfferId, CosTrading.UnknownOfferId, CosTrading.RegisterPackage.ProxyOfferId, CosTrading.IllegalPropertyName, CosTrading.RegisterPackage.UnknownPropertyName, CosTrading.PropertyTypeMismatch, CosTrading.ReadonlyDynamicProperty, CosTrading.RegisterPackage.MandatoryProperty, CosTrading.RegisterPackage.ReadonlyProperty, CosTrading.DuplicatePropertyName
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("modify", true);
                CosTrading.OfferIdHelper.write ($out, id);
                CosTrading.PropertyNameSeqHelper.write ($out, del_list);
                CosTrading.PropertySeqHelper.write ($out, modify_list);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/NotImplemented:1.0"))
                    throw CosTrading.NotImplementedHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/IllegalOfferId:1.0"))
                    throw CosTrading.IllegalOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/UnknownOfferId:1.0"))
                    throw CosTrading.UnknownOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/ProxyOfferId:1.0"))
                    throw CosTrading.RegisterPackage.ProxyOfferIdHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/IllegalPropertyName:1.0"))
                    throw CosTrading.IllegalPropertyNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/UnknownPropertyName:1.0"))
                    throw CosTrading.RegisterPackage.UnknownPropertyNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/PropertyTypeMismatch:1.0"))
                    throw CosTrading.PropertyTypeMismatchHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/ReadonlyDynamicProperty:1.0"))
                    throw CosTrading.ReadonlyDynamicPropertyHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/MandatoryProperty:1.0"))
                    throw CosTrading.RegisterPackage.MandatoryPropertyHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/ReadonlyProperty:1.0"))
                    throw CosTrading.RegisterPackage.ReadonlyPropertyHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/DuplicatePropertyName:1.0"))
                    throw CosTrading.DuplicatePropertyNameHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                modify (id, del_list, modify_list        );
            } finally {
                _releaseReply ($in);
            }
  } // modify


  /** This operation withdraws any offers matching the
   * specified constraints.
   *
   * @param type - The service type of offers to check. 
   * @param type - The constraint string to check offers against.
   *
   * @raises IllegalServiceType - If the specified service type
   *                              name is invalid.
   * @raises UnknownServiceType - If the specified service type
   *                              has not been registered.
   * @raises IllegalConstraint - If the constraint string is illegal.
   * @raises NoMatchingOffers - If no offers corresponding to the service type
   *                            and satisfying the constraints were found.
   */
  public void withdraw_using_constraint (String type, String constr) throws CosTrading.IllegalServiceType, CosTrading.UnknownServiceType, CosTrading.IllegalConstraint, CosTrading.RegisterPackage.NoMatchingOffers
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("withdraw_using_constraint", true);
                CosTrading.ServiceTypeNameHelper.write ($out, type);
                CosTrading.ConstraintHelper.write ($out, constr);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/IllegalServiceType:1.0"))
                    throw CosTrading.IllegalServiceTypeHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/UnknownServiceType:1.0"))
                    throw CosTrading.UnknownServiceTypeHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/IllegalConstraint:1.0"))
                    throw CosTrading.IllegalConstraintHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/NoMatchingOffers:1.0"))
                    throw CosTrading.RegisterPackage.NoMatchingOffersHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                withdraw_using_constraint (type, constr        );
            } finally {
                _releaseReply ($in);
            }
  } // withdraw_using_constraint


  /** This opreration resolves the Register interface of a linked trader.
   *
   * @param name - The name of the linked trader. 
   *
   * @raises IllegalTraderName - If the specified trader name has invalid syntax.
   * @raises UnknownTraderName - If the specified trader cannot be found.
   * @raises RegisterNotSupported - If the specified trader does not support
   *                                the Register interface.
   */
  public CosTrading.Register resolve (String[] name) throws CosTrading.RegisterPackage.IllegalTraderName, CosTrading.RegisterPackage.UnknownTraderName, CosTrading.RegisterPackage.RegisterNotSupported
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("resolve", true);
                CosTrading.TraderNameHelper.write ($out, name);
                $in = _invoke ($out);
                CosTrading.Register $result = CosTrading.RegisterHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:omg.org/CosTrading/Register/IllegalTraderName:1.0"))
                    throw CosTrading.RegisterPackage.IllegalTraderNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/UnknownTraderName:1.0"))
                    throw CosTrading.RegisterPackage.UnknownTraderNameHelper.read ($in);
                else if (_id.equals ("IDL:omg.org/CosTrading/Register/RegisterNotSupported:1.0"))
                    throw CosTrading.RegisterPackage.RegisterNotSupportedHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return resolve (name        );
            } finally {
                _releaseReply ($in);
            }
  } // resolve

  public CosTrading.Lookup lookup_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_lookup_if", true);
                $in = _invoke ($out);
                CosTrading.Lookup $result = CosTrading.LookupHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return lookup_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // lookup_if

  public CosTrading.Register register_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_register_if", true);
                $in = _invoke ($out);
                CosTrading.Register $result = CosTrading.RegisterHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return register_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // register_if

  public CosTrading.Link link_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_link_if", true);
                $in = _invoke ($out);
                CosTrading.Link $result = CosTrading.LinkHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return link_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // link_if

  public CosTrading.Proxy proxy_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_proxy_if", true);
                $in = _invoke ($out);
                CosTrading.Proxy $result = CosTrading.ProxyHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return proxy_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // proxy_if

  public CosTrading.Admin admin_if ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_admin_if", true);
                $in = _invoke ($out);
                CosTrading.Admin $result = CosTrading.AdminHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return admin_if (        );
            } finally {
                _releaseReply ($in);
            }
  } // admin_if

  public boolean supports_modifiable_properties ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_modifiable_properties", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_modifiable_properties (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_modifiable_properties

  public boolean supports_dynamic_properties ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_dynamic_properties", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_dynamic_properties (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_dynamic_properties

  public boolean supports_proxy_offers ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_supports_proxy_offers", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return supports_proxy_offers (        );
            } finally {
                _releaseReply ($in);
            }
  } // supports_proxy_offers

  public org.omg.CORBA.Object type_repos ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_type_repos", true);
                $in = _invoke ($out);
                org.omg.CORBA.Object $result = CosTrading.TypeRepositoryHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return type_repos (        );
            } finally {
                _releaseReply ($in);
            }
  } // type_repos

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:omg.org/CosTrading/Register:1.0", 
    "IDL:omg.org/CosTrading/TraderComponents:1.0", 
    "IDL:omg.org/CosTrading/SupportAttributes:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _RegisterStub
