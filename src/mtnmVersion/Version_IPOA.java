package mtnmVersion;


/**
* mtnmVersion/Version_IPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from mtnmVersion.idl
* Wednesday, June 15, 2016 7:24:39 PM COT
*/


/**
   * <p>The interface Version_I allows the NMS to query the current version
   * of the IDL interface implemented by the EMS system.
   * In order to use this interface, the NMS needs to invoke the getVersion
   * service to figure out which version of the interface the EMS
   * is providing.  getVersion() should be called by a client before 
   * other communications with
   * an EMS object.  The client can determine from the response string
   * which version of the EMS is available.</p>
   * <p> For details on how to support multiple versions of the IDL see
   * <a href=../../../supportingDocumentation/SD1-43_versioning.pdf >SD1-43 
   * Programmatic Versioning </a>.</p>
   * 
   * <h2> IDL change Process </h2> 
   * <p>Once a change is approved, the EMS and NMS
   * can implement the new changes.</p>
   * 
   * <h5> Version 3.5. </h5>
   * 
   **/
public abstract class Version_IPOA extends org.omg.PortableServer.Servant
 implements mtnmVersion.Version_IOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getVersion", new java.lang.Integer (0));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
     * <p>This service returns the version of the IDL that the corresponding 
     * EMS object supports.</p>
     *
     * The format of the return string is as follows:
     * <i>Release</i>.<i>Major</i>[.<i>Minor</i>] where <i>Release</i>,
     * <i>Major</i> and <i>Minor</i> are strings 
     * that contain only digits.
     * 
     * For example, 2.1 indicates release 2 and major release 1, 
     * 1.3 indicates release 1 and major release 3, and so on.
     * Note that x.y has the same meaning as x.y.0 
     * 
     * The minor digit is used for bug fixing the major release.  
     * e.g 1.2.1 is a minor release on 1.2.   
     *
     * Any changes to any IDL files must be approved by the 
     * Specification Authority.
     *
     * For TMF 814 version 2.1, the version is "2.1".
     * For TMF 814 version 3.0, the version is "3_0" or "3.0".
     *
     * <br><b>Returns</b> string: The version of the interface 
     **/
       case 0:  // mtnmVersion/Version_I/getVersion
       {
         String $result = null;
         $result = this.getVersion ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:mtnm.tmforum.org/mtnmVersion/Version_I:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Version_I _this() 
  {
    return Version_IHelper.narrow(
    super._this_object());
  }

  public Version_I _this(org.omg.CORBA.ORB orb) 
  {
    return Version_IHelper.narrow(
    super._this_object(orb));
  }


} // class Version_IPOA
