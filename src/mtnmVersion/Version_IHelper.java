package mtnmVersion;


/**
* mtnmVersion/Version_IHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from mtnmVersion.idl
* Wednesday, June 15, 2016 7:24:39 PM COT
*/


/**
   * <p>The interface Version_I allows the NMS to query the current version
   * of the IDL interface implemented by the EMS system.
   * In order to use this interface, the NMS needs to invoke the getVersion
   * service to figure out which version of the interface the EMS
   * is providing.  getVersion() should be called by a client before 
   * other communications with
   * an EMS object.  The client can determine from the response string
   * which version of the EMS is available.</p>
   * <p> For details on how to support multiple versions of the IDL see
   * <a href=../../../supportingDocumentation/SD1-43_versioning.pdf >SD1-43 
   * Programmatic Versioning </a>.</p>
   * 
   * <h2> IDL change Process </h2> 
   * <p>Once a change is approved, the EMS and NMS
   * can implement the new changes.</p>
   * 
   * <h5> Version 3.5. </h5>
   * 
   **/
abstract public class Version_IHelper
{
  private static String  _id = "IDL:mtnm.tmforum.org/mtnmVersion/Version_I:1.0";

  public static void insert (org.omg.CORBA.Any a, mtnmVersion.Version_I that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static mtnmVersion.Version_I extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_interface_tc (mtnmVersion.Version_IHelper.id (), "Version_I");
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static mtnmVersion.Version_I read (org.omg.CORBA.portable.InputStream istream)
  {
    return narrow (istream.read_Object (_Version_IStub.class));
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, mtnmVersion.Version_I value)
  {
    ostream.write_Object ((org.omg.CORBA.Object) value);
  }

  public static mtnmVersion.Version_I narrow (org.omg.CORBA.Object obj)
  {
    if (obj == null)
      return null;
    else if (obj instanceof mtnmVersion.Version_I)
      return (mtnmVersion.Version_I)obj;
    else if (!obj._is_a (id ()))
      throw new org.omg.CORBA.BAD_PARAM ();
    else
    {
      org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      mtnmVersion._Version_IStub stub = new mtnmVersion._Version_IStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

  public static mtnmVersion.Version_I unchecked_narrow (org.omg.CORBA.Object obj)
  {
    if (obj == null)
      return null;
    else if (obj instanceof mtnmVersion.Version_I)
      return (mtnmVersion.Version_I)obj;
    else
    {
      org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      mtnmVersion._Version_IStub stub = new mtnmVersion._Version_IStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

}
